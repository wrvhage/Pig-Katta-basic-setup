// $ANTLR 3.4 /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g 2012-10-31 09:51:35

package org.apache.pig.parser;

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pig.parser.PigMacro;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * Parser file for Pig Parser
 *
 * NOTE: THIS FILE IS THE BASE FOR A FEW TREE PARSER FILES, such as AstValidator.g, 
 *       SO IF YOU CHANGE THIS FILE, YOU WILL PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO 
 *       THOSE FILES AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class QueryParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AND", "AS", "ASC", "BAG", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "DCOLON", "DEFINE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "EQUAL", "EXECCOMMAND", "FALSE", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER_L", "IF", "IMPORT", "INNER", "INPUT", "INT", "INTEGER", "INTO", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "IDENTIFIER", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "NULL", "PARAMS", "QUERY", "REALIAS", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AND=5;
    public static final int AS=6;
    public static final int ASC=7;
    public static final int BAG=8;
    public static final int BOOLEAN=9;
    public static final int BY=10;
    public static final int BYTEARRAY=11;
    public static final int CACHE=12;
    public static final int CHARARRAY=13;
    public static final int COGROUP=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CROSS=17;
    public static final int DCOLON=18;
    public static final int DEFINE=19;
    public static final int DESC=20;
    public static final int DIGIT=21;
    public static final int DISTINCT=22;
    public static final int DIV=23;
    public static final int DOLLAR=24;
    public static final int DOLLARVAR=25;
    public static final int DOUBLE=26;
    public static final int DOUBLENUMBER=27;
    public static final int DOUBLE_PERIOD=28;
    public static final int EQUAL=29;
    public static final int EXECCOMMAND=30;
    public static final int FALSE=31;
    public static final int FILTER=32;
    public static final int FLATTEN=33;
    public static final int FLOAT=34;
    public static final int FLOATINGPOINT=35;
    public static final int FLOATNUMBER=36;
    public static final int FOREACH=37;
    public static final int FULL=38;
    public static final int GENERATE=39;
    public static final int GROUP=40;
    public static final int ID=41;
    public static final int IDENTIFIER_L=42;
    public static final int IF=43;
    public static final int IMPORT=44;
    public static final int INNER=45;
    public static final int INPUT=46;
    public static final int INT=47;
    public static final int INTEGER=48;
    public static final int INTO=49;
    public static final int IS=50;
    public static final int JOIN=51;
    public static final int LEFT=52;
    public static final int LEFT_BRACKET=53;
    public static final int LEFT_CURLY=54;
    public static final int LEFT_PAREN=55;
    public static final int LETTER=56;
    public static final int LIMIT=57;
    public static final int LOAD=58;
    public static final int LONG=59;
    public static final int LONGINTEGER=60;
    public static final int MAP=61;
    public static final int MAPREDUCE=62;
    public static final int MINUS=63;
    public static final int ML_COMMENT=64;
    public static final int MULTILINE_QUOTEDSTRING=65;
    public static final int NOT=66;
    public static final int NUM_OP_EQ=67;
    public static final int NUM_OP_GT=68;
    public static final int NUM_OP_GTE=69;
    public static final int NUM_OP_LT=70;
    public static final int NUM_OP_LTE=71;
    public static final int NUM_OP_NE=72;
    public static final int ONSCHEMA=73;
    public static final int OR=74;
    public static final int ORDER=75;
    public static final int OTHERWISE=76;
    public static final int OUTER=77;
    public static final int OUTPUT=78;
    public static final int PARALLEL=79;
    public static final int PARTITION=80;
    public static final int PERCENT=81;
    public static final int PERIOD=82;
    public static final int PLUS=83;
    public static final int POUND=84;
    public static final int QMARK=85;
    public static final int QUOTEDSTRING=86;
    public static final int RETURNS=87;
    public static final int RIGHT=88;
    public static final int RIGHT_BRACKET=89;
    public static final int RIGHT_CURLY=90;
    public static final int RIGHT_PAREN=91;
    public static final int SAMPLE=92;
    public static final int SEMI_COLON=93;
    public static final int SHIP=94;
    public static final int SL_COMMENT=95;
    public static final int SPECIALCHAR=96;
    public static final int SPLIT=97;
    public static final int STAR=98;
    public static final int STDERROR=99;
    public static final int STDIN=100;
    public static final int STDOUT=101;
    public static final int STORE=102;
    public static final int STREAM=103;
    public static final int STR_OP_EQ=104;
    public static final int STR_OP_GT=105;
    public static final int STR_OP_GTE=106;
    public static final int STR_OP_LT=107;
    public static final int STR_OP_LTE=108;
    public static final int STR_OP_MATCHES=109;
    public static final int STR_OP_NE=110;
    public static final int THROUGH=111;
    public static final int TRUE=112;
    public static final int TUPLE=113;
    public static final int UNION=114;
    public static final int USING=115;
    public static final int VOID=116;
    public static final int WS=117;
    public static final int ANY=118;
    public static final int BAG_TYPE=119;
    public static final int BAG_TYPE_CAST=120;
    public static final int BAG_VAL=121;
    public static final int BIN_EXPR=122;
    public static final int BOOL=123;
    public static final int CAST_EXPR=124;
    public static final int COL_RANGE=125;
    public static final int EXPR_IN_PAREN=126;
    public static final int FIELD_DEF=127;
    public static final int FOREACH_PLAN_COMPLEX=128;
    public static final int FOREACH_PLAN_SIMPLE=129;
    public static final int FUNC=130;
    public static final int FUNC_EVAL=131;
    public static final int FUNC_REF=132;
    public static final int IDENTIFIER=133;
    public static final int JOIN_ITEM=134;
    public static final int KEY_VAL_PAIR=135;
    public static final int MACRO_BODY=136;
    public static final int MACRO_DEF=137;
    public static final int MACRO_INLINE=138;
    public static final int MAP_TYPE=139;
    public static final int MAP_VAL=140;
    public static final int NEG=141;
    public static final int NESTED_CMD=142;
    public static final int NESTED_CMD_ASSI=143;
    public static final int NESTED_PROJ=144;
    public static final int NULL=145;
    public static final int PARAMS=146;
    public static final int QUERY=147;
    public static final int REALIAS=148;
    public static final int RETURN_VAL=149;
    public static final int SPLIT_BRANCH=150;
    public static final int STATEMENT=151;
    public static final int TOBAG=152;
    public static final int TOMAP=153;
    public static final int TOTUPLE=154;
    public static final int TUPLE_TYPE=155;
    public static final int TUPLE_TYPE_CAST=156;
    public static final int TUPLE_VAL=157;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public QueryParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public QueryParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return QueryParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g"; }


    private static Log log = LogFactory.getLog( QueryParser.class );

    private Set<String> memory = new HashSet<String>();

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) 
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    @Override
    public String getErrorMessage(RecognitionException e, String[] tokenNames ) {
        if( !log.isDebugEnabled() ) {
            if( e instanceof NoViableAltException ) {
                return "Syntax error, unexpected symbol at or near " + getTokenErrorDisplay( e.token );
            } else {
                return super.getErrorMessage( e, tokenNames );
            }
        }
        
        List stack =  getRuleInvocationStack( e, this.getClass().getName() );
        String msg = null;
        if( e instanceof NoViableAltException ) {
            NoViableAltException nvae = (NoViableAltException)e;
            msg = " no viable alt; token = " + e.token + " (decision=" + nvae.decisionNumber + " state " + nvae.stateNumber + ")" +
                " decision=<<" + nvae.grammarDecisionDescription + ">>";
        } else {
            msg =  super.getErrorMessage( e, tokenNames );
        }
        return stack + " " + msg;
    }

    @Override
    public String getTokenErrorDisplay(Token t) {
        return "'" + t.getText() + "'";
    }

    @Override
    public String getErrorHeader(RecognitionException ex) {
    	return QueryParserUtils.generateErrorHeader( ex, this.getSourceName() );
    }



    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:147:1: query : ( statement )* EOF -> ^( QUERY ( statement )* ) ;
    public final QueryParser.query_return query() throws RecognitionException {
        QueryParser.query_return retval = new QueryParser.query_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF2=null;
        QueryParser.statement_return statement1 =null;


        Object EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:147:7: ( ( statement )* EOF -> ^( QUERY ( statement )* ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:147:9: ( statement )* EOF
            {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:147:9: ( statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==COGROUP||LA1_0==CROSS||LA1_0==DEFINE||LA1_0==DISTINCT||LA1_0==FILTER||LA1_0==FOREACH||LA1_0==GROUP||LA1_0==IDENTIFIER_L||LA1_0==IMPORT||LA1_0==JOIN||LA1_0==LEFT_PAREN||(LA1_0 >= LIMIT && LA1_0 <= LOAD)||LA1_0==MAPREDUCE||LA1_0==ORDER||(LA1_0 >= SAMPLE && LA1_0 <= SEMI_COLON)||LA1_0==SPLIT||(LA1_0 >= STORE && LA1_0 <= STREAM)||LA1_0==UNION) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:147:9: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_query356);
            	    statement1=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_query359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 148:6: -> ^( QUERY ( statement )* )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:148:9: ^( QUERY ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUERY, "QUERY")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:148:18: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:151:1: statement : ( SEMI_COLON !| general_statement | foreach_statement | split_statement | inline_statement | import_statement | realias_statement );
    public final QueryParser.statement_return statement() throws RecognitionException {
        QueryParser.statement_return retval = new QueryParser.statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON3=null;
        QueryParser.general_statement_return general_statement4 =null;

        QueryParser.foreach_statement_return foreach_statement5 =null;

        QueryParser.split_statement_return split_statement6 =null;

        QueryParser.inline_statement_return inline_statement7 =null;

        QueryParser.import_statement_return import_statement8 =null;

        QueryParser.realias_statement_return realias_statement9 =null;


        Object SEMI_COLON3_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:151:11: ( SEMI_COLON !| general_statement | foreach_statement | split_statement | inline_statement | import_statement | realias_statement )
            int alt2=7;
            switch ( input.LA(1) ) {
            case SEMI_COLON:
                {
                alt2=1;
                }
                break;
            case IDENTIFIER_L:
                {
                int LA2_2 = input.LA(2);

                if ( (LA2_2==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case LEFT_PAREN:
                        {
                        int LA2_10 = input.LA(4);

                        if ( (LA2_10==COGROUP||LA2_10==CROSS||LA2_10==DEFINE||LA2_10==DISTINCT||LA2_10==FILTER||LA2_10==GROUP||LA2_10==JOIN||(LA2_10 >= LIMIT && LA2_10 <= LOAD)||LA2_10==MAPREDUCE||LA2_10==ORDER||LA2_10==SAMPLE||(LA2_10 >= STORE && LA2_10 <= STREAM)||LA2_10==UNION) ) {
                            alt2=2;
                        }
                        else if ( (LA2_10==FOREACH) ) {
                            alt2=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 10, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=3;
                        }
                        break;
                    case IDENTIFIER_L:
                        {
                        int LA2_11 = input.LA(4);

                        if ( (LA2_11==LEFT_PAREN) ) {
                            alt2=5;
                        }
                        else if ( (LA2_11==SEMI_COLON) ) {
                            alt2=7;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 8, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_2==COMMA||LA2_2==LEFT_PAREN) ) {
                    alt2=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 2, input);

                    throw nvae;

                }
                }
                break;
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DISTINCT:
            case FILTER:
            case GROUP:
            case JOIN:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case ORDER:
            case SAMPLE:
            case STORE:
            case STREAM:
            case UNION:
                {
                alt2=2;
                }
                break;
            case LEFT_PAREN:
                {
                int LA2_4 = input.LA(2);

                if ( (LA2_4==COGROUP||LA2_4==CROSS||LA2_4==DEFINE||LA2_4==DISTINCT||LA2_4==FILTER||LA2_4==GROUP||LA2_4==JOIN||(LA2_4 >= LIMIT && LA2_4 <= LOAD)||LA2_4==MAPREDUCE||LA2_4==ORDER||LA2_4==SAMPLE||(LA2_4 >= STORE && LA2_4 <= STREAM)||LA2_4==UNION) ) {
                    alt2=2;
                }
                else if ( (LA2_4==FOREACH) ) {
                    alt2=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }
                }
                break;
            case FOREACH:
                {
                alt2=3;
                }
                break;
            case SPLIT:
                {
                alt2=4;
                }
                break;
            case IMPORT:
                {
                alt2=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:151:13: SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMI_COLON3=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement384); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:152:13: general_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_general_statement_in_statement399);
                    general_statement4=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_statement4.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:153:13: foreach_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_statement_in_statement413);
                    foreach_statement5=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement5.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:154:13: split_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_split_statement_in_statement427);
                    split_statement6=split_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_statement6.getTree());

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:155:13: inline_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_statement_in_statement443);
                    inline_statement7=inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_statement7.getTree());

                    }
                    break;
                case 6 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:156:13: import_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_statement_in_statement465);
                    import_statement8=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement8.getTree());

                    }
                    break;
                case 7 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:157:13: realias_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_realias_statement_in_statement479);
                    realias_statement9=realias_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, realias_statement9.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:160:1: import_statement : import_clause SEMI_COLON !;
    public final QueryParser.import_statement_return import_statement() throws RecognitionException {
        QueryParser.import_statement_return retval = new QueryParser.import_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON11=null;
        QueryParser.import_clause_return import_clause10 =null;


        Object SEMI_COLON11_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:160:18: ( import_clause SEMI_COLON !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:160:20: import_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_import_clause_in_import_statement488);
            import_clause10=import_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, import_clause10.getTree());

            SEMI_COLON11=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_import_statement490); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_statement"


    public static class inline_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:163:1: inline_statement : inline_clause SEMI_COLON !;
    public final QueryParser.inline_statement_return inline_statement() throws RecognitionException {
        QueryParser.inline_statement_return retval = new QueryParser.inline_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON13=null;
        QueryParser.inline_clause_return inline_clause12 =null;


        Object SEMI_COLON13_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:163:18: ( inline_clause SEMI_COLON !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:163:20: inline_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_inline_clause_in_inline_statement500);
            inline_clause12=inline_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_clause12.getTree());

            SEMI_COLON13=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_inline_statement502); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_statement"


    public static class split_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:166:1: split_statement : split_clause SEMI_COLON !;
    public final QueryParser.split_statement_return split_statement() throws RecognitionException {
        QueryParser.split_statement_return retval = new QueryParser.split_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON15=null;
        QueryParser.split_clause_return split_clause14 =null;


        Object SEMI_COLON15_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:166:17: ( split_clause SEMI_COLON !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:166:19: split_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_split_clause_in_split_statement512);
            split_clause14=split_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_clause14.getTree());

            SEMI_COLON15=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_split_statement514); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_statement"


    public static class general_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:1: general_statement : ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) ;
    public final QueryParser.general_statement_return general_statement() throws RecognitionException {
        QueryParser.general_statement_return retval = new QueryParser.general_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL17=null;
        Token LEFT_PAREN20=null;
        Token RIGHT_PAREN23=null;
        Token SEMI_COLON24=null;
        QueryParser.alias_return alias16 =null;

        QueryParser.op_clause_return op_clause18 =null;

        QueryParser.parallel_clause_return parallel_clause19 =null;

        QueryParser.op_clause_return op_clause21 =null;

        QueryParser.parallel_clause_return parallel_clause22 =null;


        Object EQUAL17_tree=null;
        Object LEFT_PAREN20_tree=null;
        Object RIGHT_PAREN23_tree=null;
        Object SEMI_COLON24_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule op_clause");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:19: ( ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:21: ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON
            {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:21: ( alias EQUAL )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER_L) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:23: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_general_statement526);
                    alias16=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias16.getTree());

                    EQUAL17=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_general_statement528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL17);


                    }
                    break;

            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:38: ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==COGROUP||LA6_0==CROSS||LA6_0==DEFINE||LA6_0==DISTINCT||LA6_0==FILTER||LA6_0==GROUP||LA6_0==JOIN||(LA6_0 >= LIMIT && LA6_0 <= LOAD)||LA6_0==MAPREDUCE||LA6_0==ORDER||LA6_0==SAMPLE||(LA6_0 >= STORE && LA6_0 <= STREAM)||LA6_0==UNION) ) {
                alt6=1;
            }
            else if ( (LA6_0==LEFT_PAREN) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:39: op_clause ( parallel_clause )?
                    {
                    pushFollow(FOLLOW_op_clause_in_general_statement534);
                    op_clause18=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_clause.add(op_clause18.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:49: ( parallel_clause )?
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==PARALLEL) ) {
                        alt4=1;
                    }
                    switch (alt4) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:49: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_general_statement536);
                            parallel_clause19=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause19.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:68: LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN20=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_general_statement541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN20);


                    pushFollow(FOLLOW_op_clause_in_general_statement543);
                    op_clause21=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_clause.add(op_clause21.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:89: ( parallel_clause )?
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==PARALLEL) ) {
                        alt5=1;
                    }
                    switch (alt5) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:169:89: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_general_statement545);
                            parallel_clause22=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause22.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN23=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_general_statement548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN23);


                    }
                    break;

            }


            SEMI_COLON24=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_general_statement551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON24);


            // AST REWRITE
            // elements: alias, parallel_clause, op_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 170:18: -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:170:21: ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:170:34: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_op_clause.nextTree());

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:170:51: ( parallel_clause )?
                if ( stream_parallel_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                }
                stream_parallel_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class realias_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "realias_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:173:1: realias_statement : realias_clause SEMI_COLON !;
    public final QueryParser.realias_statement_return realias_statement() throws RecognitionException {
        QueryParser.realias_statement_return retval = new QueryParser.realias_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON26=null;
        QueryParser.realias_clause_return realias_clause25 =null;


        Object SEMI_COLON26_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:173:19: ( realias_clause SEMI_COLON !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:173:21: realias_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_realias_clause_in_realias_statement594);
            realias_clause25=realias_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, realias_clause25.getTree());

            SEMI_COLON26=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_realias_statement596); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "realias_statement"


    public static class realias_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "realias_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:176:1: realias_clause : alias EQUAL identifier -> ^( REALIAS alias identifier ) ;
    public final QueryParser.realias_clause_return realias_clause() throws RecognitionException {
        QueryParser.realias_clause_return retval = new QueryParser.realias_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL28=null;
        QueryParser.alias_return alias27 =null;

        QueryParser.identifier_return identifier29 =null;


        Object EQUAL28_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:176:16: ( alias EQUAL identifier -> ^( REALIAS alias identifier ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:176:18: alias EQUAL identifier
            {
            pushFollow(FOLLOW_alias_in_realias_clause606);
            alias27=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias27.getTree());

            EQUAL28=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_realias_clause608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL28);


            pushFollow(FOLLOW_identifier_in_realias_clause610);
            identifier29=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier29.getTree());

            // AST REWRITE
            // elements: alias, identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 177:5: -> ^( REALIAS alias identifier )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:177:8: ^( REALIAS alias identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(REALIAS, "REALIAS")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_identifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "realias_clause"


    public static class parallel_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:180:1: parallel_clause : PARALLEL ^ INTEGER ;
    public final QueryParser.parallel_clause_return parallel_clause() throws RecognitionException {
        QueryParser.parallel_clause_return retval = new QueryParser.parallel_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARALLEL30=null;
        Token INTEGER31=null;

        Object PARALLEL30_tree=null;
        Object INTEGER31_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:180:17: ( PARALLEL ^ INTEGER )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:180:19: PARALLEL ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            PARALLEL30=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL30_tree = 
            (Object)adaptor.create(PARALLEL30)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARALLEL30_tree, root_0);
            }

            INTEGER31=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER31_tree = 
            (Object)adaptor.create(INTEGER31)
            ;
            adaptor.addChild(root_0, INTEGER31_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:187:1: foreach_statement : ( ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement | foreach_simple_statement );
    public final QueryParser.foreach_statement_return foreach_statement() throws RecognitionException {
        QueryParser.foreach_statement_return retval = new QueryParser.foreach_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.foreach_complex_statement_return foreach_complex_statement32 =null;

        QueryParser.foreach_simple_statement_return foreach_simple_statement33 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:187:19: ( ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement | foreach_simple_statement )
            int alt7=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER_L:
                {
                int LA7_1 = input.LA(2);

                if ( (((synpred13_QueryParser()&&synpred13_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {
                    alt7=1;
                }
                else if ( ((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 1, input);

                    throw nvae;

                }
                }
                break;
            case FOREACH:
                {
                int LA7_2 = input.LA(2);

                if ( (synpred13_QueryParser()) ) {
                    alt7=1;
                }
                else if ( (true) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 2, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                alt7=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:187:21: ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_complex_statement_in_foreach_statement672);
                    foreach_complex_statement32=foreach_complex_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_complex_statement32.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:188:21: foreach_simple_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_simple_statement_in_foreach_statement694);
                    foreach_simple_statement33=foreach_simple_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_simple_statement33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class foreach_complex_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_complex_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:1: foreach_complex_statement : ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )? -> ^( STATEMENT ( alias )? foreach_clause_complex ) ;
    public final QueryParser.foreach_complex_statement_return foreach_complex_statement() throws RecognitionException {
        QueryParser.foreach_complex_statement_return retval = new QueryParser.foreach_complex_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL35=null;
        Token SEMI_COLON37=null;
        QueryParser.alias_return alias34 =null;

        QueryParser.foreach_clause_complex_return foreach_clause_complex36 =null;


        Object EQUAL35_tree=null;
        Object SEMI_COLON37_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_foreach_clause_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_clause_complex");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:27: ( ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )? -> ^( STATEMENT ( alias )? foreach_clause_complex ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:29: ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )?
            {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:29: ( alias EQUAL )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==IDENTIFIER_L) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:31: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_foreach_complex_statement705);
                    alias34=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias34.getTree());

                    EQUAL35=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_complex_statement707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL35);


                    }
                    break;

            }


            pushFollow(FOLLOW_foreach_clause_complex_in_foreach_complex_statement712);
            foreach_clause_complex36=foreach_clause_complex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_foreach_clause_complex.add(foreach_clause_complex36.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:69: ( SEMI_COLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMI_COLON) ) {
                int LA9_1 = input.LA(2);

                if ( (synpred15_QueryParser()) ) {
                    alt9=1;
                }
            }
            switch (alt9) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:69: SEMI_COLON
                    {
                    SEMI_COLON37=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_complex_statement714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON37);


                    }
                    break;

            }


            // AST REWRITE
            // elements: alias, foreach_clause_complex
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 192:26: -> ^( STATEMENT ( alias )? foreach_clause_complex )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:192:29: ^( STATEMENT ( alias )? foreach_clause_complex )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:192:42: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_foreach_clause_complex.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_complex_statement"


    public static class foreach_simple_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_simple_statement"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:1: foreach_simple_statement : ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? ) ;
    public final QueryParser.foreach_simple_statement_return foreach_simple_statement() throws RecognitionException {
        QueryParser.foreach_simple_statement_return retval = new QueryParser.foreach_simple_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL39=null;
        Token LEFT_PAREN42=null;
        Token RIGHT_PAREN45=null;
        Token SEMI_COLON46=null;
        QueryParser.alias_return alias38 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple40 =null;

        QueryParser.parallel_clause_return parallel_clause41 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple43 =null;

        QueryParser.parallel_clause_return parallel_clause44 =null;


        Object EQUAL39_tree=null;
        Object LEFT_PAREN42_tree=null;
        Object RIGHT_PAREN45_tree=null;
        Object SEMI_COLON46_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_foreach_clause_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_clause_simple");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:26: ( ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:28: ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON
            {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:28: ( alias EQUAL )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IDENTIFIER_L) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:30: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_foreach_simple_statement764);
                    alias38=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias38.getTree());

                    EQUAL39=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_simple_statement766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL39);


                    }
                    break;

            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:45: ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==FOREACH) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEFT_PAREN) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:46: foreach_clause_simple ( parallel_clause )?
                    {
                    pushFollow(FOLLOW_foreach_clause_simple_in_foreach_simple_statement772);
                    foreach_clause_simple40=foreach_clause_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_foreach_clause_simple.add(foreach_clause_simple40.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:68: ( parallel_clause )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==PARALLEL) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:195:68: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_foreach_simple_statement774);
                            parallel_clause41=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause41.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:196:51: LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN42=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_foreach_simple_statement828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN42);


                    pushFollow(FOLLOW_foreach_clause_simple_in_foreach_simple_statement830);
                    foreach_clause_simple43=foreach_clause_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_foreach_clause_simple.add(foreach_clause_simple43.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:196:84: ( parallel_clause )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==PARALLEL) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:196:84: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_foreach_simple_statement832);
                            parallel_clause44=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause44.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN45=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_foreach_simple_statement835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN45);


                    }
                    break;

            }


            SEMI_COLON46=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_simple_statement838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON46);


            // AST REWRITE
            // elements: alias, parallel_clause, foreach_clause_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 197:25: -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:197:28: ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:197:41: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_foreach_clause_simple.nextTree());

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:197:70: ( parallel_clause )?
                if ( stream_parallel_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                }
                stream_parallel_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_simple_statement"


    public static class alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:200:1: alias : identifier ;
    public final QueryParser.alias_return alias() throws RecognitionException {
        QueryParser.alias_return retval = new QueryParser.alias_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.identifier_return identifier47 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:200:7: ( identifier )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:200:9: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_alias887);
            identifier47=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier47.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:203:1: parameter : ( identifier | INTEGER | DOUBLENUMBER | QUOTEDSTRING | DOLLARVAR );
    public final QueryParser.parameter_return parameter() throws RecognitionException {
        QueryParser.parameter_return retval = new QueryParser.parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INTEGER49=null;
        Token DOUBLENUMBER50=null;
        Token QUOTEDSTRING51=null;
        Token DOLLARVAR52=null;
        QueryParser.identifier_return identifier48 =null;


        Object INTEGER49_tree=null;
        Object DOUBLENUMBER50_tree=null;
        Object QUOTEDSTRING51_tree=null;
        Object DOLLARVAR52_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:204:5: ( identifier | INTEGER | DOUBLENUMBER | QUOTEDSTRING | DOLLARVAR )
            int alt14=5;
            switch ( input.LA(1) ) {
            case IDENTIFIER_L:
                {
                alt14=1;
                }
                break;
            case INTEGER:
                {
                alt14=2;
                }
                break;
            case DOUBLENUMBER:
                {
                alt14=3;
                }
                break;
            case QUOTEDSTRING:
                {
                alt14=4;
                }
                break;
            case DOLLARVAR:
                {
                alt14=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:204:7: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_parameter901);
                    identifier48=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier48.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:205:7: INTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    INTEGER49=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parameter910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER49_tree = 
                    (Object)adaptor.create(INTEGER49)
                    ;
                    adaptor.addChild(root_0, INTEGER49_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:206:7: DOUBLENUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLENUMBER50=(Token)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_parameter919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER50_tree = 
                    (Object)adaptor.create(DOUBLENUMBER50)
                    ;
                    adaptor.addChild(root_0, DOUBLENUMBER50_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:207:7: QUOTEDSTRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTEDSTRING51=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_parameter927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING51_tree = 
                    (Object)adaptor.create(QUOTEDSTRING51)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING51_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:208:7: DOLLARVAR
                    {
                    root_0 = (Object)adaptor.nil();


                    DOLLARVAR52=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_parameter935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLARVAR52_tree = 
                    (Object)adaptor.create(DOLLARVAR52)
                    ;
                    adaptor.addChild(root_0, DOLLARVAR52_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class content_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "content"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:211:1: content : LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY ;
    public final QueryParser.content_return content() throws RecognitionException {
        QueryParser.content_return retval = new QueryParser.content_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY53=null;
        Token set55=null;
        Token RIGHT_CURLY56=null;
        QueryParser.content_return content54 =null;


        Object LEFT_CURLY53_tree=null;
        Object set55_tree=null;
        Object RIGHT_CURLY56_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:211:9: ( LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:211:11: LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY53=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_content944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY53_tree = 
            (Object)adaptor.create(LEFT_CURLY53)
            ;
            adaptor.addChild(root_0, LEFT_CURLY53_tree);
            }

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:211:22: ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )*
            loop15:
            do {
                int alt15=3;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==LEFT_CURLY) ) {
                    alt15=1;
                }
                else if ( ((LA15_0 >= ALL && LA15_0 <= LEFT_BRACKET)||(LA15_0 >= LEFT_PAREN && LA15_0 <= RIGHT_BRACKET)||(LA15_0 >= RIGHT_PAREN && LA15_0 <= TUPLE_VAL)) ) {
                    alt15=2;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:211:24: content
            	    {
            	    pushFollow(FOLLOW_content_in_content948);
            	    content54=content();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, content54.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:211:34: ~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    set55=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ALL && input.LA(1) <= LEFT_BRACKET)||(input.LA(1) >= LEFT_PAREN && input.LA(1) <= RIGHT_BRACKET)||(input.LA(1) >= RIGHT_PAREN && input.LA(1) <= TUPLE_VAL) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set55)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            RIGHT_CURLY56=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_content964); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY56_tree = 
            (Object)adaptor.create(RIGHT_CURLY56)
            ;
            adaptor.addChild(root_0, RIGHT_CURLY56_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "content"


    public static class op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:214:1: op_clause : ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause );
    public final QueryParser.op_clause_return op_clause() throws RecognitionException {
        QueryParser.op_clause_return retval = new QueryParser.op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.define_clause_return define_clause57 =null;

        QueryParser.load_clause_return load_clause58 =null;

        QueryParser.group_clause_return group_clause59 =null;

        QueryParser.store_clause_return store_clause60 =null;

        QueryParser.filter_clause_return filter_clause61 =null;

        QueryParser.distinct_clause_return distinct_clause62 =null;

        QueryParser.limit_clause_return limit_clause63 =null;

        QueryParser.sample_clause_return sample_clause64 =null;

        QueryParser.order_clause_return order_clause65 =null;

        QueryParser.cross_clause_return cross_clause66 =null;

        QueryParser.join_clause_return join_clause67 =null;

        QueryParser.union_clause_return union_clause68 =null;

        QueryParser.stream_clause_return stream_clause69 =null;

        QueryParser.mr_clause_return mr_clause70 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:214:11: ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause )
            int alt16=14;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt16=1;
                }
                break;
            case LOAD:
                {
                alt16=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt16=3;
                }
                break;
            case STORE:
                {
                alt16=4;
                }
                break;
            case FILTER:
                {
                alt16=5;
                }
                break;
            case DISTINCT:
                {
                alt16=6;
                }
                break;
            case LIMIT:
                {
                alt16=7;
                }
                break;
            case SAMPLE:
                {
                alt16=8;
                }
                break;
            case ORDER:
                {
                alt16=9;
                }
                break;
            case CROSS:
                {
                alt16=10;
                }
                break;
            case JOIN:
                {
                alt16=11;
                }
                break;
            case UNION:
                {
                alt16=12;
                }
                break;
            case STREAM:
                {
                alt16=13;
                }
                break;
            case MAPREDUCE:
                {
                alt16=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:214:13: define_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_clause_in_op_clause973);
                    define_clause57=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_clause57.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:215:13: load_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_load_clause_in_op_clause988);
                    load_clause58=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause58.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:216:13: group_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_group_clause_in_op_clause1002);
                    group_clause59=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause59.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:217:13: store_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_store_clause_in_op_clause1016);
                    store_clause60=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause60.getTree());

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:218:13: filter_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_filter_clause_in_op_clause1030);
                    filter_clause61=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter_clause61.getTree());

                    }
                    break;
                case 6 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:219:13: distinct_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_distinct_clause_in_op_clause1044);
                    distinct_clause62=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_clause62.getTree());

                    }
                    break;
                case 7 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:220:13: limit_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_limit_clause_in_op_clause1058);
                    limit_clause63=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause63.getTree());

                    }
                    break;
                case 8 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:221:13: sample_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sample_clause_in_op_clause1072);
                    sample_clause64=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sample_clause64.getTree());

                    }
                    break;
                case 9 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:222:13: order_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_clause_in_op_clause1086);
                    order_clause65=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_clause65.getTree());

                    }
                    break;
                case 10 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:223:13: cross_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cross_clause_in_op_clause1100);
                    cross_clause66=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cross_clause66.getTree());

                    }
                    break;
                case 11 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:224:13: join_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_clause_in_op_clause1114);
                    join_clause67=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause67.getTree());

                    }
                    break;
                case 12 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:225:13: union_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_clause_in_op_clause1128);
                    union_clause68=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, union_clause68.getTree());

                    }
                    break;
                case 13 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:226:13: stream_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stream_clause_in_op_clause1142);
                    stream_clause69=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_clause69.getTree());

                    }
                    break;
                case 14 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:227:13: mr_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_mr_clause_in_op_clause1156);
                    mr_clause70=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mr_clause70.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class macro_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_param_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:230:1: macro_param_clause : LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN -> ^( PARAMS ( alias )* ) ;
    public final QueryParser.macro_param_clause_return macro_param_clause() throws RecognitionException {
        QueryParser.macro_param_clause_return retval = new QueryParser.macro_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN71=null;
        Token COMMA73=null;
        Token RIGHT_PAREN75=null;
        QueryParser.alias_return alias72 =null;

        QueryParser.alias_return alias74 =null;


        Object LEFT_PAREN71_tree=null;
        Object COMMA73_tree=null;
        Object RIGHT_PAREN75_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:230:20: ( LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN -> ^( PARAMS ( alias )* ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:230:22: LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN
            {
            LEFT_PAREN71=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_macro_param_clause1165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN71);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:230:33: ( alias ( COMMA alias )* )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==IDENTIFIER_L) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:230:35: alias ( COMMA alias )*
                    {
                    pushFollow(FOLLOW_alias_in_macro_param_clause1169);
                    alias72=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias72.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:230:41: ( COMMA alias )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==COMMA) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:230:42: COMMA alias
                    	    {
                    	    COMMA73=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_param_clause1172); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA73);


                    	    pushFollow(FOLLOW_alias_in_macro_param_clause1174);
                    	    alias74=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias74.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN75=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_macro_param_clause1181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN75);


            // AST REWRITE
            // elements: alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 231:5: -> ^( PARAMS ( alias )* )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:231:8: ^( PARAMS ( alias )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:231:17: ( alias )*
                while ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_param_clause"


    public static class macro_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_return_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:234:1: macro_return_clause : RETURNS ( ( alias ( COMMA alias )* ) | VOID ) -> ^( RETURN_VAL ( alias )* ) ;
    public final QueryParser.macro_return_clause_return macro_return_clause() throws RecognitionException {
        QueryParser.macro_return_clause_return retval = new QueryParser.macro_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RETURNS76=null;
        Token COMMA78=null;
        Token VOID80=null;
        QueryParser.alias_return alias77 =null;

        QueryParser.alias_return alias79 =null;


        Object RETURNS76_tree=null;
        Object COMMA78_tree=null;
        Object VOID80_tree=null;
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RETURNS=new RewriteRuleTokenStream(adaptor,"token RETURNS");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:5: ( RETURNS ( ( alias ( COMMA alias )* ) | VOID ) -> ^( RETURN_VAL ( alias )* ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:7: RETURNS ( ( alias ( COMMA alias )* ) | VOID )
            {
            RETURNS76=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_macro_return_clause1208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURNS.add(RETURNS76);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:15: ( ( alias ( COMMA alias )* ) | VOID )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==IDENTIFIER_L) ) {
                alt20=1;
            }
            else if ( (LA20_0==VOID) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }
            switch (alt20) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:16: ( alias ( COMMA alias )* )
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:16: ( alias ( COMMA alias )* )
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:17: alias ( COMMA alias )*
                    {
                    pushFollow(FOLLOW_alias_in_macro_return_clause1212);
                    alias77=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias77.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:23: ( COMMA alias )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:24: COMMA alias
                    	    {
                    	    COMMA78=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_return_clause1215); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA78);


                    	    pushFollow(FOLLOW_alias_in_macro_return_clause1217);
                    	    alias79=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias79.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:235:41: VOID
                    {
                    VOID80=(Token)match(input,VOID,FOLLOW_VOID_in_macro_return_clause1224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID80);


                    }
                    break;

            }


            // AST REWRITE
            // elements: alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 236:9: -> ^( RETURN_VAL ( alias )* )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:236:12: ^( RETURN_VAL ( alias )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:236:25: ( alias )*
                while ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_return_clause"


    public static class macro_body_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_body_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:239:1: macro_body_clause : content -> ^( MACRO_BODY ) ;
    public final QueryParser.macro_body_clause_return macro_body_clause() throws RecognitionException {
        QueryParser.macro_body_clause_return retval = new QueryParser.macro_body_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.content_return content81 =null;


        RewriteRuleSubtreeStream stream_content=new RewriteRuleSubtreeStream(adaptor,"rule content");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:239:19: ( content -> ^( MACRO_BODY ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:239:21: content
            {
            pushFollow(FOLLOW_content_in_macro_body_clause1251);
            content81=content();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_content.add(content81.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 240:5: -> ^( MACRO_BODY )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:240:8: ^( MACRO_BODY )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_BODY, "MACRO_BODY")
                , root_1);

                adaptor.addChild(root_1,  new PigParserNode(new CommonToken(1, (content81!=null?input.toString(content81.start,content81.stop):null)), this.getSourceName(), (content81!=null?((Token)content81.start):null)) );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_body_clause"


    public static class macro_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:243:1: macro_clause : macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) ;
    public final QueryParser.macro_clause_return macro_clause() throws RecognitionException {
        QueryParser.macro_clause_return retval = new QueryParser.macro_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_param_clause_return macro_param_clause82 =null;

        QueryParser.macro_return_clause_return macro_return_clause83 =null;

        QueryParser.macro_body_clause_return macro_body_clause84 =null;


        RewriteRuleSubtreeStream stream_macro_body_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_body_clause");
        RewriteRuleSubtreeStream stream_macro_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_param_clause");
        RewriteRuleSubtreeStream stream_macro_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_return_clause");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:243:14: ( macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:243:16: macro_param_clause macro_return_clause macro_body_clause
            {
            pushFollow(FOLLOW_macro_param_clause_in_macro_clause1273);
            macro_param_clause82=macro_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_param_clause.add(macro_param_clause82.getTree());

            pushFollow(FOLLOW_macro_return_clause_in_macro_clause1275);
            macro_return_clause83=macro_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_return_clause.add(macro_return_clause83.getTree());

            pushFollow(FOLLOW_macro_body_clause_in_macro_clause1277);
            macro_body_clause84=macro_body_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_body_clause.add(macro_body_clause84.getTree());

            // AST REWRITE
            // elements: macro_body_clause, macro_return_clause, macro_param_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 244:5: -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:244:8: ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_DEF, "MACRO_DEF")
                , root_1);

                adaptor.addChild(root_1, stream_macro_param_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_return_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_body_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_clause"


    public static class inline_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_return_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:247:1: inline_return_clause : ( alias EQUAL -> ^( RETURN_VAL alias ) | alias ( COMMA alias )+ EQUAL -> ^( RETURN_VAL ( alias )+ ) | -> ^( RETURN_VAL ) );
    public final QueryParser.inline_return_clause_return inline_return_clause() throws RecognitionException {
        QueryParser.inline_return_clause_return retval = new QueryParser.inline_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL86=null;
        Token COMMA88=null;
        Token EQUAL90=null;
        QueryParser.alias_return alias85 =null;

        QueryParser.alias_return alias87 =null;

        QueryParser.alias_return alias89 =null;


        Object EQUAL86_tree=null;
        Object COMMA88_tree=null;
        Object EQUAL90_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:248:5: ( alias EQUAL -> ^( RETURN_VAL alias ) | alias ( COMMA alias )+ EQUAL -> ^( RETURN_VAL ( alias )+ ) | -> ^( RETURN_VAL ) )
            int alt22=3;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==IDENTIFIER_L) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt22=1;
                    }
                    break;
                case COMMA:
                    {
                    alt22=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt22=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:248:7: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_inline_return_clause1307);
                    alias85=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias85.getTree());

                    EQUAL86=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL86);


                    // AST REWRITE
                    // elements: alias
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 248:19: -> ^( RETURN_VAL alias )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:248:22: ^( RETURN_VAL alias )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_alias.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:249:4: alias ( COMMA alias )+ EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_inline_return_clause1322);
                    alias87=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias87.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:249:10: ( COMMA alias )+
                    int cnt21=0;
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==COMMA) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:249:11: COMMA alias
                    	    {
                    	    COMMA88=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_return_clause1325); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA88);


                    	    pushFollow(FOLLOW_alias_in_inline_return_clause1327);
                    	    alias89=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias89.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt21 >= 1 ) break loop21;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(21, input);
                                throw eee;
                        }
                        cnt21++;
                    } while (true);


                    EQUAL90=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL90);


                    // AST REWRITE
                    // elements: alias
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 249:31: -> ^( RETURN_VAL ( alias )+ )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:249:34: ^( RETURN_VAL ( alias )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        if ( !(stream_alias.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_alias.hasNext() ) {
                            adaptor.addChild(root_1, stream_alias.nextTree());

                        }
                        stream_alias.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:250:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 250:4: -> ^( RETURN_VAL )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:250:7: ^( RETURN_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_return_clause"


    public static class inline_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_param_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:253:1: inline_param_clause : LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) ;
    public final QueryParser.inline_param_clause_return inline_param_clause() throws RecognitionException {
        QueryParser.inline_param_clause_return retval = new QueryParser.inline_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN91=null;
        Token COMMA93=null;
        Token RIGHT_PAREN95=null;
        QueryParser.parameter_return parameter92 =null;

        QueryParser.parameter_return parameter94 =null;


        Object LEFT_PAREN91_tree=null;
        Object COMMA93_tree=null;
        Object RIGHT_PAREN95_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:253:21: ( LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:253:23: LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN
            {
            LEFT_PAREN91=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inline_param_clause1360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN91);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:253:34: ( parameter ( COMMA parameter )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==DOLLARVAR||LA24_0==DOUBLENUMBER||LA24_0==IDENTIFIER_L||LA24_0==INTEGER||LA24_0==QUOTEDSTRING) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:253:36: parameter ( COMMA parameter )*
                    {
                    pushFollow(FOLLOW_parameter_in_inline_param_clause1364);
                    parameter92=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter92.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:253:46: ( COMMA parameter )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:253:47: COMMA parameter
                    	    {
                    	    COMMA93=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_param_clause1367); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA93);


                    	    pushFollow(FOLLOW_parameter_in_inline_param_clause1369);
                    	    parameter94=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter94.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN95=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inline_param_clause1376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN95);


            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 254:5: -> ^( PARAMS ( parameter )* )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:254:8: ^( PARAMS ( parameter )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:254:17: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_param_clause"


    public static class inline_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:257:1: inline_clause : inline_return_clause alias inline_param_clause -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause ) ;
    public final QueryParser.inline_clause_return inline_clause() throws RecognitionException {
        QueryParser.inline_clause_return retval = new QueryParser.inline_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.inline_return_clause_return inline_return_clause96 =null;

        QueryParser.alias_return alias97 =null;

        QueryParser.inline_param_clause_return inline_param_clause98 =null;


        RewriteRuleSubtreeStream stream_inline_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_return_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_inline_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_param_clause");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:257:15: ( inline_return_clause alias inline_param_clause -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:257:17: inline_return_clause alias inline_param_clause
            {
            pushFollow(FOLLOW_inline_return_clause_in_inline_clause1398);
            inline_return_clause96=inline_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_return_clause.add(inline_return_clause96.getTree());

            pushFollow(FOLLOW_alias_in_inline_clause1400);
            alias97=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias97.getTree());

            pushFollow(FOLLOW_inline_param_clause_in_inline_clause1402);
            inline_param_clause98=inline_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_param_clause.add(inline_param_clause98.getTree());

            // AST REWRITE
            // elements: inline_return_clause, inline_param_clause, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 258:5: -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:258:8: ^( MACRO_INLINE alias inline_return_clause inline_param_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_INLINE, "MACRO_INLINE")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_inline_return_clause.nextTree());

                adaptor.addChild(root_1, stream_inline_param_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_clause"


    public static class import_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:261:1: import_clause : IMPORT ^ QUOTEDSTRING ;
    public final QueryParser.import_clause_return import_clause() throws RecognitionException {
        QueryParser.import_clause_return retval = new QueryParser.import_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT99=null;
        Token QUOTEDSTRING100=null;

        Object IMPORT99_tree=null;
        Object QUOTEDSTRING100_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:261:15: ( IMPORT ^ QUOTEDSTRING )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:261:17: IMPORT ^ QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            IMPORT99=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_clause1427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT99_tree = 
            (Object)adaptor.create(IMPORT99)
            ;
            root_0 = (Object)adaptor.becomeRoot(IMPORT99_tree, root_0);
            }

            QUOTEDSTRING100=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_import_clause1430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING100_tree = 
            (Object)adaptor.create(QUOTEDSTRING100)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING100_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_clause"


    public static class define_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:264:1: define_clause : DEFINE ^ alias ( cmd | func_clause | macro_clause ) ;
    public final QueryParser.define_clause_return define_clause() throws RecognitionException {
        QueryParser.define_clause_return retval = new QueryParser.define_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE101=null;
        QueryParser.alias_return alias102 =null;

        QueryParser.cmd_return cmd103 =null;

        QueryParser.func_clause_return func_clause104 =null;

        QueryParser.macro_clause_return macro_clause105 =null;


        Object DEFINE101_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:264:15: ( DEFINE ^ alias ( cmd | func_clause | macro_clause ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:264:17: DEFINE ^ alias ( cmd | func_clause | macro_clause )
            {
            root_0 = (Object)adaptor.nil();


            DEFINE101=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause1439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE101_tree = 
            (Object)adaptor.create(DEFINE101)
            ;
            root_0 = (Object)adaptor.becomeRoot(DEFINE101_tree, root_0);
            }

            pushFollow(FOLLOW_alias_in_define_clause1442);
            alias102=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, alias102.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:264:31: ( cmd | func_clause | macro_clause )
            int alt25=3;
            switch ( input.LA(1) ) {
            case EXECCOMMAND:
                {
                alt25=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER_L:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case REALIAS:
                {
                alt25=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt25=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }

            switch (alt25) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:264:33: cmd
                    {
                    pushFollow(FOLLOW_cmd_in_define_clause1446);
                    cmd103=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cmd103.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:264:39: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_define_clause1450);
                    func_clause104=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause104.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:264:53: macro_clause
                    {
                    pushFollow(FOLLOW_macro_clause_in_define_clause1454);
                    macro_clause105=macro_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_clause105.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:1: cmd : EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ;
    public final QueryParser.cmd_return cmd() throws RecognitionException {
        QueryParser.cmd_return retval = new QueryParser.cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXECCOMMAND106=null;
        QueryParser.ship_clause_return ship_clause107 =null;

        QueryParser.cache_clause_return cache_clause108 =null;

        QueryParser.input_clause_return input_clause109 =null;

        QueryParser.output_clause_return output_clause110 =null;

        QueryParser.error_clause_return error_clause111 =null;


        Object EXECCOMMAND106_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:5: ( EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:7: EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            {
            root_0 = (Object)adaptor.nil();


            EXECCOMMAND106=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd1464); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND106_tree = 
            (Object)adaptor.create(EXECCOMMAND106)
            ;
            root_0 = (Object)adaptor.becomeRoot(EXECCOMMAND106_tree, root_0);
            }

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:20: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            loop26:
            do {
                int alt26=6;
                switch ( input.LA(1) ) {
                case SHIP:
                    {
                    alt26=1;
                    }
                    break;
                case CACHE:
                    {
                    alt26=2;
                    }
                    break;
                case INPUT:
                    {
                    alt26=3;
                    }
                    break;
                case OUTPUT:
                    {
                    alt26=4;
                    }
                    break;
                case STDERROR:
                    {
                    alt26=5;
                    }
                    break;

                }

                switch (alt26) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:22: ship_clause
            	    {
            	    pushFollow(FOLLOW_ship_clause_in_cmd1469);
            	    ship_clause107=ship_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ship_clause107.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:36: cache_clause
            	    {
            	    pushFollow(FOLLOW_cache_clause_in_cmd1473);
            	    cache_clause108=cache_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cache_clause108.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:51: input_clause
            	    {
            	    pushFollow(FOLLOW_input_clause_in_cmd1477);
            	    input_clause109=input_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, input_clause109.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:66: output_clause
            	    {
            	    pushFollow(FOLLOW_output_clause_in_cmd1481);
            	    output_clause110=output_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, output_clause110.getTree());

            	    }
            	    break;
            	case 5 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:267:82: error_clause
            	    {
            	    pushFollow(FOLLOW_error_clause_in_cmd1485);
            	    error_clause111=error_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_clause111.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class ship_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:270:1: ship_clause : SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !;
    public final QueryParser.ship_clause_return ship_clause() throws RecognitionException {
        QueryParser.ship_clause_return retval = new QueryParser.ship_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SHIP112=null;
        Token LEFT_PAREN113=null;
        Token RIGHT_PAREN115=null;
        QueryParser.path_list_return path_list114 =null;


        Object SHIP112_tree=null;
        Object LEFT_PAREN113_tree=null;
        Object RIGHT_PAREN115_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:270:13: ( SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:270:15: SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            SHIP112=(Token)match(input,SHIP,FOLLOW_SHIP_in_ship_clause1497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP112_tree = 
            (Object)adaptor.create(SHIP112)
            ;
            root_0 = (Object)adaptor.becomeRoot(SHIP112_tree, root_0);
            }

            LEFT_PAREN113=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ship_clause1500); if (state.failed) return retval;

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:270:33: ( path_list )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==QUOTEDSTRING) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:270:33: path_list
                    {
                    pushFollow(FOLLOW_path_list_in_ship_clause1503);
                    path_list114=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list114.getTree());

                    }
                    break;

            }


            RIGHT_PAREN115=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ship_clause1506); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:273:1: path_list : QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ ;
    public final QueryParser.path_list_return path_list() throws RecognitionException {
        QueryParser.path_list_return retval = new QueryParser.path_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING116=null;
        Token COMMA117=null;
        Token QUOTEDSTRING118=null;

        Object QUOTEDSTRING116_tree=null;
        Object COMMA117_tree=null;
        Object QUOTEDSTRING118_tree=null;
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:273:11: ( QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:273:13: QUOTEDSTRING ( COMMA QUOTEDSTRING )*
            {
            QUOTEDSTRING116=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list1516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING116);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:273:26: ( COMMA QUOTEDSTRING )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:273:28: COMMA QUOTEDSTRING
            	    {
            	    COMMA117=(Token)match(input,COMMA,FOLLOW_COMMA_in_path_list1520); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA117);


            	    QUOTEDSTRING118=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list1522); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING118);


            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // AST REWRITE
            // elements: QUOTEDSTRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:10: -> ( QUOTEDSTRING )+
            {
                if ( !(stream_QUOTEDSTRING.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_QUOTEDSTRING.hasNext() ) {
                    adaptor.addChild(root_0, 
                    stream_QUOTEDSTRING.nextNode()
                    );

                }
                stream_QUOTEDSTRING.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:277:1: cache_clause : CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !;
    public final QueryParser.cache_clause_return cache_clause() throws RecognitionException {
        QueryParser.cache_clause_return retval = new QueryParser.cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CACHE119=null;
        Token LEFT_PAREN120=null;
        Token RIGHT_PAREN122=null;
        QueryParser.path_list_return path_list121 =null;


        Object CACHE119_tree=null;
        Object LEFT_PAREN120_tree=null;
        Object RIGHT_PAREN122_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:277:14: ( CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:277:16: CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            CACHE119=(Token)match(input,CACHE,FOLLOW_CACHE_in_cache_clause1549); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE119_tree = 
            (Object)adaptor.create(CACHE119)
            ;
            root_0 = (Object)adaptor.becomeRoot(CACHE119_tree, root_0);
            }

            LEFT_PAREN120=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cache_clause1552); if (state.failed) return retval;

            pushFollow(FOLLOW_path_list_in_cache_clause1555);
            path_list121=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list121.getTree());

            RIGHT_PAREN122=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cache_clause1557); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:280:1: input_clause : INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.input_clause_return input_clause() throws RecognitionException {
        QueryParser.input_clause_return retval = new QueryParser.input_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INPUT123=null;
        Token LEFT_PAREN124=null;
        Token RIGHT_PAREN126=null;
        QueryParser.stream_cmd_list_return stream_cmd_list125 =null;


        Object INPUT123_tree=null;
        Object LEFT_PAREN124_tree=null;
        Object RIGHT_PAREN126_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:280:14: ( INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:280:16: INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            INPUT123=(Token)match(input,INPUT,FOLLOW_INPUT_in_input_clause1567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT123_tree = 
            (Object)adaptor.create(INPUT123)
            ;
            root_0 = (Object)adaptor.becomeRoot(INPUT123_tree, root_0);
            }

            LEFT_PAREN124=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_input_clause1570); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_input_clause1573);
            stream_cmd_list125=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list125.getTree());

            RIGHT_PAREN126=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_input_clause1575); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class stream_cmd_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:283:1: stream_cmd_list : stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ ;
    public final QueryParser.stream_cmd_list_return stream_cmd_list() throws RecognitionException {
        QueryParser.stream_cmd_list_return retval = new QueryParser.stream_cmd_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA128=null;
        QueryParser.stream_cmd_return stream_cmd127 =null;

        QueryParser.stream_cmd_return stream_cmd129 =null;


        Object COMMA128_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_stream_cmd=new RewriteRuleSubtreeStream(adaptor,"rule stream_cmd");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:283:17: ( stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:283:19: stream_cmd ( COMMA stream_cmd )*
            {
            pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list1585);
            stream_cmd127=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd127.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:283:30: ( COMMA stream_cmd )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==COMMA) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:283:32: COMMA stream_cmd
            	    {
            	    COMMA128=(Token)match(input,COMMA,FOLLOW_COMMA_in_stream_cmd_list1589); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA128);


            	    pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list1591);
            	    stream_cmd129=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd129.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            // AST REWRITE
            // elements: stream_cmd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:16: -> ( stream_cmd )+
            {
                if ( !(stream_stream_cmd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stream_cmd.hasNext() ) {
                    adaptor.addChild(root_0, stream_stream_cmd.nextTree());

                }
                stream_stream_cmd.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd_list"


    public static class stream_cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:287:1: stream_cmd : ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )? ;
    public final QueryParser.stream_cmd_return stream_cmd() throws RecognitionException {
        QueryParser.stream_cmd_return retval = new QueryParser.stream_cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set130=null;
        Token USING131=null;
        QueryParser.func_clause_return func_clause132 =null;


        Object set130_tree=null;
        Object USING131_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:287:12: ( ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:287:14: ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )?
            {
            root_0 = (Object)adaptor.nil();


            set130=(Token)input.LT(1);

            set130=(Token)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||(input.LA(1) >= STDIN && input.LA(1) <= STDOUT) ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set130)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:287:49: ( USING ! ( func_clause ) )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==USING) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:287:51: USING ! ( func_clause )
                    {
                    USING131=(Token)match(input,USING,FOLLOW_USING_in_stream_cmd1640); if (state.failed) return retval;

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:287:58: ( func_clause )
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:287:60: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_stream_cmd1645);
                    func_clause132=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause132.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class output_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:290:1: output_clause : OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.output_clause_return output_clause() throws RecognitionException {
        QueryParser.output_clause_return retval = new QueryParser.output_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OUTPUT133=null;
        Token LEFT_PAREN134=null;
        Token RIGHT_PAREN136=null;
        QueryParser.stream_cmd_list_return stream_cmd_list135 =null;


        Object OUTPUT133_tree=null;
        Object LEFT_PAREN134_tree=null;
        Object RIGHT_PAREN136_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:290:15: ( OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:290:17: OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            OUTPUT133=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause1659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT133_tree = 
            (Object)adaptor.create(OUTPUT133)
            ;
            root_0 = (Object)adaptor.becomeRoot(OUTPUT133_tree, root_0);
            }

            LEFT_PAREN134=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_output_clause1662); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_output_clause1665);
            stream_cmd_list135=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list135.getTree());

            RIGHT_PAREN136=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_output_clause1667); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:293:1: error_clause : STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !;
    public final QueryParser.error_clause_return error_clause() throws RecognitionException {
        QueryParser.error_clause_return retval = new QueryParser.error_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STDERROR137=null;
        Token LEFT_PAREN138=null;
        Token QUOTEDSTRING139=null;
        Token LIMIT140=null;
        Token INTEGER141=null;
        Token RIGHT_PAREN142=null;

        Object STDERROR137_tree=null;
        Object LEFT_PAREN138_tree=null;
        Object QUOTEDSTRING139_tree=null;
        Object LIMIT140_tree=null;
        Object INTEGER141_tree=null;
        Object RIGHT_PAREN142_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:293:14: ( STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:293:16: STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            STDERROR137=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause1677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR137_tree = 
            (Object)adaptor.create(STDERROR137)
            ;
            root_0 = (Object)adaptor.becomeRoot(STDERROR137_tree, root_0);
            }

            LEFT_PAREN138=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_error_clause1680); if (state.failed) return retval;

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:293:38: ( QUOTEDSTRING ( LIMIT ! INTEGER )? )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==QUOTEDSTRING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:293:40: QUOTEDSTRING ( LIMIT ! INTEGER )?
                    {
                    QUOTEDSTRING139=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause1685); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING139_tree = 
                    (Object)adaptor.create(QUOTEDSTRING139)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING139_tree);
                    }

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:293:53: ( LIMIT ! INTEGER )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==LIMIT) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:293:55: LIMIT ! INTEGER
                            {
                            LIMIT140=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_error_clause1689); if (state.failed) return retval;

                            INTEGER141=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause1692); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER141_tree = 
                            (Object)adaptor.create(INTEGER141)
                            ;
                            adaptor.addChild(root_0, INTEGER141_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            RIGHT_PAREN142=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_error_clause1700); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:296:1: load_clause : LOAD ^ filename ( USING ! func_clause )? ( as_clause )? ;
    public final QueryParser.load_clause_return load_clause() throws RecognitionException {
        QueryParser.load_clause_return retval = new QueryParser.load_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LOAD143=null;
        Token USING145=null;
        QueryParser.filename_return filename144 =null;

        QueryParser.func_clause_return func_clause146 =null;

        QueryParser.as_clause_return as_clause147 =null;


        Object LOAD143_tree=null;
        Object USING145_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:296:13: ( LOAD ^ filename ( USING ! func_clause )? ( as_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:296:15: LOAD ^ filename ( USING ! func_clause )? ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            LOAD143=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_clause1710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD143_tree = 
            (Object)adaptor.create(LOAD143)
            ;
            root_0 = (Object)adaptor.becomeRoot(LOAD143_tree, root_0);
            }

            pushFollow(FOLLOW_filename_in_load_clause1713);
            filename144=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, filename144.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:296:30: ( USING ! func_clause )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==USING) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:296:32: USING ! func_clause
                    {
                    USING145=(Token)match(input,USING,FOLLOW_USING_in_load_clause1717); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_load_clause1720);
                    func_clause146=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause146.getTree());

                    }
                    break;

            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:296:54: ( as_clause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==AS) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:296:54: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_load_clause1725);
                    as_clause147=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause147.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class filename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filename"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:299:1: filename : QUOTEDSTRING ;
    public final QueryParser.filename_return filename() throws RecognitionException {
        QueryParser.filename_return retval = new QueryParser.filename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING148=null;

        Object QUOTEDSTRING148_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:299:10: ( QUOTEDSTRING )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:299:12: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING148=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_filename1735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING148_tree = 
            (Object)adaptor.create(QUOTEDSTRING148)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING148_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filename"


    public static class as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:1: as_clause : AS ^ ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) ;
    public final QueryParser.as_clause_return as_clause() throws RecognitionException {
        QueryParser.as_clause_return retval = new QueryParser.as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS149=null;
        Token LEFT_PAREN151=null;
        Token RIGHT_PAREN153=null;
        QueryParser.field_def_return field_def150 =null;

        QueryParser.field_def_list_return field_def_list152 =null;


        Object AS149_tree=null;
        Object LEFT_PAREN151_tree=null;
        Object RIGHT_PAREN153_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:10: ( AS ^ ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:12: AS ^ ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
            {
            root_0 = (Object)adaptor.nil();


            AS149=(Token)match(input,AS,FOLLOW_AS_in_as_clause1743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS149_tree = 
            (Object)adaptor.create(AS149)
            ;
            root_0 = (Object)adaptor.becomeRoot(AS149_tree, root_0);
            }

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:16: ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==IDENTIFIER_L) ) {
                alt35=1;
            }
            else if ( (LA35_0==LEFT_PAREN) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:18: field_def
                    {
                    pushFollow(FOLLOW_field_def_in_as_clause1748);
                    field_def150=field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def150.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:30: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:30: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:302:32: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                    {
                    LEFT_PAREN151=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_as_clause1754); if (state.failed) return retval;

                    pushFollow(FOLLOW_field_def_list_in_as_clause1757);
                    field_def_list152=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list152.getTree());

                    RIGHT_PAREN153=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_as_clause1759); if (state.failed) return retval;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:305:1: field_def : identifier ( COLON type )? -> ^( FIELD_DEF identifier ( type )? ) ;
    public final QueryParser.field_def_return field_def() throws RecognitionException {
        QueryParser.field_def_return retval = new QueryParser.field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON155=null;
        QueryParser.identifier_return identifier154 =null;

        QueryParser.type_return type156 =null;


        Object COLON155_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:305:11: ( identifier ( COLON type )? -> ^( FIELD_DEF identifier ( type )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:305:13: identifier ( COLON type )?
            {
            pushFollow(FOLLOW_identifier_in_field_def1773);
            identifier154=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier154.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:305:24: ( COLON type )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==COLON) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:305:26: COLON type
                    {
                    COLON155=(Token)match(input,COLON,FOLLOW_COLON_in_field_def1777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON155);


                    pushFollow(FOLLOW_type_in_field_def1779);
                    type156=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type156.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:10: -> ^( FIELD_DEF identifier ( type )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:306:13: ^( FIELD_DEF identifier ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_DEF, "FIELD_DEF")
                , root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:306:37: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:309:1: field_def_list : field_def ( COMMA field_def )* -> ( field_def )+ ;
    public final QueryParser.field_def_list_return field_def_list() throws RecognitionException {
        QueryParser.field_def_list_return retval = new QueryParser.field_def_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA158=null;
        QueryParser.field_def_return field_def157 =null;

        QueryParser.field_def_return field_def159 =null;


        Object COMMA158_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_field_def=new RewriteRuleSubtreeStream(adaptor,"rule field_def");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:309:16: ( field_def ( COMMA field_def )* -> ( field_def )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:309:18: field_def ( COMMA field_def )*
            {
            pushFollow(FOLLOW_field_def_in_field_def_list1813);
            field_def157=field_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_def.add(field_def157.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:309:28: ( COMMA field_def )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==COMMA) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:309:30: COMMA field_def
            	    {
            	    COMMA158=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_def_list1817); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA158);


            	    pushFollow(FOLLOW_field_def_in_field_def_list1819);
            	    field_def159=field_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_def.add(field_def159.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            // AST REWRITE
            // elements: field_def
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 310:15: -> ( field_def )+
            {
                if ( !(stream_field_def.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_def.hasNext() ) {
                    adaptor.addChild(root_0, stream_field_def.nextTree());

                }
                stream_field_def.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:313:1: type : ( simple_type | tuple_type | bag_type | map_type );
    public final QueryParser.type_return type() throws RecognitionException {
        QueryParser.type_return retval = new QueryParser.type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type160 =null;

        QueryParser.tuple_type_return tuple_type161 =null;

        QueryParser.bag_type_return bag_type162 =null;

        QueryParser.map_type_return map_type163 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:313:6: ( simple_type | tuple_type | bag_type | map_type )
            int alt38=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt38=1;
                }
                break;
            case LEFT_PAREN:
            case TUPLE:
                {
                alt38=2;
                }
                break;
            case BAG:
            case LEFT_CURLY:
                {
                alt38=3;
                }
                break;
            case LEFT_BRACKET:
            case MAP:
                {
                alt38=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }

            switch (alt38) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:313:8: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_type1850);
                    simple_type160=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type160.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:313:22: tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_type_in_type1854);
                    tuple_type161=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple_type161.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:313:35: bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_type_in_type1858);
                    bag_type162=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag_type162.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:313:46: map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_type_in_type1862);
                    map_type163=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_type163.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:316:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY );
    public final QueryParser.simple_type_return simple_type() throws RecognitionException {
        QueryParser.simple_type_return retval = new QueryParser.simple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set164=null;

        Object set164_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:316:13: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set164=(Token)input.LT(1);

            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTEARRAY||input.LA(1)==CHARARRAY||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set164)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:319:1: tuple_type : ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final QueryParser.tuple_type_return tuple_type() throws RecognitionException {
        QueryParser.tuple_type_return retval = new QueryParser.tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE165=null;
        Token LEFT_PAREN166=null;
        Token RIGHT_PAREN168=null;
        QueryParser.field_def_list_return field_def_list167 =null;


        Object TUPLE165_tree=null;
        Object LEFT_PAREN166_tree=null;
        Object RIGHT_PAREN168_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_field_def_list=new RewriteRuleSubtreeStream(adaptor,"rule field_def_list");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:319:12: ( ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:319:14: ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN
            {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:319:14: ( TUPLE )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==TUPLE) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:319:14: TUPLE
                    {
                    TUPLE165=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_tuple_type1904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE165);


                    }
                    break;

            }


            LEFT_PAREN166=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple_type1907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN166);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:319:32: ( field_def_list )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==IDENTIFIER_L) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:319:32: field_def_list
                    {
                    pushFollow(FOLLOW_field_def_list_in_tuple_type1909);
                    field_def_list167=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_def_list.add(field_def_list167.getTree());

                    }
                    break;

            }


            RIGHT_PAREN168=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple_type1912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN168);


            // AST REWRITE
            // elements: field_def_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:11: -> ^( TUPLE_TYPE ( field_def_list )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:320:14: ^( TUPLE_TYPE ( field_def_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE, "TUPLE_TYPE")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:320:28: ( field_def_list )?
                if ( stream_field_def_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_field_def_list.nextTree());

                }
                stream_field_def_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:1: bag_type : ( ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier )? ( tuple_type )? ) );
    public final QueryParser.bag_type_return bag_type() throws RecognitionException {
        QueryParser.bag_type_return retval = new QueryParser.bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG169=null;
        Token LEFT_CURLY170=null;
        Token COLON172=null;
        Token RIGHT_CURLY174=null;
        Token BAG175=null;
        Token LEFT_CURLY176=null;
        Token COLON178=null;
        Token RIGHT_CURLY180=null;
        QueryParser.null_keyword_return null_keyword171 =null;

        QueryParser.tuple_type_return tuple_type173 =null;

        QueryParser.identifier_return identifier177 =null;

        QueryParser.tuple_type_return tuple_type179 =null;


        Object BAG169_tree=null;
        Object LEFT_CURLY170_tree=null;
        Object COLON172_tree=null;
        Object RIGHT_CURLY174_tree=null;
        Object BAG175_tree=null;
        Object LEFT_CURLY176_tree=null;
        Object COLON178_tree=null;
        Object RIGHT_CURLY180_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple_type=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type");
        RewriteRuleSubtreeStream stream_null_keyword=new RewriteRuleSubtreeStream(adaptor,"rule null_keyword");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:10: ( ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier )? ( tuple_type )? ) )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==BAG) ) {
                int LA46_1 = input.LA(2);

                if ( (synpred82_QueryParser()) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA46_0==LEFT_CURLY) ) {
                int LA46_2 = input.LA(2);

                if ( (synpred82_QueryParser()) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:12: ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:12: ( BAG )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==BAG) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:12: BAG
                            {
                            BAG169=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type1942); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BAG.add(BAG169);


                            }
                            break;

                    }


                    LEFT_CURLY170=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type1945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY170);


                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:28: ( null_keyword COLON ( tuple_type )? )
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:30: null_keyword COLON ( tuple_type )?
                    {
                    pushFollow(FOLLOW_null_keyword_in_bag_type1949);
                    null_keyword171=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_keyword.add(null_keyword171.getTree());

                    COLON172=(Token)match(input,COLON,FOLLOW_COLON_in_bag_type1951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON172);


                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:49: ( tuple_type )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==LEFT_PAREN||LA42_0==TUPLE) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:49: tuple_type
                            {
                            pushFollow(FOLLOW_tuple_type_in_bag_type1953);
                            tuple_type173=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type173.getTree());

                            }
                            break;

                    }


                    }


                    RIGHT_CURLY174=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type1958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY174);


                    // AST REWRITE
                    // elements: tuple_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 324:9: -> ^( BAG_TYPE ( tuple_type )? )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:324:12: ^( BAG_TYPE ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:324:24: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:325:12: ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:325:12: ( BAG )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==BAG) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:325:12: BAG
                            {
                            BAG175=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type1990); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BAG.add(BAG175);


                            }
                            break;

                    }


                    LEFT_CURLY176=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type1993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY176);


                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:325:28: ( ( identifier COLON )? tuple_type )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==IDENTIFIER_L||LA45_0==LEFT_PAREN||LA45_0==TUPLE) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:325:30: ( identifier COLON )? tuple_type
                            {
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:325:30: ( identifier COLON )?
                            int alt44=2;
                            int LA44_0 = input.LA(1);

                            if ( (LA44_0==IDENTIFIER_L) ) {
                                alt44=1;
                            }
                            switch (alt44) {
                                case 1 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:325:32: identifier COLON
                                    {
                                    pushFollow(FOLLOW_identifier_in_bag_type1999);
                                    identifier177=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_identifier.add(identifier177.getTree());

                                    COLON178=(Token)match(input,COLON,FOLLOW_COLON_in_bag_type2001); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(COLON178);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_tuple_type_in_bag_type2006);
                            tuple_type179=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type179.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY180=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type2011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY180);


                    // AST REWRITE
                    // elements: tuple_type, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 326:9: -> ^( BAG_TYPE ( identifier )? ( tuple_type )? )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:326:12: ^( BAG_TYPE ( identifier )? ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:326:24: ( identifier )?
                        if ( stream_identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier.nextTree());

                        }
                        stream_identifier.reset();

                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:326:36: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type"


    public static class map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:329:1: map_type : ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) ;
    public final QueryParser.map_type_return map_type() throws RecognitionException {
        QueryParser.map_type_return retval = new QueryParser.map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAP181=null;
        Token LEFT_BRACKET182=null;
        Token RIGHT_BRACKET184=null;
        QueryParser.type_return type183 =null;


        Object MAP181_tree=null;
        Object LEFT_BRACKET182_tree=null;
        Object RIGHT_BRACKET184_tree=null;
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_MAP=new RewriteRuleTokenStream(adaptor,"token MAP");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:329:10: ( ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:329:12: ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET
            {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:329:12: ( MAP )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==MAP) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:329:12: MAP
                    {
                    MAP181=(Token)match(input,MAP,FOLLOW_MAP_in_map_type2042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAP.add(MAP181);


                    }
                    break;

            }


            LEFT_BRACKET182=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map_type2045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET182);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:329:30: ( type )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( ((LA48_0 >= BAG && LA48_0 <= BOOLEAN)||LA48_0==BYTEARRAY||LA48_0==CHARARRAY||LA48_0==DOUBLE||LA48_0==FLOAT||LA48_0==INT||(LA48_0 >= LEFT_BRACKET && LA48_0 <= LEFT_PAREN)||LA48_0==LONG||LA48_0==MAP||LA48_0==TUPLE) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:329:30: type
                    {
                    pushFollow(FOLLOW_type_in_map_type2047);
                    type183=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type183.getTree());

                    }
                    break;

            }


            RIGHT_BRACKET184=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map_type2050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET184);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 330:9: -> ^( MAP_TYPE ( type )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:330:12: ^( MAP_TYPE ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MAP_TYPE, "MAP_TYPE")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:330:24: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class func_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:333:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );
    public final QueryParser.func_clause_return func_clause() throws RecognitionException {
        QueryParser.func_clause_return retval = new QueryParser.func_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN187=null;
        Token RIGHT_PAREN189=null;
        QueryParser.func_name_return func_name185 =null;

        QueryParser.func_name_return func_name186 =null;

        QueryParser.func_args_return func_args188 =null;


        Object LEFT_PAREN187_tree=null;
        Object RIGHT_PAREN189_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:333:13: ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) )
            int alt50=2;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:333:15: func_name
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2078);
                    func_name185=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name185.getTree());

                    // AST REWRITE
                    // elements: func_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 334:12: -> ^( FUNC_REF func_name )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:334:15: ^( FUNC_REF func_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_REF, "FUNC_REF")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:335:15: func_name LEFT_PAREN ( func_args )? RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2115);
                    func_name186=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name186.getTree());

                    LEFT_PAREN187=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_clause2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN187);


                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:335:36: ( func_args )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==MULTILINE_QUOTEDSTRING||LA49_0==QUOTEDSTRING) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:335:36: func_args
                            {
                            pushFollow(FOLLOW_func_args_in_func_clause2119);
                            func_args188=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_args.add(func_args188.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN189=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_clause2122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN189);


                    // AST REWRITE
                    // elements: func_name, func_args
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 336:12: -> ^( FUNC func_name ( func_args )? )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:336:15: ^( FUNC func_name ( func_args )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC, "FUNC")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:336:33: ( func_args )?
                        if ( stream_func_args.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_args.nextTree());

                        }
                        stream_func_args.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:339:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_return func_name() throws RecognitionException {
        QueryParser.func_name_return retval = new QueryParser.func_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set191=null;
        QueryParser.eid_return eid190 =null;

        QueryParser.eid_return eid192 =null;


        Object set191_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:339:11: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:339:13: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_in_func_name2155);
            eid190=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid190.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:339:17: ( ( PERIOD | DOLLAR ) eid )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==DOLLAR||LA51_0==PERIOD) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:339:19: ( PERIOD | DOLLAR ) eid
            	    {
            	    set191=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set191)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name2169);
            	    eid192=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid192.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args_string"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:342:1: func_args_string : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING );
    public final QueryParser.func_args_string_return func_args_string() throws RecognitionException {
        QueryParser.func_args_string_return retval = new QueryParser.func_args_string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set193=null;

        Object set193_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:342:18: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set193=(Token)input.LT(1);

            if ( input.LA(1)==MULTILINE_QUOTEDSTRING||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set193)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args_string"


    public static class func_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:345:1: func_args : func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ ;
    public final QueryParser.func_args_return func_args() throws RecognitionException {
        QueryParser.func_args_return retval = new QueryParser.func_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA195=null;
        QueryParser.func_args_string_return func_args_string194 =null;

        QueryParser.func_args_string_return func_args_string196 =null;


        Object COMMA195_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_func_args_string=new RewriteRuleSubtreeStream(adaptor,"rule func_args_string");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:345:11: ( func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:345:13: func_args_string ( COMMA func_args_string )*
            {
            pushFollow(FOLLOW_func_args_string_in_func_args2194);
            func_args_string194=func_args_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string194.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:345:30: ( COMMA func_args_string )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==COMMA) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:345:32: COMMA func_args_string
            	    {
            	    COMMA195=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_args2198); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA195);


            	    pushFollow(FOLLOW_func_args_string_in_func_args2200);
            	    func_args_string196=func_args_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string196.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            // AST REWRITE
            // elements: func_args_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:10: -> ( func_args_string )+
            {
                if ( !(stream_func_args_string.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_func_args_string.hasNext() ) {
                    adaptor.addChild(root_0, stream_func_args_string.nextTree());

                }
                stream_func_args_string.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:349:1: group_clause : ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )? ;
    public final QueryParser.group_clause_return group_clause() throws RecognitionException {
        QueryParser.group_clause_return retval = new QueryParser.group_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set197=null;
        Token USING199=null;
        QueryParser.group_item_list_return group_item_list198 =null;

        QueryParser.group_type_return group_type200 =null;

        QueryParser.partition_clause_return partition_clause201 =null;


        Object set197_tree=null;
        Object USING199_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:349:14: ( ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:349:16: ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set197=(Token)input.LT(1);

            set197=(Token)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set197)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_group_item_list_in_group_clause2237);
            group_item_list198=group_item_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_item_list198.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:349:53: ( USING ! group_type )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==USING) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:349:55: USING ! group_type
                    {
                    USING199=(Token)match(input,USING,FOLLOW_USING_in_group_clause2241); if (state.failed) return retval;

                    pushFollow(FOLLOW_group_type_in_group_clause2244);
                    group_type200=group_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_type200.getTree());

                    }
                    break;

            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:349:76: ( partition_clause )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==PARTITION) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:349:76: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_group_clause2249);
                    partition_clause201=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause201.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_type"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:352:1: group_type : QUOTEDSTRING ;
    public final QueryParser.group_type_return group_type() throws RecognitionException {
        QueryParser.group_type_return retval = new QueryParser.group_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING202=null;

        Object QUOTEDSTRING202_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:352:12: ( QUOTEDSTRING )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:352:14: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING202=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_type2259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING202_tree = 
            (Object)adaptor.create(QUOTEDSTRING202)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING202_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_type"


    public static class group_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:355:1: group_item_list : group_item ( COMMA group_item )* -> ( group_item )+ ;
    public final QueryParser.group_item_list_return group_item_list() throws RecognitionException {
        QueryParser.group_item_list_return retval = new QueryParser.group_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA204=null;
        QueryParser.group_item_return group_item203 =null;

        QueryParser.group_item_return group_item205 =null;


        Object COMMA204_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_group_item=new RewriteRuleSubtreeStream(adaptor,"rule group_item");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:355:17: ( group_item ( COMMA group_item )* -> ( group_item )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:355:19: group_item ( COMMA group_item )*
            {
            pushFollow(FOLLOW_group_item_in_group_item_list2268);
            group_item203=group_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_item.add(group_item203.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:355:30: ( COMMA group_item )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:355:32: COMMA group_item
            	    {
            	    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_item_list2272); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA204);


            	    pushFollow(FOLLOW_group_item_in_group_item_list2274);
            	    group_item205=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_group_item.add(group_item205.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            // AST REWRITE
            // elements: group_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:16: -> ( group_item )+
            {
                if ( !(stream_group_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_group_item.hasNext() ) {
                    adaptor.addChild(root_0, stream_group_item.nextTree());

                }
                stream_group_item.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item_list"


    public static class group_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final QueryParser.group_item_return group_item() throws RecognitionException {
        QueryParser.group_item_return retval = new QueryParser.group_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ALL208=null;
        Token ANY209=null;
        Token set210=null;
        QueryParser.rel_return rel206 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause207 =null;


        Object ALL208_tree=null;
        Object ANY209_tree=null;
        Object set210_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:12: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:14: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_rel_in_group_item2306);
            rel206=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel206.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:18: ( join_group_by_clause | ALL | ANY )
            int alt56=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt56=1;
                }
                break;
            case ALL:
                {
                alt56=2;
                }
                break;
            case ANY:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }

            switch (alt56) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:20: join_group_by_clause
                    {
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item2310);
                    join_group_by_clause207=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_clause207.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:43: ALL
                    {
                    ALL208=(Token)match(input,ALL,FOLLOW_ALL_in_group_item2314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL208_tree = 
                    (Object)adaptor.create(ALL208)
                    ;
                    adaptor.addChild(root_0, ALL208_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:49: ANY
                    {
                    ANY209=(Token)match(input,ANY,FOLLOW_ANY_in_group_item2318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY209_tree = 
                    (Object)adaptor.create(ANY209)
                    ;
                    adaptor.addChild(root_0, ANY209_tree);
                    }

                    }
                    break;

            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:359:55: ( INNER | OUTER )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==INNER||LA57_0==OUTER) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
                    {
                    set210=(Token)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set210)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:362:1: rel : ( alias | LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !);
    public final QueryParser.rel_return rel() throws RecognitionException {
        QueryParser.rel_return retval = new QueryParser.rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN212=null;
        Token RIGHT_PAREN217=null;
        QueryParser.alias_return alias211 =null;

        QueryParser.foreach_clause_complex_return foreach_clause_complex213 =null;

        QueryParser.op_clause_return op_clause214 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple215 =null;

        QueryParser.parallel_clause_return parallel_clause216 =null;


        Object LEFT_PAREN212_tree=null;
        Object RIGHT_PAREN217_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:362:5: ( alias | LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !)
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==IDENTIFIER_L) ) {
                alt61=1;
            }
            else if ( (LA61_0==LEFT_PAREN) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:362:7: alias
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alias_in_rel2340);
                    alias211=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias211.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:7: LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN212=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rel2349); if (state.failed) return retval;

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:19: ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) )
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==FOREACH) ) {
                        int LA60_1 = input.LA(2);

                        if ( (synpred103_QueryParser()) ) {
                            alt60=1;
                        }
                        else if ( (true) ) {
                            alt60=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 60, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA60_0==COGROUP||LA60_0==CROSS||LA60_0==DEFINE||LA60_0==DISTINCT||LA60_0==FILTER||LA60_0==GROUP||LA60_0==JOIN||(LA60_0 >= LIMIT && LA60_0 <= LOAD)||LA60_0==MAPREDUCE||LA60_0==ORDER||LA60_0==SAMPLE||(LA60_0 >= STORE && LA60_0 <= STREAM)||LA60_0==UNION) ) {
                        alt60=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 60, 0, input);

                        throw nvae;

                    }
                    switch (alt60) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:21: foreach_clause_complex
                            {
                            pushFollow(FOLLOW_foreach_clause_complex_in_rel2354);
                            foreach_clause_complex213=foreach_clause_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_clause_complex213.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:46: ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? )
                            {
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:46: ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? )
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:48: ( op_clause | foreach_clause_simple ) ( parallel_clause )?
                            {
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:48: ( op_clause | foreach_clause_simple )
                            int alt58=2;
                            int LA58_0 = input.LA(1);

                            if ( (LA58_0==COGROUP||LA58_0==CROSS||LA58_0==DEFINE||LA58_0==DISTINCT||LA58_0==FILTER||LA58_0==GROUP||LA58_0==JOIN||(LA58_0 >= LIMIT && LA58_0 <= LOAD)||LA58_0==MAPREDUCE||LA58_0==ORDER||LA58_0==SAMPLE||(LA58_0 >= STORE && LA58_0 <= STREAM)||LA58_0==UNION) ) {
                                alt58=1;
                            }
                            else if ( (LA58_0==FOREACH) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 0, input);

                                throw nvae;

                            }
                            switch (alt58) {
                                case 1 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:50: op_clause
                                    {
                                    pushFollow(FOLLOW_op_clause_in_rel2362);
                                    op_clause214=op_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_clause214.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:62: foreach_clause_simple
                                    {
                                    pushFollow(FOLLOW_foreach_clause_simple_in_rel2366);
                                    foreach_clause_simple215=foreach_clause_simple();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_clause_simple215.getTree());

                                    }
                                    break;

                            }


                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:86: ( parallel_clause )?
                            int alt59=2;
                            int LA59_0 = input.LA(1);

                            if ( (LA59_0==PARALLEL) ) {
                                alt59=1;
                            }
                            switch (alt59) {
                                case 1 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:86: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_rel2370);
                                    parallel_clause216=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parallel_clause216.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    RIGHT_PAREN217=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rel2377); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class flatten_generated_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:1: flatten_generated_item : ( flatten_clause ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? | col_range ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? );
    public final QueryParser.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        QueryParser.flatten_generated_item_return retval = new QueryParser.flatten_generated_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS219=null;
        Token LEFT_PAREN221=null;
        Token RIGHT_PAREN223=null;
        Token AS225=null;
        Token LEFT_PAREN227=null;
        Token RIGHT_PAREN229=null;
        Token AS231=null;
        Token STAR233=null;
        Token AS234=null;
        Token LEFT_PAREN236=null;
        Token RIGHT_PAREN238=null;
        QueryParser.flatten_clause_return flatten_clause218 =null;

        QueryParser.field_def_return field_def220 =null;

        QueryParser.field_def_list_return field_def_list222 =null;

        QueryParser.col_range_return col_range224 =null;

        QueryParser.field_def_return field_def226 =null;

        QueryParser.field_def_list_return field_def_list228 =null;

        QueryParser.expr_return expr230 =null;

        QueryParser.field_def_return field_def232 =null;

        QueryParser.field_def_return field_def235 =null;

        QueryParser.field_def_list_return field_def_list237 =null;


        Object AS219_tree=null;
        Object LEFT_PAREN221_tree=null;
        Object RIGHT_PAREN223_tree=null;
        Object AS225_tree=null;
        Object LEFT_PAREN227_tree=null;
        Object RIGHT_PAREN229_tree=null;
        Object AS231_tree=null;
        Object STAR233_tree=null;
        Object AS234_tree=null;
        Object LEFT_PAREN236_tree=null;
        Object RIGHT_PAREN238_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:24: ( flatten_clause ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? | col_range ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? )
            int alt69=4;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:26: flatten_clause ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item2387);
                    flatten_clause218=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flatten_clause218.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:41: ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==AS) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:43: AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
                            {
                            AS219=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2391); if (state.failed) return retval;

                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:47: ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
                            int alt62=2;
                            int LA62_0 = input.LA(1);

                            if ( (LA62_0==IDENTIFIER_L) ) {
                                alt62=1;
                            }
                            else if ( (LA62_0==LEFT_PAREN) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 0, input);

                                throw nvae;

                            }
                            switch (alt62) {
                                case 1 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:49: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2396);
                                    field_def220=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def220.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:61: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:61: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:63: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN221=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2402); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2405);
                                    field_def_list222=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list222.getTree());

                                    RIGHT_PAREN223=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2407); if (state.failed) return retval;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:26: col_range ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_flatten_generated_item2442);
                    col_range224=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range224.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:36: ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==AS) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:38: AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
                            {
                            AS225=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2446); if (state.failed) return retval;

                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:42: ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
                            int alt64=2;
                            int LA64_0 = input.LA(1);

                            if ( (LA64_0==IDENTIFIER_L) ) {
                                alt64=1;
                            }
                            else if ( (LA64_0==LEFT_PAREN) ) {
                                alt64=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 64, 0, input);

                                throw nvae;

                            }
                            switch (alt64) {
                                case 1 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:44: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2451);
                                    field_def226=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def226.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:56: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:56: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:58: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN227=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2457); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2460);
                                    field_def_list228=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list228.getTree());

                                    RIGHT_PAREN229=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2462); if (state.failed) return retval;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:368:26: expr ( AS ! field_def )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_flatten_generated_item2497);
                    expr230=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr230.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:368:31: ( AS ! field_def )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==AS) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:368:33: AS ! field_def
                            {
                            AS231=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2501); if (state.failed) return retval;

                            pushFollow(FOLLOW_field_def_in_flatten_generated_item2504);
                            field_def232=field_def();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def232.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:26: STAR ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR233=(Token)match(input,STAR,FOLLOW_STAR_in_flatten_generated_item2534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR233_tree = 
                    (Object)adaptor.create(STAR233)
                    ;
                    adaptor.addChild(root_0, STAR233_tree);
                    }

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:31: ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==AS) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:33: AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
                            {
                            AS234=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2538); if (state.failed) return retval;

                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:37: ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) )
                            int alt67=2;
                            int LA67_0 = input.LA(1);

                            if ( (LA67_0==IDENTIFIER_L) ) {
                                alt67=1;
                            }
                            else if ( (LA67_0==LEFT_PAREN) ) {
                                alt67=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 67, 0, input);

                                throw nvae;

                            }
                            switch (alt67) {
                                case 1 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:39: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2543);
                                    field_def235=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def235.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:51: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:51: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:369:53: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN236=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2549); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2552);
                                    field_def_list237=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list237.getTree());

                                    RIGHT_PAREN238=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2554); if (state.failed) return retval;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class flatten_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:372:1: flatten_clause : FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !;
    public final QueryParser.flatten_clause_return flatten_clause() throws RecognitionException {
        QueryParser.flatten_clause_return retval = new QueryParser.flatten_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FLATTEN239=null;
        Token LEFT_PAREN240=null;
        Token RIGHT_PAREN242=null;
        QueryParser.expr_return expr241 =null;


        Object FLATTEN239_tree=null;
        Object LEFT_PAREN240_tree=null;
        Object RIGHT_PAREN242_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:372:16: ( FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:372:18: FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            FLATTEN239=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause2572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN239_tree = 
            (Object)adaptor.create(FLATTEN239)
            ;
            root_0 = (Object)adaptor.becomeRoot(FLATTEN239_tree, root_0);
            }

            LEFT_PAREN240=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_clause2575); if (state.failed) return retval;

            pushFollow(FOLLOW_expr_in_flatten_clause2578);
            expr241=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr241.getTree());

            RIGHT_PAREN242=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_clause2580); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class store_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:375:1: store_clause : STORE ^ rel INTO ! filename ( USING ! func_clause )? ;
    public final QueryParser.store_clause_return store_clause() throws RecognitionException {
        QueryParser.store_clause_return retval = new QueryParser.store_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STORE243=null;
        Token INTO245=null;
        Token USING247=null;
        QueryParser.rel_return rel244 =null;

        QueryParser.filename_return filename246 =null;

        QueryParser.func_clause_return func_clause248 =null;


        Object STORE243_tree=null;
        Object INTO245_tree=null;
        Object USING247_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:375:14: ( STORE ^ rel INTO ! filename ( USING ! func_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:375:16: STORE ^ rel INTO ! filename ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STORE243=(Token)match(input,STORE,FOLLOW_STORE_in_store_clause2590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE243_tree = 
            (Object)adaptor.create(STORE243)
            ;
            root_0 = (Object)adaptor.becomeRoot(STORE243_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_store_clause2593);
            rel244=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel244.getTree());

            INTO245=(Token)match(input,INTO,FOLLOW_INTO_in_store_clause2595); if (state.failed) return retval;

            pushFollow(FOLLOW_filename_in_store_clause2598);
            filename246=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, filename246.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:375:42: ( USING ! func_clause )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==USING) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:375:44: USING ! func_clause
                    {
                    USING247=(Token)match(input,USING,FOLLOW_USING_in_store_clause2602); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_store_clause2605);
                    func_clause248=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause248.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:378:1: filter_clause : FILTER ^ rel BY ! cond ;
    public final QueryParser.filter_clause_return filter_clause() throws RecognitionException {
        QueryParser.filter_clause_return retval = new QueryParser.filter_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER249=null;
        Token BY251=null;
        QueryParser.rel_return rel250 =null;

        QueryParser.cond_return cond252 =null;


        Object FILTER249_tree=null;
        Object BY251_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:378:15: ( FILTER ^ rel BY ! cond )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:378:17: FILTER ^ rel BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER249=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter_clause2617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER249_tree = 
            (Object)adaptor.create(FILTER249)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER249_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_filter_clause2620);
            rel250=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel250.getTree());

            BY251=(Token)match(input,BY,FOLLOW_BY_in_filter_clause2622); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_filter_clause2625);
            cond252=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond252.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:381:1: cond : or_cond ;
    public final QueryParser.cond_return cond() throws RecognitionException {
        QueryParser.cond_return retval = new QueryParser.cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.or_cond_return or_cond253 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:381:6: ( or_cond )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:381:8: or_cond
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_or_cond_in_cond2634);
            or_cond253=or_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_cond253.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class or_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "or_cond"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:384:1: or_cond : and_cond ( OR ^ and_cond )* ;
    public final QueryParser.or_cond_return or_cond() throws RecognitionException {
        QueryParser.or_cond_return retval = new QueryParser.or_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR255=null;
        QueryParser.and_cond_return and_cond254 =null;

        QueryParser.and_cond_return and_cond256 =null;


        Object OR255_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:384:9: ( and_cond ( OR ^ and_cond )* )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:384:11: and_cond ( OR ^ and_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_cond_in_or_cond2643);
            and_cond254=and_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond254.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:384:21: ( OR ^ and_cond )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==OR) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:384:23: OR ^ and_cond
            	    {
            	    OR255=(Token)match(input,OR,FOLLOW_OR_in_or_cond2648); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR255_tree = 
            	    (Object)adaptor.create(OR255)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR255_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_and_cond_in_or_cond2651);
            	    and_cond256=and_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond256.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "or_cond"


    public static class and_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_cond"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:387:1: and_cond : unary_cond ( AND ^ unary_cond )* ;
    public final QueryParser.and_cond_return and_cond() throws RecognitionException {
        QueryParser.and_cond_return retval = new QueryParser.and_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND258=null;
        QueryParser.unary_cond_return unary_cond257 =null;

        QueryParser.unary_cond_return unary_cond259 =null;


        Object AND258_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:387:10: ( unary_cond ( AND ^ unary_cond )* )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:387:12: unary_cond ( AND ^ unary_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_unary_cond_in_and_cond2663);
            unary_cond257=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond257.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:387:23: ( AND ^ unary_cond )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==AND) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:387:25: AND ^ unary_cond
            	    {
            	    AND258=(Token)match(input,AND,FOLLOW_AND_in_and_cond2667); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND258_tree = 
            	    (Object)adaptor.create(AND258)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND258_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_unary_cond_in_and_cond2670);
            	    unary_cond259=unary_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond259.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_cond"


    public static class unary_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_cond"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:390:1: unary_cond : ( LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | expr rel_op ^ expr | func_eval | null_check_cond );
    public final QueryParser.unary_cond_return unary_cond() throws RecognitionException {
        QueryParser.unary_cond_return retval = new QueryParser.unary_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN260=null;
        Token RIGHT_PAREN262=null;
        QueryParser.cond_return cond261 =null;

        QueryParser.not_cond_return not_cond263 =null;

        QueryParser.expr_return expr264 =null;

        QueryParser.rel_op_return rel_op265 =null;

        QueryParser.expr_return expr266 =null;

        QueryParser.func_eval_return func_eval267 =null;

        QueryParser.null_check_cond_return null_check_cond268 =null;


        Object LEFT_PAREN260_tree=null;
        Object RIGHT_PAREN262_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:390:12: ( LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | expr rel_op ^ expr | func_eval | null_check_cond )
            int alt73=5;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:390:14: LEFT_PAREN ! cond RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN260=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_cond2682); if (state.failed) return retval;

                    pushFollow(FOLLOW_cond_in_unary_cond2685);
                    cond261=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cond261.getTree());

                    RIGHT_PAREN262=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_cond2687); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:391:14: not_cond
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_not_cond_in_unary_cond2703);
                    not_cond263=not_cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond263.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:392:14: expr rel_op ^ expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_unary_cond2718);
                    expr264=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr264.getTree());

                    pushFollow(FOLLOW_rel_op_in_unary_cond2720);
                    rel_op265=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(rel_op265.getTree(), root_0);

                    pushFollow(FOLLOW_expr_in_unary_cond2723);
                    expr266=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr266.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:393:14: func_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_eval_in_unary_cond2738);
                    func_eval267=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_eval267.getTree());

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:394:14: null_check_cond
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_check_cond_in_unary_cond2753);
                    null_check_cond268=null_check_cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_check_cond268.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_cond"


    public static class not_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_cond"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:397:1: not_cond : NOT ^ unary_cond ;
    public final QueryParser.not_cond_return not_cond() throws RecognitionException {
        QueryParser.not_cond_return retval = new QueryParser.not_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT269=null;
        QueryParser.unary_cond_return unary_cond270 =null;


        Object NOT269_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:397:10: ( NOT ^ unary_cond )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:397:12: NOT ^ unary_cond
            {
            root_0 = (Object)adaptor.nil();


            NOT269=(Token)match(input,NOT,FOLLOW_NOT_in_not_cond2762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NOT269_tree = 
            (Object)adaptor.create(NOT269)
            ;
            root_0 = (Object)adaptor.becomeRoot(NOT269_tree, root_0);
            }

            pushFollow(FOLLOW_unary_cond_in_not_cond2765);
            unary_cond270=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond270.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_cond"


    public static class func_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_eval"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:400:1: func_eval : func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN -> ^( FUNC_EVAL func_name ( real_arg_list )? ) ;
    public final QueryParser.func_eval_return func_eval() throws RecognitionException {
        QueryParser.func_eval_return retval = new QueryParser.func_eval_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN272=null;
        Token RIGHT_PAREN274=null;
        QueryParser.func_name_return func_name271 =null;

        QueryParser.real_arg_list_return real_arg_list273 =null;


        Object LEFT_PAREN272_tree=null;
        Object RIGHT_PAREN274_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_real_arg_list=new RewriteRuleSubtreeStream(adaptor,"rule real_arg_list");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:400:11: ( func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN -> ^( FUNC_EVAL func_name ( real_arg_list )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:400:13: func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_func_name_in_func_eval2774);
            func_name271=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_name.add(func_name271.getTree());

            LEFT_PAREN272=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_eval2776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN272);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:400:34: ( real_arg_list )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( ((LA74_0 >= ALL && LA74_0 <= BAG)||(LA74_0 >= BY && LA74_0 <= COGROUP)||LA74_0==CROSS||(LA74_0 >= DEFINE && LA74_0 <= DESC)||LA74_0==DISTINCT||(LA74_0 >= DOLLARVAR && LA74_0 <= DOUBLE_PERIOD)||(LA74_0 >= FALSE && LA74_0 <= FLOAT)||(LA74_0 >= FLOATNUMBER && LA74_0 <= GROUP)||(LA74_0 >= IDENTIFIER_L && LA74_0 <= LEFT_PAREN)||(LA74_0 >= LIMIT && LA74_0 <= MINUS)||LA74_0==NOT||(LA74_0 >= OR && LA74_0 <= ORDER)||(LA74_0 >= OUTER && LA74_0 <= PARTITION)||(LA74_0 >= QUOTEDSTRING && LA74_0 <= RIGHT)||LA74_0==SAMPLE||LA74_0==SHIP||(LA74_0 >= SPLIT && LA74_0 <= USING)||LA74_0==BOOL||LA74_0==REALIAS) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:400:34: real_arg_list
                    {
                    pushFollow(FOLLOW_real_arg_list_in_func_eval2778);
                    real_arg_list273=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list273.getTree());

                    }
                    break;

            }


            RIGHT_PAREN274=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_eval2781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN274);


            // AST REWRITE
            // elements: real_arg_list, func_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:11: -> ^( FUNC_EVAL func_name ( real_arg_list )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:401:14: ^( FUNC_EVAL func_name ( real_arg_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                , root_1);

                adaptor.addChild(root_1, stream_func_name.nextTree());

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:401:37: ( real_arg_list )?
                if ( stream_real_arg_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                }
                stream_real_arg_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_eval"


    public static class real_arg_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:404:1: real_arg_list : real_arg ( COMMA real_arg )* -> ( real_arg )+ ;
    public final QueryParser.real_arg_list_return real_arg_list() throws RecognitionException {
        QueryParser.real_arg_list_return retval = new QueryParser.real_arg_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA276=null;
        QueryParser.real_arg_return real_arg275 =null;

        QueryParser.real_arg_return real_arg277 =null;


        Object COMMA276_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:404:15: ( real_arg ( COMMA real_arg )* -> ( real_arg )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:404:17: real_arg ( COMMA real_arg )*
            {
            pushFollow(FOLLOW_real_arg_in_real_arg_list2813);
            real_arg275=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_real_arg.add(real_arg275.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:404:26: ( COMMA real_arg )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:404:28: COMMA real_arg
            	    {
            	    COMMA276=(Token)match(input,COMMA,FOLLOW_COMMA_in_real_arg_list2817); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA276);


            	    pushFollow(FOLLOW_real_arg_in_real_arg_list2819);
            	    real_arg277=real_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg277.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            // AST REWRITE
            // elements: real_arg
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:14: -> ( real_arg )+
            {
                if ( !(stream_real_arg.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_real_arg.hasNext() ) {
                    adaptor.addChild(root_0, stream_real_arg.nextTree());

                }
                stream_real_arg.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg_list"


    public static class real_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:408:1: real_arg : ( expr | STAR | col_range );
    public final QueryParser.real_arg_return real_arg() throws RecognitionException {
        QueryParser.real_arg_return retval = new QueryParser.real_arg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR279=null;
        QueryParser.expr_return expr278 =null;

        QueryParser.col_range_return col_range280 =null;


        Object STAR279_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:408:10: ( expr | STAR | col_range )
            int alt76=3;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTEGER:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case LONGINTEGER:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case REALIAS:
                {
                alt76=1;
                }
                break;
            case IDENTIFIER_L:
                {
                int LA76_2 = input.LA(2);

                if ( (LA76_2==EOF||LA76_2==COMMA||(LA76_2 >= DIV && LA76_2 <= DOLLAR)||LA76_2==LEFT_PAREN||LA76_2==MINUS||(LA76_2 >= PERCENT && LA76_2 <= POUND)||(LA76_2 >= RIGHT_BRACKET && LA76_2 <= RIGHT_PAREN)||LA76_2==STAR) ) {
                    alt76=1;
                }
                else if ( (LA76_2==DOUBLE_PERIOD) ) {
                    alt76=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 2, input);

                    throw nvae;

                }
                }
                break;
            case GROUP:
                {
                int LA76_3 = input.LA(2);

                if ( (LA76_3==EOF||LA76_3==COMMA||(LA76_3 >= DIV && LA76_3 <= DOLLAR)||LA76_3==LEFT_PAREN||LA76_3==MINUS||(LA76_3 >= PERCENT && LA76_3 <= POUND)||(LA76_3 >= RIGHT_BRACKET && LA76_3 <= RIGHT_PAREN)||LA76_3==STAR) ) {
                    alt76=1;
                }
                else if ( (LA76_3==DOUBLE_PERIOD) ) {
                    alt76=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA76_4 = input.LA(2);

                if ( (LA76_4==EOF||LA76_4==COMMA||LA76_4==DIV||LA76_4==MINUS||(LA76_4 >= PERCENT && LA76_4 <= POUND)||(LA76_4 >= RIGHT_BRACKET && LA76_4 <= RIGHT_PAREN)||LA76_4==STAR) ) {
                    alt76=1;
                }
                else if ( (LA76_4==DOUBLE_PERIOD) ) {
                    alt76=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 4, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt76=2;
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt76=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }

            switch (alt76) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:408:12: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_real_arg2849);
                    expr278=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr278.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:408:19: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR279=(Token)match(input,STAR,FOLLOW_STAR_in_real_arg2853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR279_tree = 
                    (Object)adaptor.create(STAR279)
                    ;
                    adaptor.addChild(root_0, STAR279_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:408:26: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_real_arg2857);
                    col_range280=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class null_check_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_check_cond"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:411:1: null_check_cond : expr IS ! ( NOT )? null_keyword ^;
    public final QueryParser.null_check_cond_return null_check_cond() throws RecognitionException {
        QueryParser.null_check_cond_return retval = new QueryParser.null_check_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IS282=null;
        Token NOT283=null;
        QueryParser.expr_return expr281 =null;

        QueryParser.null_keyword_return null_keyword284 =null;


        Object IS282_tree=null;
        Object NOT283_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:411:17: ( expr IS ! ( NOT )? null_keyword ^)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:411:19: expr IS ! ( NOT )? null_keyword ^
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_null_check_cond2866);
            expr281=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr281.getTree());

            IS282=(Token)match(input,IS,FOLLOW_IS_in_null_check_cond2868); if (state.failed) return retval;

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:411:28: ( NOT )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==NOT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:411:28: NOT
                    {
                    NOT283=(Token)match(input,NOT,FOLLOW_NOT_in_null_check_cond2871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT283_tree = 
                    (Object)adaptor.create(NOT283)
                    ;
                    adaptor.addChild(root_0, NOT283_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_null_keyword_in_null_check_cond2874);
            null_keyword284=null_keyword();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(null_keyword284.getTree(), root_0);

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_check_cond"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:414:1: expr : add_expr ;
    public final QueryParser.expr_return expr() throws RecognitionException {
        QueryParser.expr_return retval = new QueryParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.add_expr_return add_expr285 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:414:6: ( add_expr )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:414:8: add_expr
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_add_expr_in_expr2884);
            add_expr285=add_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, add_expr285.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class add_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "add_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:417:1: add_expr : multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* ;
    public final QueryParser.add_expr_return add_expr() throws RecognitionException {
        QueryParser.add_expr_return retval = new QueryParser.add_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set287=null;
        QueryParser.multi_expr_return multi_expr286 =null;

        QueryParser.multi_expr_return multi_expr288 =null;


        Object set287_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:417:10: ( multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:417:12: multi_expr ( ( PLUS | MINUS ) ^ multi_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multi_expr_in_add_expr2893);
            multi_expr286=multi_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr286.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:417:23: ( ( PLUS | MINUS ) ^ multi_expr )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==MINUS||LA78_0==PLUS) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:417:25: ( PLUS | MINUS ) ^ multi_expr
            	    {
            	    set287=(Token)input.LT(1);

            	    set287=(Token)input.LT(1);

            	    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set287)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multi_expr_in_add_expr2908);
            	    multi_expr288=multi_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr288.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_expr"


    public static class multi_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:420:1: multi_expr : cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* ;
    public final QueryParser.multi_expr_return multi_expr() throws RecognitionException {
        QueryParser.multi_expr_return retval = new QueryParser.multi_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set290=null;
        QueryParser.cast_expr_return cast_expr289 =null;

        QueryParser.cast_expr_return cast_expr291 =null;


        Object set290_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:420:12: ( cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:420:14: cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_expr_in_multi_expr2920);
            cast_expr289=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr289.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:420:24: ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==DIV||LA79_0==PERCENT||LA79_0==STAR) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:420:26: ( STAR | DIV | PERCENT ) ^ cast_expr
            	    {
            	    set290=(Token)input.LT(1);

            	    set290=(Token)input.LT(1);

            	    if ( input.LA(1)==DIV||input.LA(1)==PERCENT||input.LA(1)==STAR ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set290)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_cast_expr_in_multi_expr2939);
            	    cast_expr291=cast_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr291.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_expr"


    public static class cast_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:423:1: cast_expr : ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr );
    public final QueryParser.cast_expr_return cast_expr() throws RecognitionException {
        QueryParser.cast_expr_return retval = new QueryParser.cast_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN292=null;
        Token RIGHT_PAREN294=null;
        QueryParser.type_cast_return type_cast293 =null;

        QueryParser.unary_expr_return unary_expr295 =null;

        QueryParser.unary_expr_return unary_expr296 =null;


        Object LEFT_PAREN292_tree=null;
        Object RIGHT_PAREN294_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_unary_expr=new RewriteRuleSubtreeStream(adaptor,"rule unary_expr");
        RewriteRuleSubtreeStream stream_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule type_cast");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:423:11: ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr )
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:423:13: LEFT_PAREN type_cast RIGHT_PAREN unary_expr
                    {
                    LEFT_PAREN292=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr2951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN292);


                    pushFollow(FOLLOW_type_cast_in_cast_expr2953);
                    type_cast293=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_cast.add(type_cast293.getTree());

                    RIGHT_PAREN294=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr2955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN294);


                    pushFollow(FOLLOW_unary_expr_in_cast_expr2957);
                    unary_expr295=unary_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expr.add(unary_expr295.getTree());

                    // AST REWRITE
                    // elements: unary_expr, type_cast
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 424:10: -> ^( CAST_EXPR type_cast unary_expr )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:424:13: ^( CAST_EXPR type_cast unary_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_cast.nextTree());

                        adaptor.addChild(root_1, stream_unary_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:425:13: unary_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unary_expr_in_cast_expr2992);
                    unary_expr296=unary_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expr296.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expr"


    public static class type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:428:1: type_cast : ( simple_type | map_type | tuple_type_cast | bag_type_cast );
    public final QueryParser.type_cast_return type_cast() throws RecognitionException {
        QueryParser.type_cast_return retval = new QueryParser.type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type297 =null;

        QueryParser.map_type_return map_type298 =null;

        QueryParser.tuple_type_cast_return tuple_type_cast299 =null;

        QueryParser.bag_type_cast_return bag_type_cast300 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:428:11: ( simple_type | map_type | tuple_type_cast | bag_type_cast )
            int alt81=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt81=1;
                }
                break;
            case LEFT_BRACKET:
            case MAP:
                {
                alt81=2;
                }
                break;
            case TUPLE:
                {
                alt81=3;
                }
                break;
            case BAG:
                {
                alt81=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }

            switch (alt81) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:428:13: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_type_cast3001);
                    simple_type297=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type297.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:428:27: map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_type_in_type_cast3005);
                    map_type298=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_type298.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:428:38: tuple_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_type_cast_in_type_cast3009);
                    tuple_type_cast299=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple_type_cast299.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:428:56: bag_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_type_cast_in_type_cast3013);
                    bag_type_cast300=bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag_type_cast300.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast"


    public static class tuple_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type_cast"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:431:1: tuple_type_cast : TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( type_cast )* ) ;
    public final QueryParser.tuple_type_cast_return tuple_type_cast() throws RecognitionException {
        QueryParser.tuple_type_cast_return retval = new QueryParser.tuple_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE301=null;
        Token LEFT_PAREN302=null;
        Token COMMA304=null;
        Token RIGHT_PAREN306=null;
        QueryParser.type_cast_return type_cast303 =null;

        QueryParser.type_cast_return type_cast305 =null;


        Object TUPLE301_tree=null;
        Object LEFT_PAREN302_tree=null;
        Object COMMA304_tree=null;
        Object RIGHT_PAREN306_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule type_cast");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:431:17: ( TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( type_cast )* ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:431:19: TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN
            {
            TUPLE301=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_tuple_type_cast3022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE301);


            LEFT_PAREN302=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple_type_cast3024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN302);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:431:36: ( type_cast ( COMMA type_cast )* )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( ((LA83_0 >= BAG && LA83_0 <= BOOLEAN)||LA83_0==BYTEARRAY||LA83_0==CHARARRAY||LA83_0==DOUBLE||LA83_0==FLOAT||LA83_0==INT||LA83_0==LEFT_BRACKET||LA83_0==LONG||LA83_0==MAP||LA83_0==TUPLE) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:431:38: type_cast ( COMMA type_cast )*
                    {
                    pushFollow(FOLLOW_type_cast_in_tuple_type_cast3028);
                    type_cast303=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_cast.add(type_cast303.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:431:48: ( COMMA type_cast )*
                    loop82:
                    do {
                        int alt82=2;
                        int LA82_0 = input.LA(1);

                        if ( (LA82_0==COMMA) ) {
                            alt82=1;
                        }


                        switch (alt82) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:431:50: COMMA type_cast
                    	    {
                    	    COMMA304=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuple_type_cast3032); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA304);


                    	    pushFollow(FOLLOW_type_cast_in_tuple_type_cast3034);
                    	    type_cast305=type_cast();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_cast.add(type_cast305.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop82;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN306=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple_type_cast3042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN306);


            // AST REWRITE
            // elements: type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:16: -> ^( TUPLE_TYPE_CAST ( type_cast )* )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:432:19: ^( TUPLE_TYPE_CAST ( type_cast )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE_CAST, "TUPLE_TYPE_CAST")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:432:38: ( type_cast )*
                while ( stream_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_cast.nextTree());

                }
                stream_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type_cast"


    public static class bag_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type_cast"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:435:1: bag_type_cast : BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( tuple_type_cast )? ) ;
    public final QueryParser.bag_type_cast_return bag_type_cast() throws RecognitionException {
        QueryParser.bag_type_cast_return retval = new QueryParser.bag_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG307=null;
        Token LEFT_CURLY308=null;
        Token RIGHT_CURLY310=null;
        QueryParser.tuple_type_cast_return tuple_type_cast309 =null;


        Object BAG307_tree=null;
        Object LEFT_CURLY308_tree=null;
        Object RIGHT_CURLY310_tree=null;
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type_cast");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:435:15: ( BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( tuple_type_cast )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:435:17: BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY
            {
            BAG307=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type_cast3077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BAG.add(BAG307);


            LEFT_CURLY308=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type_cast3079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY308);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:435:32: ( tuple_type_cast )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==TUPLE) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:435:32: tuple_type_cast
                    {
                    pushFollow(FOLLOW_tuple_type_cast_in_bag_type_cast3081);
                    tuple_type_cast309=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tuple_type_cast.add(tuple_type_cast309.getTree());

                    }
                    break;

            }


            RIGHT_CURLY310=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type_cast3084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY310);


            // AST REWRITE
            // elements: tuple_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:14: -> ^( BAG_TYPE_CAST ( tuple_type_cast )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:436:17: ^( BAG_TYPE_CAST ( tuple_type_cast )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BAG_TYPE_CAST, "BAG_TYPE_CAST")
                , root_1);

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:436:34: ( tuple_type_cast )?
                if ( stream_tuple_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_tuple_type_cast.nextTree());

                }
                stream_tuple_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type_cast"


    public static class unary_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:439:1: unary_expr : ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr );
    public final QueryParser.unary_expr_return unary_expr() throws RecognitionException {
        QueryParser.unary_expr_return retval = new QueryParser.unary_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN312=null;
        Token RIGHT_PAREN314=null;
        QueryParser.expr_eval_return expr_eval311 =null;

        QueryParser.expr_return expr313 =null;

        QueryParser.neg_expr_return neg_expr315 =null;


        Object LEFT_PAREN312_tree=null;
        Object RIGHT_PAREN314_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:439:12: ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr )
            int alt85=3;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:439:14: expr_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_eval_in_unary_expr3117);
                    expr_eval311=expr_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_eval311.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:440:14: LEFT_PAREN expr RIGHT_PAREN
                    {
                    LEFT_PAREN312=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_expr3133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN312);


                    pushFollow(FOLLOW_expr_in_unary_expr3135);
                    expr313=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr313.getTree());

                    RIGHT_PAREN314=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_expr3137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN314);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 441:11: -> ^( EXPR_IN_PAREN expr )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:441:14: ^( EXPR_IN_PAREN expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_IN_PAREN, "EXPR_IN_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:442:14: neg_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_neg_expr_in_unary_expr3172);
                    neg_expr315=neg_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg_expr315.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expr"


    public static class expr_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eval"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:445:1: expr_eval : ( const_expr | var_expr );
    public final QueryParser.expr_eval_return expr_eval() throws RecognitionException {
        QueryParser.expr_eval_return retval = new QueryParser.expr_eval_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.const_expr_return const_expr316 =null;

        QueryParser.var_expr_return var_expr317 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:445:11: ( const_expr | var_expr )
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:445:13: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_expr_eval3181);
                    const_expr316=const_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, const_expr316.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:445:26: var_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_var_expr_in_expr_eval3185);
                    var_expr317=var_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var_expr317.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eval"


    public static class var_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:448:1: var_expr : projectable_expr ( dot_proj | pound_proj )* ;
    public final QueryParser.var_expr_return var_expr() throws RecognitionException {
        QueryParser.var_expr_return retval = new QueryParser.var_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.projectable_expr_return projectable_expr318 =null;

        QueryParser.dot_proj_return dot_proj319 =null;

        QueryParser.pound_proj_return pound_proj320 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:448:10: ( projectable_expr ( dot_proj | pound_proj )* )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:448:12: projectable_expr ( dot_proj | pound_proj )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_projectable_expr_in_var_expr3194);
            projectable_expr318=projectable_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, projectable_expr318.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:448:29: ( dot_proj | pound_proj )*
            loop87:
            do {
                int alt87=3;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==PERIOD) ) {
                    alt87=1;
                }
                else if ( (LA87_0==POUND) ) {
                    alt87=2;
                }


                switch (alt87) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:448:31: dot_proj
            	    {
            	    pushFollow(FOLLOW_dot_proj_in_var_expr3198);
            	    dot_proj319=dot_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dot_proj319.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:448:42: pound_proj
            	    {
            	    pushFollow(FOLLOW_pound_proj_in_var_expr3202);
            	    pound_proj320=pound_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pound_proj320.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var_expr"


    public static class projectable_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projectable_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:1: projectable_expr : ( func_eval | col_ref | bin_expr | type_conversion );
    public final QueryParser.projectable_expr_return projectable_expr() throws RecognitionException {
        QueryParser.projectable_expr_return retval = new QueryParser.projectable_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.func_eval_return func_eval321 =null;

        QueryParser.col_ref_return col_ref322 =null;

        QueryParser.bin_expr_return bin_expr323 =null;

        QueryParser.type_conversion_return type_conversion324 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:17: ( func_eval | col_ref | bin_expr | type_conversion )
            int alt88=4;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:19: func_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_eval_in_projectable_expr3213);
                    func_eval321=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_eval321.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:31: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_projectable_expr3217);
                    col_ref322=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref322.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:41: bin_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bin_expr_in_projectable_expr3221);
                    bin_expr323=bin_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bin_expr323.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:52: type_conversion
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_conversion_in_projectable_expr3225);
                    type_conversion324=type_conversion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_conversion324.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projectable_expr"


    public static class type_conversion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_conversion"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:454:1: type_conversion : ( LEFT_CURLY real_arg_list RIGHT_CURLY -> ^( FUNC_EVAL TOBAG real_arg_list ) | LEFT_BRACKET real_arg_list RIGHT_BRACKET -> ^( FUNC_EVAL TOMAP real_arg_list ) | LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ ) );
    public final QueryParser.type_conversion_return type_conversion() throws RecognitionException {
        QueryParser.type_conversion_return retval = new QueryParser.type_conversion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY325=null;
        Token RIGHT_CURLY327=null;
        Token LEFT_BRACKET328=null;
        Token RIGHT_BRACKET330=null;
        Token LEFT_PAREN331=null;
        Token COMMA333=null;
        Token RIGHT_PAREN335=null;
        QueryParser.real_arg_list_return real_arg_list326 =null;

        QueryParser.real_arg_list_return real_arg_list329 =null;

        QueryParser.real_arg_return real_arg332 =null;

        QueryParser.real_arg_return real_arg334 =null;


        Object LEFT_CURLY325_tree=null;
        Object RIGHT_CURLY327_tree=null;
        Object LEFT_BRACKET328_tree=null;
        Object RIGHT_BRACKET330_tree=null;
        Object LEFT_PAREN331_tree=null;
        Object COMMA333_tree=null;
        Object RIGHT_PAREN335_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_real_arg_list=new RewriteRuleSubtreeStream(adaptor,"rule real_arg_list");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:454:17: ( LEFT_CURLY real_arg_list RIGHT_CURLY -> ^( FUNC_EVAL TOBAG real_arg_list ) | LEFT_BRACKET real_arg_list RIGHT_BRACKET -> ^( FUNC_EVAL TOMAP real_arg_list ) | LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ ) )
            int alt90=3;
            switch ( input.LA(1) ) {
            case LEFT_CURLY:
                {
                alt90=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt90=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt90=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }

            switch (alt90) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:454:19: LEFT_CURLY real_arg_list RIGHT_CURLY
                    {
                    LEFT_CURLY325=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_type_conversion3234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY325);


                    pushFollow(FOLLOW_real_arg_list_in_type_conversion3236);
                    real_arg_list326=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list326.getTree());

                    RIGHT_CURLY327=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_type_conversion3238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY327);


                    // AST REWRITE
                    // elements: real_arg_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 455:16: -> ^( FUNC_EVAL TOBAG real_arg_list )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:455:19: ^( FUNC_EVAL TOBAG real_arg_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOBAG, "TOBAG")
                        );

                        adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:456:18: LEFT_BRACKET real_arg_list RIGHT_BRACKET
                    {
                    LEFT_BRACKET328=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_type_conversion3285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET328);


                    pushFollow(FOLLOW_real_arg_list_in_type_conversion3287);
                    real_arg_list329=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list329.getTree());

                    RIGHT_BRACKET330=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_type_conversion3289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET330);


                    // AST REWRITE
                    // elements: real_arg_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 457:16: -> ^( FUNC_EVAL TOMAP real_arg_list )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:457:19: ^( FUNC_EVAL TOMAP real_arg_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOMAP, "TOMAP")
                        );

                        adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:458:18: LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN
                    {
                    LEFT_PAREN331=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_type_conversion3336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN331);


                    pushFollow(FOLLOW_real_arg_in_type_conversion3338);
                    real_arg332=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg332.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:458:38: ( COMMA real_arg )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==COMMA) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:458:40: COMMA real_arg
                    	    {
                    	    COMMA333=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_conversion3342); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA333);


                    	    pushFollow(FOLLOW_real_arg_in_type_conversion3344);
                    	    real_arg334=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg334.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    RIGHT_PAREN335=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_type_conversion3349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN335);


                    // AST REWRITE
                    // elements: real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 459:16: -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:459:19: ^( FUNC_EVAL TOTUPLE ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_conversion"


    public static class dot_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dot_proj"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:462:1: dot_proj : PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) ) -> ^( PERIOD ( col_alias_or_index )+ ) ;
    public final QueryParser.dot_proj_return dot_proj() throws RecognitionException {
        QueryParser.dot_proj_return retval = new QueryParser.dot_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD336=null;
        Token LEFT_PAREN338=null;
        Token COMMA340=null;
        Token RIGHT_PAREN342=null;
        QueryParser.col_alias_or_index_return col_alias_or_index337 =null;

        QueryParser.col_alias_or_index_return col_alias_or_index339 =null;

        QueryParser.col_alias_or_index_return col_alias_or_index341 =null;


        Object PERIOD336_tree=null;
        Object LEFT_PAREN338_tree=null;
        Object COMMA340_tree=null;
        Object RIGHT_PAREN342_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_alias_or_index=new RewriteRuleSubtreeStream(adaptor,"rule col_alias_or_index");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:462:10: ( PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) ) -> ^( PERIOD ( col_alias_or_index )+ ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:462:12: PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) )
            {
            PERIOD336=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_dot_proj3387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD336);


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:462:19: ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==DOLLARVAR||LA92_0==GROUP||LA92_0==IDENTIFIER_L) ) {
                alt92=1;
            }
            else if ( (LA92_0==LEFT_PAREN) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:462:21: col_alias_or_index
                    {
                    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3391);
                    col_alias_or_index337=col_alias_or_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index337.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:463:21: ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN )
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:463:21: ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN )
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:463:23: LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN
                    {
                    LEFT_PAREN338=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_dot_proj3416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN338);


                    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3418);
                    col_alias_or_index339=col_alias_or_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index339.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:463:53: ( COMMA col_alias_or_index )*
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==COMMA) ) {
                            alt91=1;
                        }


                        switch (alt91) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:463:55: COMMA col_alias_or_index
                    	    {
                    	    COMMA340=(Token)match(input,COMMA,FOLLOW_COMMA_in_dot_proj3422); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA340);


                    	    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3424);
                    	    col_alias_or_index341=col_alias_or_index();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index341.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop91;
                        }
                    } while (true);


                    RIGHT_PAREN342=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_dot_proj3429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN342);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: PERIOD, col_alias_or_index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:9: -> ^( PERIOD ( col_alias_or_index )+ )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:464:12: ^( PERIOD ( col_alias_or_index )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_PERIOD.nextNode()
                , root_1);

                if ( !(stream_col_alias_or_index.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_alias_or_index.hasNext() ) {
                    adaptor.addChild(root_1, stream_col_alias_or_index.nextTree());

                }
                stream_col_alias_or_index.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dot_proj"


    public static class col_alias_or_index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias_or_index"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:467:1: col_alias_or_index : ( col_alias | col_index );
    public final QueryParser.col_alias_or_index_return col_alias_or_index() throws RecognitionException {
        QueryParser.col_alias_or_index_return retval = new QueryParser.col_alias_or_index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_alias_return col_alias343 =null;

        QueryParser.col_index_return col_index344 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:467:20: ( col_alias | col_index )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==GROUP||LA93_0==IDENTIFIER_L) ) {
                alt93=1;
            }
            else if ( (LA93_0==DOLLARVAR) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:467:22: col_alias
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_alias_in_col_alias_or_index3461);
                    col_alias343=col_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_alias343.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:467:34: col_index
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_index_in_col_alias_or_index3465);
                    col_index344=col_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_index344.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias_or_index"


    public static class col_alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:470:1: col_alias : ( GROUP | identifier );
    public final QueryParser.col_alias_return col_alias() throws RecognitionException {
        QueryParser.col_alias_return retval = new QueryParser.col_alias_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GROUP345=null;
        QueryParser.identifier_return identifier346 =null;


        Object GROUP345_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:470:11: ( GROUP | identifier )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==GROUP) ) {
                alt94=1;
            }
            else if ( (LA94_0==IDENTIFIER_L) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:470:13: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP345=(Token)match(input,GROUP,FOLLOW_GROUP_in_col_alias3474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP345_tree = 
                    (Object)adaptor.create(GROUP345)
                    ;
                    adaptor.addChild(root_0, GROUP345_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:470:21: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_col_alias3478);
                    identifier346=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier346.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias"


    public static class col_index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_index"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:473:1: col_index : DOLLARVAR ;
    public final QueryParser.col_index_return col_index() throws RecognitionException {
        QueryParser.col_index_return retval = new QueryParser.col_index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOLLARVAR347=null;

        Object DOLLARVAR347_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:473:11: ( DOLLARVAR )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:473:13: DOLLARVAR
            {
            root_0 = (Object)adaptor.nil();


            DOLLARVAR347=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_col_index3487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR347_tree = 
            (Object)adaptor.create(DOLLARVAR347)
            ;
            adaptor.addChild(root_0, DOLLARVAR347_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_index"


    public static class col_range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:476:1: col_range : (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) );
    public final QueryParser.col_range_return col_range() throws RecognitionException {
        QueryParser.col_range_return retval = new QueryParser.col_range_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD348=null;
        Token DOUBLE_PERIOD349=null;
        QueryParser.col_ref_return c1 =null;

        QueryParser.col_ref_return c2 =null;

        QueryParser.col_ref_return col_ref350 =null;


        Object DOUBLE_PERIOD348_tree=null;
        Object DOUBLE_PERIOD349_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:476:11: (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==DOLLARVAR||LA96_0==GROUP||LA96_0==IDENTIFIER_L) ) {
                alt96=1;
            }
            else if ( (LA96_0==DOUBLE_PERIOD) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }
            switch (alt96) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:476:13: c1= col_ref DOUBLE_PERIOD (c2= col_ref )?
                    {
                    pushFollow(FOLLOW_col_ref_in_col_range3500);
                    c1=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(c1.getTree());

                    DOUBLE_PERIOD348=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range3502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD348);


                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:476:43: (c2= col_ref )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==DOLLARVAR||LA95_0==GROUP||LA95_0==IDENTIFIER_L) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:476:43: c2= col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_col_range3508);
                            c2=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(c2.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: c1, DOUBLE_PERIOD, c2
                    // token labels: 
                    // rule labels: retval, c1, c2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
                    RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 477:11: -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:477:14: ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, stream_c1.nextTree());

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:477:45: ( $c2)?
                        if ( stream_c2.hasNext() ) {
                            adaptor.addChild(root_1, stream_c2.nextTree());

                        }
                        stream_c2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:478:14: DOUBLE_PERIOD col_ref
                    {
                    DOUBLE_PERIOD349=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range3549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD349);


                    pushFollow(FOLLOW_col_ref_in_col_range3551);
                    col_ref350=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref350.getTree());

                    // AST REWRITE
                    // elements: col_ref, DOUBLE_PERIOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 479:11: -> ^( COL_RANGE DOUBLE_PERIOD col_ref )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:479:14: ^( COL_RANGE DOUBLE_PERIOD col_ref )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        adaptor.addChild(root_1, stream_col_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class pound_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pound_proj"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:483:1: pound_proj : POUND ^ ( QUOTEDSTRING | null_keyword ) ;
    public final QueryParser.pound_proj_return pound_proj() throws RecognitionException {
        QueryParser.pound_proj_return retval = new QueryParser.pound_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token POUND351=null;
        Token QUOTEDSTRING352=null;
        QueryParser.null_keyword_return null_keyword353 =null;


        Object POUND351_tree=null;
        Object QUOTEDSTRING352_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:483:12: ( POUND ^ ( QUOTEDSTRING | null_keyword ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:483:14: POUND ^ ( QUOTEDSTRING | null_keyword )
            {
            root_0 = (Object)adaptor.nil();


            POUND351=(Token)match(input,POUND,FOLLOW_POUND_in_pound_proj3582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND351_tree = 
            (Object)adaptor.create(POUND351)
            ;
            root_0 = (Object)adaptor.becomeRoot(POUND351_tree, root_0);
            }

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:483:21: ( QUOTEDSTRING | null_keyword )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==QUOTEDSTRING) ) {
                alt97=1;
            }
            else if ( (LA97_0==IDENTIFIER_L) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:483:23: QUOTEDSTRING
                    {
                    QUOTEDSTRING352=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_pound_proj3587); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING352_tree = 
                    (Object)adaptor.create(QUOTEDSTRING352)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING352_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:483:38: null_keyword
                    {
                    pushFollow(FOLLOW_null_keyword_in_pound_proj3591);
                    null_keyword353=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword353.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pound_proj"


    public static class bin_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bin_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:486:1: bin_expr : LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ;
    public final QueryParser.bin_expr_return bin_expr() throws RecognitionException {
        QueryParser.bin_expr_return retval = new QueryParser.bin_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN354=null;
        Token QMARK356=null;
        Token COLON357=null;
        Token RIGHT_PAREN358=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.cond_return cond355 =null;


        Object LEFT_PAREN354_tree=null;
        Object QMARK356_tree=null;
        Object COLON357_tree=null;
        Object RIGHT_PAREN358_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:486:10: ( LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:486:12: LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN
            {
            LEFT_PAREN354=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_bin_expr3602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN354);


            pushFollow(FOLLOW_cond_in_bin_expr3604);
            cond355=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond355.getTree());

            QMARK356=(Token)match(input,QMARK,FOLLOW_QMARK_in_bin_expr3606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QMARK.add(QMARK356);


            pushFollow(FOLLOW_expr_in_bin_expr3612);
            exp1=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

            COLON357=(Token)match(input,COLON,FOLLOW_COLON_in_bin_expr3614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON357);


            pushFollow(FOLLOW_expr_in_bin_expr3620);
            exp2=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

            RIGHT_PAREN358=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_bin_expr3622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN358);


            // AST REWRITE
            // elements: exp2, exp1, cond
            // token labels: 
            // rule labels: retval, exp2, exp1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
            RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:9: -> ^( BIN_EXPR cond $exp1 $exp2)
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:487:12: ^( BIN_EXPR cond $exp1 $exp2)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BIN_EXPR, "BIN_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_1, stream_exp1.nextTree());

                adaptor.addChild(root_1, stream_exp2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bin_expr"


    public static class neg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "neg_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:490:1: neg_expr : MINUS cast_expr -> ^( NEG cast_expr ) ;
    public final QueryParser.neg_expr_return neg_expr() throws RecognitionException {
        QueryParser.neg_expr_return retval = new QueryParser.neg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS359=null;
        QueryParser.cast_expr_return cast_expr360 =null;


        Object MINUS359_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:490:10: ( MINUS cast_expr -> ^( NEG cast_expr ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:490:12: MINUS cast_expr
            {
            MINUS359=(Token)match(input,MINUS,FOLLOW_MINUS_in_neg_expr3655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS359);


            pushFollow(FOLLOW_cast_expr_in_neg_expr3657);
            cast_expr360=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr360.getTree());

            // AST REWRITE
            // elements: cast_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:9: -> ^( NEG cast_expr )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:491:12: ^( NEG cast_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NEG, "NEG")
                , root_1);

                adaptor.addChild(root_1, stream_cast_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "neg_expr"


    public static class limit_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:1: limit_clause : LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr ) ;
    public final QueryParser.limit_clause_return limit_clause() throws RecognitionException {
        QueryParser.limit_clause_return retval = new QueryParser.limit_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT361=null;
        Token INTEGER363=null;
        Token LONGINTEGER364=null;
        QueryParser.rel_return rel362 =null;

        QueryParser.expr_return expr365 =null;


        Object LIMIT361_tree=null;
        Object INTEGER363_tree=null;
        Object LONGINTEGER364_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:14: ( LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:16: LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT361=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause3684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT361_tree = 
            (Object)adaptor.create(LIMIT361)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT361_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_limit_clause3687);
            rel362=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel362.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:27: ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr )
            int alt98=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                int LA98_1 = input.LA(2);

                if ( (synpred158_QueryParser()) ) {
                    alt98=1;
                }
                else if ( (true) ) {
                    alt98=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;

                }
                }
                break;
            case LONGINTEGER:
                {
                int LA98_2 = input.LA(2);

                if ( (synpred159_QueryParser()) ) {
                    alt98=2;
                }
                else if ( (true) ) {
                    alt98=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 2, input);

                    throw nvae;

                }
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOLLARVAR:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER_L:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case REALIAS:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }

            switch (alt98) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:29: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER363=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limit_clause3699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER363_tree = 
                    (Object)adaptor.create(INTEGER363)
                    ;
                    adaptor.addChild(root_0, INTEGER363_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:63: ( LONGINTEGER SEMI_COLON )=> LONGINTEGER
                    {
                    LONGINTEGER364=(Token)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_limit_clause3711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER364_tree = 
                    (Object)adaptor.create(LONGINTEGER364)
                    ;
                    adaptor.addChild(root_0, LONGINTEGER364_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:105: expr
                    {
                    pushFollow(FOLLOW_expr_in_limit_clause3715);
                    expr365=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr365.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:1: sample_clause : SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr ) ;
    public final QueryParser.sample_clause_return sample_clause() throws RecognitionException {
        QueryParser.sample_clause_return retval = new QueryParser.sample_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SAMPLE366=null;
        Token DOUBLENUMBER368=null;
        QueryParser.rel_return rel367 =null;

        QueryParser.expr_return expr369 =null;


        Object SAMPLE366_tree=null;
        Object DOUBLENUMBER368_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:15: ( SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:17: SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr )
            {
            root_0 = (Object)adaptor.nil();


            SAMPLE366=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause3726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE366_tree = 
            (Object)adaptor.create(SAMPLE366)
            ;
            root_0 = (Object)adaptor.becomeRoot(SAMPLE366_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_sample_clause3729);
            rel367=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel367.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:29: ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==DOUBLENUMBER) ) {
                int LA99_1 = input.LA(2);

                if ( (synpred160_QueryParser()) ) {
                    alt99=1;
                }
                else if ( (true) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA99_0 >= ALL && LA99_0 <= BAG)||(LA99_0 >= BY && LA99_0 <= COGROUP)||LA99_0==CROSS||(LA99_0 >= DEFINE && LA99_0 <= DESC)||LA99_0==DISTINCT||(LA99_0 >= DOLLARVAR && LA99_0 <= DOUBLE)||(LA99_0 >= FALSE && LA99_0 <= FLOAT)||(LA99_0 >= FLOATNUMBER && LA99_0 <= GROUP)||(LA99_0 >= IDENTIFIER_L && LA99_0 <= LEFT_PAREN)||(LA99_0 >= LIMIT && LA99_0 <= MINUS)||LA99_0==NOT||(LA99_0 >= OR && LA99_0 <= ORDER)||(LA99_0 >= OUTER && LA99_0 <= PARTITION)||(LA99_0 >= QUOTEDSTRING && LA99_0 <= RIGHT)||LA99_0==SAMPLE||LA99_0==SHIP||LA99_0==SPLIT||(LA99_0 >= STDERROR && LA99_0 <= USING)||LA99_0==BOOL||LA99_0==REALIAS) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }
            switch (alt99) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:31: ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER
                    {
                    DOUBLENUMBER368=(Token)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_sample_clause3741); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER368_tree = 
                    (Object)adaptor.create(DOUBLENUMBER368)
                    ;
                    adaptor.addChild(root_0, DOUBLENUMBER368_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_sample_clause3745);
                    expr369=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr369.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:500:1: order_clause : ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.order_clause_return order_clause() throws RecognitionException {
        QueryParser.order_clause_return retval = new QueryParser.order_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER370=null;
        Token BY372=null;
        Token USING374=null;
        QueryParser.rel_return rel371 =null;

        QueryParser.order_by_clause_return order_by_clause373 =null;

        QueryParser.func_clause_return func_clause375 =null;


        Object ORDER370_tree=null;
        Object BY372_tree=null;
        Object USING374_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:500:14: ( ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:500:16: ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER370=(Token)match(input,ORDER,FOLLOW_ORDER_in_order_clause3756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER370_tree = 
            (Object)adaptor.create(ORDER370)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER370_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_order_clause3759);
            rel371=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel371.getTree());

            BY372=(Token)match(input,BY,FOLLOW_BY_in_order_clause3761); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_order_clause3764);
            order_by_clause373=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause373.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:500:47: ( USING ! func_clause )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==USING) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:500:49: USING ! func_clause
                    {
                    USING374=(Token)match(input,USING,FOLLOW_USING_in_order_clause3768); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_order_clause3771);
                    func_clause375=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause375.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:503:1: order_by_clause : ( STAR ( ASC | DESC )? | order_col_list );
    public final QueryParser.order_by_clause_return order_by_clause() throws RecognitionException {
        QueryParser.order_by_clause_return retval = new QueryParser.order_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR376=null;
        Token set377=null;
        QueryParser.order_col_list_return order_col_list378 =null;


        Object STAR376_tree=null;
        Object set377_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:503:17: ( STAR ( ASC | DESC )? | order_col_list )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==STAR) ) {
                alt102=1;
            }
            else if ( (LA102_0==DOLLARVAR||LA102_0==DOUBLE_PERIOD||LA102_0==GROUP||LA102_0==IDENTIFIER_L||LA102_0==LEFT_PAREN) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:503:19: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR376=(Token)match(input,STAR,FOLLOW_STAR_in_order_by_clause3783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR376_tree = 
                    (Object)adaptor.create(STAR376)
                    ;
                    adaptor.addChild(root_0, STAR376_tree);
                    }

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:503:24: ( ASC | DESC )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==ASC||LA101_0==DESC) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
                            {
                            set377=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set377)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:504:19: order_col_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_col_list_in_order_by_clause3814);
                    order_col_list378=order_col_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_col_list378.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:507:1: order_col_list : order_col ( COMMA order_col )* -> ( order_col )+ ;
    public final QueryParser.order_col_list_return order_col_list() throws RecognitionException {
        QueryParser.order_col_list_return retval = new QueryParser.order_col_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA380=null;
        QueryParser.order_col_return order_col379 =null;

        QueryParser.order_col_return order_col381 =null;


        Object COMMA380_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_col=new RewriteRuleSubtreeStream(adaptor,"rule order_col");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:507:16: ( order_col ( COMMA order_col )* -> ( order_col )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:507:18: order_col ( COMMA order_col )*
            {
            pushFollow(FOLLOW_order_col_in_order_col_list3823);
            order_col379=order_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_col.add(order_col379.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:507:28: ( COMMA order_col )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:507:30: COMMA order_col
            	    {
            	    COMMA380=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_col_list3827); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA380);


            	    pushFollow(FOLLOW_order_col_in_order_col_list3829);
            	    order_col381=order_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_col.add(order_col381.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            // AST REWRITE
            // elements: order_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:15: -> ( order_col )+
            {
                if ( !(stream_order_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_order_col.nextTree());

                }
                stream_order_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col_list"


    public static class order_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:511:1: order_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !);
    public final QueryParser.order_col_return order_col() throws RecognitionException {
        QueryParser.order_col_return retval = new QueryParser.order_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set383=null;
        Token set385=null;
        Token LEFT_PAREN386=null;
        Token set388=null;
        Token RIGHT_PAREN389=null;
        QueryParser.col_range_return col_range382 =null;

        QueryParser.col_ref_return col_ref384 =null;

        QueryParser.col_ref_return col_ref387 =null;


        Object set383_tree=null;
        Object set385_tree=null;
        Object LEFT_PAREN386_tree=null;
        Object set388_tree=null;
        Object RIGHT_PAREN389_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:511:11: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !)
            int alt107=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA107_1 = input.LA(2);

                if ( (LA107_1==DOUBLE_PERIOD) ) {
                    alt107=1;
                }
                else if ( (LA107_1==EOF||LA107_1==ASC||LA107_1==COMMA||LA107_1==DESC||LA107_1==PARALLEL||LA107_1==RIGHT_PAREN||LA107_1==SEMI_COLON||LA107_1==USING) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA107_2 = input.LA(2);

                if ( (LA107_2==DOUBLE_PERIOD) ) {
                    alt107=1;
                }
                else if ( (LA107_2==EOF||LA107_2==ASC||LA107_2==COMMA||LA107_2==DESC||LA107_2==PARALLEL||LA107_2==RIGHT_PAREN||LA107_2==SEMI_COLON||LA107_2==USING) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 2, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA107_3 = input.LA(2);

                if ( (LA107_3==DOUBLE_PERIOD) ) {
                    alt107=1;
                }
                else if ( (LA107_3==EOF||LA107_3==ASC||LA107_3==COMMA||LA107_3==DESC||LA107_3==PARALLEL||LA107_3==RIGHT_PAREN||LA107_3==SEMI_COLON||LA107_3==USING) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt107=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }

            switch (alt107) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:511:13: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_order_col3860);
                    col_range382=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range382.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:511:23: ( ASC | DESC )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==ASC||LA104_0==DESC) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
                            {
                            set383=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set383)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:512:13: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_order_col3883);
                    col_ref384=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref384.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:512:21: ( ASC | DESC )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==ASC||LA105_0==DESC) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
                            {
                            set385=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set385)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:513:13: LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN386=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_order_col3910); if (state.failed) return retval;

                    pushFollow(FOLLOW_col_ref_in_order_col3913);
                    col_ref387=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref387.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:513:33: ( ASC | DESC )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==ASC||LA106_0==DESC) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
                            {
                            set388=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set388)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    RIGHT_PAREN389=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_order_col3926); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:516:1: distinct_clause : DISTINCT ^ rel ( partition_clause )? ;
    public final QueryParser.distinct_clause_return distinct_clause() throws RecognitionException {
        QueryParser.distinct_clause_return retval = new QueryParser.distinct_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT390=null;
        QueryParser.rel_return rel391 =null;

        QueryParser.partition_clause_return partition_clause392 =null;


        Object DISTINCT390_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:516:17: ( DISTINCT ^ rel ( partition_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:516:19: DISTINCT ^ rel ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT390=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause3936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT390_tree = 
            (Object)adaptor.create(DISTINCT390)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT390_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_distinct_clause3939);
            rel391=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel391.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:516:33: ( partition_clause )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==PARTITION) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:516:33: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause3941);
                    partition_clause392=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause392.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:519:1: partition_clause : PARTITION ^ BY ! func_name ;
    public final QueryParser.partition_clause_return partition_clause() throws RecognitionException {
        QueryParser.partition_clause_return retval = new QueryParser.partition_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARTITION393=null;
        Token BY394=null;
        QueryParser.func_name_return func_name395 =null;


        Object PARTITION393_tree=null;
        Object BY394_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:519:18: ( PARTITION ^ BY ! func_name )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:519:20: PARTITION ^ BY ! func_name
            {
            root_0 = (Object)adaptor.nil();


            PARTITION393=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause3951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION393_tree = 
            (Object)adaptor.create(PARTITION393)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARTITION393_tree, root_0);
            }

            BY394=(Token)match(input,BY,FOLLOW_BY_in_partition_clause3954); if (state.failed) return retval;

            pushFollow(FOLLOW_func_name_in_partition_clause3957);
            func_name395=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, func_name395.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class cross_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:522:1: cross_clause : CROSS ^ rel_list ( partition_clause )? ;
    public final QueryParser.cross_clause_return cross_clause() throws RecognitionException {
        QueryParser.cross_clause_return retval = new QueryParser.cross_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS396=null;
        QueryParser.rel_list_return rel_list397 =null;

        QueryParser.partition_clause_return partition_clause398 =null;


        Object CROSS396_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:522:14: ( CROSS ^ rel_list ( partition_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:522:16: CROSS ^ rel_list ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            CROSS396=(Token)match(input,CROSS,FOLLOW_CROSS_in_cross_clause3966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS396_tree = 
            (Object)adaptor.create(CROSS396)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS396_tree, root_0);
            }

            pushFollow(FOLLOW_rel_list_in_cross_clause3969);
            rel_list397=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list397.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:522:32: ( partition_clause )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==PARTITION) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:522:32: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_cross_clause3971);
                    partition_clause398=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause398.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class rel_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:525:1: rel_list : rel ( COMMA rel )* -> ( rel )+ ;
    public final QueryParser.rel_list_return rel_list() throws RecognitionException {
        QueryParser.rel_list_return retval = new QueryParser.rel_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA400=null;
        QueryParser.rel_return rel399 =null;

        QueryParser.rel_return rel401 =null;


        Object COMMA400_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:525:10: ( rel ( COMMA rel )* -> ( rel )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:525:12: rel ( COMMA rel )*
            {
            pushFollow(FOLLOW_rel_in_rel_list3981);
            rel399=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel399.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:525:16: ( COMMA rel )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==COMMA) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:525:18: COMMA rel
            	    {
            	    COMMA400=(Token)match(input,COMMA,FOLLOW_COMMA_in_rel_list3985); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA400);


            	    pushFollow(FOLLOW_rel_in_rel_list3987);
            	    rel401=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel.add(rel401.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            // AST REWRITE
            // elements: rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:9: -> ( rel )+
            {
                if ( !(stream_rel.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rel.hasNext() ) {
                    adaptor.addChild(root_0, stream_rel.nextTree());

                }
                stream_rel.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:529:1: join_clause : JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? ;
    public final QueryParser.join_clause_return join_clause() throws RecognitionException {
        QueryParser.join_clause_return retval = new QueryParser.join_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token JOIN402=null;
        Token USING404=null;
        QueryParser.join_sub_clause_return join_sub_clause403 =null;

        QueryParser.join_type_return join_type405 =null;

        QueryParser.partition_clause_return partition_clause406 =null;


        Object JOIN402_tree=null;
        Object USING404_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:529:13: ( JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:529:15: JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            JOIN402=(Token)match(input,JOIN,FOLLOW_JOIN_in_join_clause4012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN402_tree = 
            (Object)adaptor.create(JOIN402)
            ;
            root_0 = (Object)adaptor.becomeRoot(JOIN402_tree, root_0);
            }

            pushFollow(FOLLOW_join_sub_clause_in_join_clause4015);
            join_sub_clause403=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_sub_clause403.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:529:37: ( USING ! join_type )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==USING) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:529:39: USING ! join_type
                    {
                    USING404=(Token)match(input,USING,FOLLOW_USING_in_join_clause4019); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_type_in_join_clause4022);
                    join_type405=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_type405.getTree());

                    }
                    break;

            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:529:59: ( partition_clause )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==PARTITION) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:529:59: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_join_clause4027);
                    partition_clause406=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause406.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:532:1: join_type : QUOTEDSTRING ;
    public final QueryParser.join_type_return join_type() throws RecognitionException {
        QueryParser.join_type_return retval = new QueryParser.join_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING407=null;

        Object QUOTEDSTRING407_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:532:11: ( QUOTEDSTRING )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:532:13: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING407=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type4037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING407_tree = 
            (Object)adaptor.create(QUOTEDSTRING407)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING407_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:1: join_sub_clause : ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item | join_item_list );
    public final QueryParser.join_sub_clause_return join_sub_clause() throws RecognitionException {
        QueryParser.join_sub_clause_return retval = new QueryParser.join_sub_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set409=null;
        Token OUTER410=null;
        Token COMMA411=null;
        QueryParser.join_item_return join_item408 =null;

        QueryParser.join_item_return join_item412 =null;

        QueryParser.join_item_list_return join_item_list413 =null;


        Object set409_tree=null;
        Object OUTER410_tree=null;
        Object COMMA411_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:17: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item | join_item_list )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==IDENTIFIER_L) ) {
                int LA114_1 = input.LA(2);

                if ( (((synpred182_QueryParser()&&synpred182_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {
                    alt114=1;
                }
                else if ( ((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA114_0==LEFT_PAREN) ) {
                int LA114_2 = input.LA(2);

                if ( (synpred182_QueryParser()) ) {
                    alt114=1;
                }
                else if ( (true) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:19: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_item_in_join_sub_clause4046);
                    join_item408=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item408.getTree());

                    set409=(Token)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set409)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:53: ( OUTER )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==OUTER) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:53: OUTER
                            {
                            OUTER410=(Token)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause4062); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER410_tree = 
                            (Object)adaptor.create(OUTER410)
                            ;
                            adaptor.addChild(root_0, OUTER410_tree);
                            }

                            }
                            break;

                    }


                    COMMA411=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause4065); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_item_in_join_sub_clause4068);
                    join_item412=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item412.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:536:19: join_item_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_item_list_in_join_sub_clause4088);
                    join_item_list413=join_item_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item_list413.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:539:1: join_item_list : join_item ( COMMA ! join_item )+ ;
    public final QueryParser.join_item_list_return join_item_list() throws RecognitionException {
        QueryParser.join_item_list_return retval = new QueryParser.join_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA415=null;
        QueryParser.join_item_return join_item414 =null;

        QueryParser.join_item_return join_item416 =null;


        Object COMMA415_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:539:16: ( join_item ( COMMA ! join_item )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:539:18: join_item ( COMMA ! join_item )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_join_item_in_join_item_list4097);
            join_item414=join_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item414.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:539:28: ( COMMA ! join_item )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:539:30: COMMA ! join_item
            	    {
            	    COMMA415=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_item_list4101); if (state.failed) return retval;

            	    pushFollow(FOLLOW_join_item_in_join_item_list4104);
            	    join_item416=join_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item416.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item_list"


    public static class join_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:542:1: join_item : rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final QueryParser.join_item_return join_item() throws RecognitionException {
        QueryParser.join_item_return retval = new QueryParser.join_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.rel_return rel417 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause418 =null;


        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_join_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_clause");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:542:11: ( rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:542:13: rel join_group_by_clause
            {
            pushFollow(FOLLOW_rel_in_join_item4116);
            rel417=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel417.getTree());

            pushFollow(FOLLOW_join_group_by_clause_in_join_item4118);
            join_group_by_clause418=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_join_group_by_clause.add(join_group_by_clause418.getTree());

            // AST REWRITE
            // elements: rel, join_group_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:10: -> ^( JOIN_ITEM rel join_group_by_clause )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:543:13: ^( JOIN_ITEM rel join_group_by_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(JOIN_ITEM, "JOIN_ITEM")
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                adaptor.addChild(root_1, stream_join_group_by_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:546:1: join_group_by_clause : BY ^ join_group_by_expr_list ;
    public final QueryParser.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        QueryParser.join_group_by_clause_return retval = new QueryParser.join_group_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY419=null;
        QueryParser.join_group_by_expr_list_return join_group_by_expr_list420 =null;


        Object BY419_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:546:22: ( BY ^ join_group_by_expr_list )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:546:24: BY ^ join_group_by_expr_list
            {
            root_0 = (Object)adaptor.nil();


            BY419=(Token)match(input,BY,FOLLOW_BY_in_join_group_by_clause4149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY419_tree = 
            (Object)adaptor.create(BY419)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY419_tree, root_0);
            }

            pushFollow(FOLLOW_join_group_by_expr_list_in_join_group_by_clause4152);
            join_group_by_expr_list420=join_group_by_expr_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_expr_list420.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class join_group_by_expr_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:1: join_group_by_expr_list : ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr );
    public final QueryParser.join_group_by_expr_list_return join_group_by_expr_list() throws RecognitionException {
        QueryParser.join_group_by_expr_list_return retval = new QueryParser.join_group_by_expr_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN421=null;
        Token COMMA423=null;
        Token RIGHT_PAREN425=null;
        QueryParser.join_group_by_expr_return join_group_by_expr422 =null;

        QueryParser.join_group_by_expr_return join_group_by_expr424 =null;

        QueryParser.join_group_by_expr_return join_group_by_expr426 =null;


        Object LEFT_PAREN421_tree=null;
        Object COMMA423_tree=null;
        Object RIGHT_PAREN425_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_join_group_by_expr=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_expr");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:25: ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr )
            int alt117=2;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:27: LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN
                    {
                    LEFT_PAREN421=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_join_group_by_expr_list4161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN421);


                    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4163);
                    join_group_by_expr422=join_group_by_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_join_group_by_expr.add(join_group_by_expr422.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:57: ( COMMA join_group_by_expr )*
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==COMMA) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:59: COMMA join_group_by_expr
                    	    {
                    	    COMMA423=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_group_by_expr_list4167); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA423);


                    	    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4169);
                    	    join_group_by_expr424=join_group_by_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_join_group_by_expr.add(join_group_by_expr424.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    RIGHT_PAREN425=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_join_group_by_expr_list4174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN425);


                    // AST REWRITE
                    // elements: join_group_by_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 550:24: -> ( join_group_by_expr )+
                    {
                        if ( !(stream_join_group_by_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_join_group_by_expr.hasNext() ) {
                            adaptor.addChild(root_0, stream_join_group_by_expr.nextTree());

                        }
                        stream_join_group_by_expr.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:551:27: join_group_by_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4230);
                    join_group_by_expr426=join_group_by_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_expr426.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr_list"


    public static class join_group_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:554:1: join_group_by_expr : ( col_range | expr | STAR );
    public final QueryParser.join_group_by_expr_return join_group_by_expr() throws RecognitionException {
        QueryParser.join_group_by_expr_return retval = new QueryParser.join_group_by_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR429=null;
        QueryParser.col_range_return col_range427 =null;

        QueryParser.expr_return expr428 =null;


        Object STAR429_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:554:20: ( col_range | expr | STAR )
            int alt118=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA118_1 = input.LA(2);

                if ( (LA118_1==DOUBLE_PERIOD) ) {
                    alt118=1;
                }
                else if ( (LA118_1==EOF||LA118_1==COMMA||(LA118_1 >= DIV && LA118_1 <= DOLLAR)||LA118_1==FULL||LA118_1==INNER||LA118_1==LEFT||LA118_1==LEFT_PAREN||LA118_1==MINUS||LA118_1==OUTER||(LA118_1 >= PARALLEL && LA118_1 <= POUND)||LA118_1==RIGHT||LA118_1==RIGHT_PAREN||LA118_1==SEMI_COLON||LA118_1==STAR||LA118_1==USING) ) {
                    alt118=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA118_2 = input.LA(2);

                if ( (LA118_2==DOUBLE_PERIOD) ) {
                    alt118=1;
                }
                else if ( (LA118_2==EOF||LA118_2==COMMA||(LA118_2 >= DIV && LA118_2 <= DOLLAR)||LA118_2==FULL||LA118_2==INNER||LA118_2==LEFT||LA118_2==LEFT_PAREN||LA118_2==MINUS||LA118_2==OUTER||(LA118_2 >= PARALLEL && LA118_2 <= POUND)||LA118_2==RIGHT||LA118_2==RIGHT_PAREN||LA118_2==SEMI_COLON||LA118_2==STAR||LA118_2==USING) ) {
                    alt118=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 2, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA118_3 = input.LA(2);

                if ( (LA118_3==DOUBLE_PERIOD) ) {
                    alt118=1;
                }
                else if ( (LA118_3==EOF||LA118_3==COMMA||LA118_3==DIV||LA118_3==FULL||LA118_3==INNER||LA118_3==LEFT||LA118_3==MINUS||LA118_3==OUTER||(LA118_3 >= PARALLEL && LA118_3 <= POUND)||LA118_3==RIGHT||LA118_3==RIGHT_PAREN||LA118_3==SEMI_COLON||LA118_3==STAR||LA118_3==USING) ) {
                    alt118=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt118=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTEGER:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case LONGINTEGER:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case REALIAS:
                {
                alt118=2;
                }
                break;
            case STAR:
                {
                alt118=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }

            switch (alt118) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:554:22: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_join_group_by_expr4239);
                    col_range427=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range427.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:554:35: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_join_group_by_expr4244);
                    expr428=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr428.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:554:42: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR429=(Token)match(input,STAR,FOLLOW_STAR_in_join_group_by_expr4248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR429_tree = 
                    (Object)adaptor.create(STAR429)
                    ;
                    adaptor.addChild(root_0, STAR429_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr"


    public static class union_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:557:1: union_clause : UNION ^ ( ONSCHEMA )? rel_list ;
    public final QueryParser.union_clause_return union_clause() throws RecognitionException {
        QueryParser.union_clause_return retval = new QueryParser.union_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNION430=null;
        Token ONSCHEMA431=null;
        QueryParser.rel_list_return rel_list432 =null;


        Object UNION430_tree=null;
        Object ONSCHEMA431_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:557:14: ( UNION ^ ( ONSCHEMA )? rel_list )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:557:16: UNION ^ ( ONSCHEMA )? rel_list
            {
            root_0 = (Object)adaptor.nil();


            UNION430=(Token)match(input,UNION,FOLLOW_UNION_in_union_clause4257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION430_tree = 
            (Object)adaptor.create(UNION430)
            ;
            root_0 = (Object)adaptor.becomeRoot(UNION430_tree, root_0);
            }

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:557:23: ( ONSCHEMA )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==ONSCHEMA) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:557:23: ONSCHEMA
                    {
                    ONSCHEMA431=(Token)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause4260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA431_tree = 
                    (Object)adaptor.create(ONSCHEMA431)
                    ;
                    adaptor.addChild(root_0, ONSCHEMA431_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_rel_list_in_union_clause4263);
            rel_list432=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list432.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class foreach_clause_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause_simple"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:560:1: foreach_clause_simple : FOREACH ^ rel foreach_plan_simple ;
    public final QueryParser.foreach_clause_simple_return foreach_clause_simple() throws RecognitionException {
        QueryParser.foreach_clause_simple_return retval = new QueryParser.foreach_clause_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH433=null;
        QueryParser.rel_return rel434 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple435 =null;


        Object FOREACH433_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:560:23: ( FOREACH ^ rel foreach_plan_simple )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:560:25: FOREACH ^ rel foreach_plan_simple
            {
            root_0 = (Object)adaptor.nil();


            FOREACH433=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause_simple4272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH433_tree = 
            (Object)adaptor.create(FOREACH433)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH433_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_foreach_clause_simple4275);
            rel434=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel434.getTree());

            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_clause_simple4277);
            foreach_plan_simple435=foreach_plan_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_plan_simple435.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause_simple"


    public static class foreach_plan_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_simple"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:563:1: foreach_plan_simple : generate_clause -> ^( FOREACH_PLAN_SIMPLE generate_clause ) ;
    public final QueryParser.foreach_plan_simple_return foreach_plan_simple() throws RecognitionException {
        QueryParser.foreach_plan_simple_return retval = new QueryParser.foreach_plan_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.generate_clause_return generate_clause436 =null;


        RewriteRuleSubtreeStream stream_generate_clause=new RewriteRuleSubtreeStream(adaptor,"rule generate_clause");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:563:21: ( generate_clause -> ^( FOREACH_PLAN_SIMPLE generate_clause ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:563:23: generate_clause
            {
            pushFollow(FOLLOW_generate_clause_in_foreach_plan_simple4286);
            generate_clause436=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_generate_clause.add(generate_clause436.getTree());

            // AST REWRITE
            // elements: generate_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:20: -> ^( FOREACH_PLAN_SIMPLE generate_clause )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:564:23: ^( FOREACH_PLAN_SIMPLE generate_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_SIMPLE, "FOREACH_PLAN_SIMPLE")
                , root_1);

                adaptor.addChild(root_1, stream_generate_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_simple"


    public static class foreach_clause_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause_complex"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:567:1: foreach_clause_complex : FOREACH ^ rel foreach_plan_complex ;
    public final QueryParser.foreach_clause_complex_return foreach_clause_complex() throws RecognitionException {
        QueryParser.foreach_clause_complex_return retval = new QueryParser.foreach_clause_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH437=null;
        QueryParser.rel_return rel438 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex439 =null;


        Object FOREACH437_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:567:24: ( FOREACH ^ rel foreach_plan_complex )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:567:26: FOREACH ^ rel foreach_plan_complex
            {
            root_0 = (Object)adaptor.nil();


            FOREACH437=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause_complex4324); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH437_tree = 
            (Object)adaptor.create(FOREACH437)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH437_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_foreach_clause_complex4327);
            rel438=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel438.getTree());

            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_clause_complex4329);
            foreach_plan_complex439=foreach_plan_complex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_plan_complex439.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause_complex"


    public static class foreach_plan_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_complex"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:570:1: foreach_plan_complex : nested_blk -> ^( FOREACH_PLAN_COMPLEX nested_blk ) ;
    public final QueryParser.foreach_plan_complex_return foreach_plan_complex() throws RecognitionException {
        QueryParser.foreach_plan_complex_return retval = new QueryParser.foreach_plan_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_blk_return nested_blk440 =null;


        RewriteRuleSubtreeStream stream_nested_blk=new RewriteRuleSubtreeStream(adaptor,"rule nested_blk");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:570:22: ( nested_blk -> ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:570:24: nested_blk
            {
            pushFollow(FOLLOW_nested_blk_in_foreach_plan_complex4338);
            nested_blk440=nested_blk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_blk.add(nested_blk440.getTree());

            // AST REWRITE
            // elements: nested_blk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:21: -> ^( FOREACH_PLAN_COMPLEX nested_blk )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:571:24: ^( FOREACH_PLAN_COMPLEX nested_blk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_COMPLEX, "FOREACH_PLAN_COMPLEX")
                , root_1);

                adaptor.addChild(root_1, stream_nested_blk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_complex"


    public static class nested_blk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:574:1: nested_blk : LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !;
    public final QueryParser.nested_blk_return nested_blk() throws RecognitionException {
        QueryParser.nested_blk_return retval = new QueryParser.nested_blk_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY441=null;
        Token SEMI_COLON444=null;
        Token RIGHT_CURLY445=null;
        QueryParser.nested_command_list_return nested_command_list442 =null;

        QueryParser.generate_clause_return generate_clause443 =null;


        Object LEFT_CURLY441_tree=null;
        Object SEMI_COLON444_tree=null;
        Object RIGHT_CURLY445_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:574:12: ( LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:574:14: LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY441=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_nested_blk4377); if (state.failed) return retval;

            pushFollow(FOLLOW_nested_command_list_in_nested_blk4380);
            nested_command_list442=nested_command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_command_list442.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:574:46: ( generate_clause SEMI_COLON !)
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:574:48: generate_clause SEMI_COLON !
            {
            pushFollow(FOLLOW_generate_clause_in_nested_blk4384);
            generate_clause443=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_clause443.getTree());

            SEMI_COLON444=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk4386); if (state.failed) return retval;

            }


            RIGHT_CURLY445=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_nested_blk4391); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class generate_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:577:1: generate_clause : GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( GENERATE ( flatten_generated_item )+ ) ;
    public final QueryParser.generate_clause_return generate_clause() throws RecognitionException {
        QueryParser.generate_clause_return retval = new QueryParser.generate_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GENERATE446=null;
        Token COMMA448=null;
        QueryParser.flatten_generated_item_return flatten_generated_item447 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item449 =null;


        Object GENERATE446_tree=null;
        Object COMMA448_tree=null;
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:577:17: ( GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( GENERATE ( flatten_generated_item )+ ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:577:19: GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            GENERATE446=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_generate_clause4401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE446);


            pushFollow(FOLLOW_flatten_generated_item_in_generate_clause4403);
            flatten_generated_item447=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item447.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:577:51: ( COMMA flatten_generated_item )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:577:53: COMMA flatten_generated_item
            	    {
            	    COMMA448=(Token)match(input,COMMA,FOLLOW_COMMA_in_generate_clause4407); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA448);


            	    pushFollow(FOLLOW_flatten_generated_item_in_generate_clause4409);
            	    flatten_generated_item449=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item449.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            // AST REWRITE
            // elements: GENERATE, flatten_generated_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:19: -> ^( GENERATE ( flatten_generated_item )+ )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:578:22: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_1);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_1, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_clause"


    public static class nested_command_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:1: nested_command_list : ( ( nested_command SEMI_COLON )* -> ( nested_command )* |);
    public final QueryParser.nested_command_list_return nested_command_list() throws RecognitionException {
        QueryParser.nested_command_list_return retval = new QueryParser.nested_command_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON451=null;
        QueryParser.nested_command_return nested_command450 =null;


        Object SEMI_COLON451_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleSubtreeStream stream_nested_command=new RewriteRuleSubtreeStream(adaptor,"rule nested_command");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:21: ( ( nested_command SEMI_COLON )* -> ( nested_command )* |)
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==IDENTIFIER_L) ) {
                alt122=1;
            }
            else if ( (LA122_0==GENERATE) ) {
                int LA122_2 = input.LA(2);

                if ( (synpred191_QueryParser()) ) {
                    alt122=1;
                }
                else if ( (true) ) {
                    alt122=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:23: ( nested_command SEMI_COLON )*
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:23: ( nested_command SEMI_COLON )*
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==IDENTIFIER_L) ) {
                            alt121=1;
                        }


                        switch (alt121) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:25: nested_command SEMI_COLON
                    	    {
                    	    pushFollow(FOLLOW_nested_command_in_nested_command_list4452);
                    	    nested_command450=nested_command();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_nested_command.add(nested_command450.getTree());

                    	    SEMI_COLON451=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_command_list4454); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON451);


                    	    }
                    	    break;

                    	default :
                    	    break loop121;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: nested_command
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 582:20: -> ( nested_command )*
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:582:23: ( nested_command )*
                        while ( stream_nested_command.hasNext() ) {
                            adaptor.addChild(root_0, stream_nested_command.nextTree());

                        }
                        stream_nested_command.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:584:21: 
                    {
                    root_0 = (Object)adaptor.nil();


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command_list"


    public static class nested_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:586:1: nested_command : ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) );
    public final QueryParser.nested_command_return nested_command() throws RecognitionException {
        QueryParser.nested_command_return retval = new QueryParser.nested_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL453=null;
        Token EQUAL456=null;
        Token EQUAL459=null;
        QueryParser.identifier_return identifier452 =null;

        QueryParser.nested_proj_return nested_proj454 =null;

        QueryParser.identifier_return identifier455 =null;

        QueryParser.expr_return expr457 =null;

        QueryParser.identifier_return identifier458 =null;

        QueryParser.nested_op_return nested_op460 =null;


        Object EQUAL453_tree=null;
        Object EQUAL456_tree=null;
        Object EQUAL459_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_nested_proj=new RewriteRuleSubtreeStream(adaptor,"rule nested_proj");
        RewriteRuleSubtreeStream stream_nested_op=new RewriteRuleSubtreeStream(adaptor,"rule nested_op");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:586:16: ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) )
            int alt123=3;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:586:18: ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj )
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:586:103: ( identifier EQUAL nested_proj )
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:586:105: identifier EQUAL nested_proj
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4532);
                    identifier452=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier452.getTree());

                    EQUAL453=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command4534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL453);


                    pushFollow(FOLLOW_nested_proj_in_nested_command4536);
                    nested_proj454=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_proj.add(nested_proj454.getTree());

                    }


                    // AST REWRITE
                    // elements: nested_proj, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 587:15: -> ^( NESTED_CMD identifier nested_proj )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:587:18: ^( NESTED_CMD identifier nested_proj )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_nested_proj.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:588:18: identifier EQUAL expr
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4583);
                    identifier455=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier455.getTree());

                    EQUAL456=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command4585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL456);


                    pushFollow(FOLLOW_expr_in_nested_command4587);
                    expr457=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr457.getTree());

                    // AST REWRITE
                    // elements: identifier, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 589:15: -> ^( NESTED_CMD_ASSI identifier expr )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:589:18: ^( NESTED_CMD_ASSI identifier expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD_ASSI, "NESTED_CMD_ASSI")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:590:18: identifier EQUAL nested_op
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4632);
                    identifier458=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier458.getTree());

                    EQUAL459=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command4634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL459);


                    pushFollow(FOLLOW_nested_op_in_nested_command4636);
                    nested_op460=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_op.add(nested_op460.getTree());

                    // AST REWRITE
                    // elements: nested_op, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 591:15: -> ^( NESTED_CMD identifier nested_op )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:591:18: ^( NESTED_CMD identifier nested_op )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_nested_op.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:594:1: nested_op : ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final QueryParser.nested_op_return nested_op() throws RecognitionException {
        QueryParser.nested_op_return retval = new QueryParser.nested_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_filter_return nested_filter461 =null;

        QueryParser.nested_sort_return nested_sort462 =null;

        QueryParser.nested_distinct_return nested_distinct463 =null;

        QueryParser.nested_limit_return nested_limit464 =null;

        QueryParser.nested_cross_return nested_cross465 =null;

        QueryParser.nested_foreach_return nested_foreach466 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:594:11: ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt124=6;
            switch ( input.LA(1) ) {
            case FILTER:
                {
                alt124=1;
                }
                break;
            case ORDER:
                {
                alt124=2;
                }
                break;
            case DISTINCT:
                {
                alt124=3;
                }
                break;
            case LIMIT:
                {
                alt124=4;
                }
                break;
            case CROSS:
                {
                alt124=5;
                }
                break;
            case FOREACH:
                {
                alt124=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }

            switch (alt124) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:594:13: nested_filter
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_filter_in_nested_op4671);
                    nested_filter461=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_filter461.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:595:13: nested_sort
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_sort_in_nested_op4685);
                    nested_sort462=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_sort462.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:596:13: nested_distinct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_distinct_in_nested_op4699);
                    nested_distinct463=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_distinct463.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:597:13: nested_limit
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_limit_in_nested_op4713);
                    nested_limit464=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_limit464.getTree());

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:598:13: nested_cross
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_cross_in_nested_op4727);
                    nested_cross465=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_cross465.getTree());

                    }
                    break;
                case 6 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:599:13: nested_foreach
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_foreach_in_nested_op4741);
                    nested_foreach466=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_foreach466.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:602:1: nested_proj : col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) ;
    public final QueryParser.nested_proj_return nested_proj() throws RecognitionException {
        QueryParser.nested_proj_return retval = new QueryParser.nested_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD468=null;
        QueryParser.col_ref_return col_ref467 =null;

        QueryParser.col_ref_list_return col_ref_list469 =null;


        Object PERIOD468_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref_list=new RewriteRuleSubtreeStream(adaptor,"rule col_ref_list");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:602:13: ( col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:602:15: col_ref PERIOD col_ref_list
            {
            pushFollow(FOLLOW_col_ref_in_nested_proj4750);
            col_ref467=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref.add(col_ref467.getTree());

            PERIOD468=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_nested_proj4752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD468);


            pushFollow(FOLLOW_col_ref_list_in_nested_proj4754);
            col_ref_list469=col_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref_list.add(col_ref_list469.getTree());

            // AST REWRITE
            // elements: col_ref_list, col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:12: -> ^( NESTED_PROJ col_ref col_ref_list )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:603:15: ^( NESTED_PROJ col_ref col_ref_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NESTED_PROJ, "NESTED_PROJ")
                , root_1);

                adaptor.addChild(root_1, stream_col_ref.nextTree());

                adaptor.addChild(root_1, stream_col_ref_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class col_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:1: col_ref_list : ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ ;
    public final QueryParser.col_ref_list_return col_ref_list() throws RecognitionException {
        QueryParser.col_ref_list_return retval = new QueryParser.col_ref_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN471=null;
        Token COMMA473=null;
        Token RIGHT_PAREN475=null;
        QueryParser.col_ref_return col_ref470 =null;

        QueryParser.col_ref_return col_ref472 =null;

        QueryParser.col_ref_return col_ref474 =null;


        Object LEFT_PAREN471_tree=null;
        Object COMMA473_tree=null;
        Object RIGHT_PAREN475_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:14: ( ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==DOLLARVAR||LA126_0==GROUP||LA126_0==IDENTIFIER_L) ) {
                alt126=1;
            }
            else if ( (LA126_0==LEFT_PAREN) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:18: col_ref
                    {
                    pushFollow(FOLLOW_col_ref_in_col_ref_list4788);
                    col_ref470=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref470.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:30: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                    {
                    LEFT_PAREN471=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_col_ref_list4794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN471);


                    pushFollow(FOLLOW_col_ref_in_col_ref_list4796);
                    col_ref472=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref472.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:49: ( COMMA col_ref )*
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);

                        if ( (LA125_0==COMMA) ) {
                            alt125=1;
                        }


                        switch (alt125) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:606:51: COMMA col_ref
                    	    {
                    	    COMMA473=(Token)match(input,COMMA,FOLLOW_COMMA_in_col_ref_list4800); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA473);


                    	    pushFollow(FOLLOW_col_ref_in_col_ref_list4802);
                    	    col_ref474=col_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref474.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop125;
                        }
                    } while (true);


                    RIGHT_PAREN475=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_col_ref_list4807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN475);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 607:13: -> ( col_ref )+
            {
                if ( !(stream_col_ref.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_ref.hasNext() ) {
                    adaptor.addChild(root_0, stream_col_ref.nextTree());

                }
                stream_col_ref.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_list"


    public static class nested_filter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:610:1: nested_filter : FILTER ^ nested_op_input BY ! cond ;
    public final QueryParser.nested_filter_return nested_filter() throws RecognitionException {
        QueryParser.nested_filter_return retval = new QueryParser.nested_filter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER476=null;
        Token BY478=null;
        QueryParser.nested_op_input_return nested_op_input477 =null;

        QueryParser.cond_return cond479 =null;


        Object FILTER476_tree=null;
        Object BY478_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:610:15: ( FILTER ^ nested_op_input BY ! cond )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:610:17: FILTER ^ nested_op_input BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER476=(Token)match(input,FILTER,FOLLOW_FILTER_in_nested_filter4837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER476_tree = 
            (Object)adaptor.create(FILTER476)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER476_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_filter4840);
            nested_op_input477=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input477.getTree());

            BY478=(Token)match(input,BY,FOLLOW_BY_in_nested_filter4842); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_nested_filter4845);
            cond479=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond479.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:613:1: nested_sort : ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.nested_sort_return nested_sort() throws RecognitionException {
        QueryParser.nested_sort_return retval = new QueryParser.nested_sort_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER480=null;
        Token BY482=null;
        Token USING484=null;
        QueryParser.nested_op_input_return nested_op_input481 =null;

        QueryParser.order_by_clause_return order_by_clause483 =null;

        QueryParser.func_clause_return func_clause485 =null;


        Object ORDER480_tree=null;
        Object BY482_tree=null;
        Object USING484_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:613:13: ( ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:613:15: ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER480=(Token)match(input,ORDER,FOLLOW_ORDER_in_nested_sort4854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER480_tree = 
            (Object)adaptor.create(ORDER480)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER480_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_sort4857);
            nested_op_input481=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input481.getTree());

            BY482=(Token)match(input,BY,FOLLOW_BY_in_nested_sort4859); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_nested_sort4863);
            order_by_clause483=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause483.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:613:59: ( USING ! func_clause )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==USING) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:613:61: USING ! func_clause
                    {
                    USING484=(Token)match(input,USING,FOLLOW_USING_in_nested_sort4867); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_nested_sort4870);
                    func_clause485=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause485.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:616:1: nested_distinct : DISTINCT ^ nested_op_input ;
    public final QueryParser.nested_distinct_return nested_distinct() throws RecognitionException {
        QueryParser.nested_distinct_return retval = new QueryParser.nested_distinct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT486=null;
        QueryParser.nested_op_input_return nested_op_input487 =null;


        Object DISTINCT486_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:616:17: ( DISTINCT ^ nested_op_input )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:616:19: DISTINCT ^ nested_op_input
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT486=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct4882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT486_tree = 
            (Object)adaptor.create(DISTINCT486)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT486_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_distinct4885);
            nested_op_input487=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input487.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:1: nested_limit : LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) ;
    public final QueryParser.nested_limit_return nested_limit() throws RecognitionException {
        QueryParser.nested_limit_return retval = new QueryParser.nested_limit_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT488=null;
        Token INTEGER490=null;
        QueryParser.nested_op_input_return nested_op_input489 =null;

        QueryParser.expr_return expr491 =null;


        Object LIMIT488_tree=null;
        Object INTEGER490_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:14: ( LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:16: LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT488=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit4894); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT488_tree = 
            (Object)adaptor.create(LIMIT488)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT488_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_limit4897);
            nested_op_input489=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input489.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:39: ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==INTEGER) ) {
                int LA128_1 = input.LA(2);

                if ( (synpred202_QueryParser()) ) {
                    alt128=1;
                }
                else if ( (true) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA128_0 >= ALL && LA128_0 <= BAG)||(LA128_0 >= BY && LA128_0 <= COGROUP)||LA128_0==CROSS||(LA128_0 >= DEFINE && LA128_0 <= DESC)||LA128_0==DISTINCT||(LA128_0 >= DOLLARVAR && LA128_0 <= DOUBLENUMBER)||(LA128_0 >= FALSE && LA128_0 <= FLOAT)||(LA128_0 >= FLOATNUMBER && LA128_0 <= GROUP)||(LA128_0 >= IDENTIFIER_L && LA128_0 <= INT)||(LA128_0 >= INTO && LA128_0 <= LEFT_PAREN)||(LA128_0 >= LIMIT && LA128_0 <= MINUS)||LA128_0==NOT||(LA128_0 >= OR && LA128_0 <= ORDER)||(LA128_0 >= OUTER && LA128_0 <= PARTITION)||(LA128_0 >= QUOTEDSTRING && LA128_0 <= RIGHT)||LA128_0==SAMPLE||LA128_0==SHIP||LA128_0==SPLIT||(LA128_0 >= STDERROR && LA128_0 <= USING)||LA128_0==BOOL||LA128_0==REALIAS) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;

            }
            switch (alt128) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:41: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER490=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit4909); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER490_tree = 
                    (Object)adaptor.create(INTEGER490)
                    ;
                    adaptor.addChild(root_0, INTEGER490_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_nested_limit4913);
                    expr491=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr491.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:622:1: nested_cross : CROSS ^ nested_op_input_list ;
    public final QueryParser.nested_cross_return nested_cross() throws RecognitionException {
        QueryParser.nested_cross_return retval = new QueryParser.nested_cross_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS492=null;
        QueryParser.nested_op_input_list_return nested_op_input_list493 =null;


        Object CROSS492_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:622:14: ( CROSS ^ nested_op_input_list )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:622:16: CROSS ^ nested_op_input_list
            {
            root_0 = (Object)adaptor.nil();


            CROSS492=(Token)match(input,CROSS,FOLLOW_CROSS_in_nested_cross4924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS492_tree = 
            (Object)adaptor.create(CROSS492)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS492_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross4927);
            nested_op_input_list493=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input_list493.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:625:1: nested_foreach : FOREACH ^ nested_op_input generate_clause ;
    public final QueryParser.nested_foreach_return nested_foreach() throws RecognitionException {
        QueryParser.nested_foreach_return retval = new QueryParser.nested_foreach_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH494=null;
        QueryParser.nested_op_input_return nested_op_input495 =null;

        QueryParser.generate_clause_return generate_clause496 =null;


        Object FOREACH494_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:625:15: ( FOREACH ^ nested_op_input generate_clause )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:625:17: FOREACH ^ nested_op_input generate_clause
            {
            root_0 = (Object)adaptor.nil();


            FOREACH494=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach4935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH494_tree = 
            (Object)adaptor.create(FOREACH494)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH494_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_foreach4938);
            nested_op_input495=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input495.getTree());

            pushFollow(FOLLOW_generate_clause_in_nested_foreach4940);
            generate_clause496=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_clause496.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:628:1: nested_op_input : ( col_ref | nested_proj );
    public final QueryParser.nested_op_input_return nested_op_input() throws RecognitionException {
        QueryParser.nested_op_input_return retval = new QueryParser.nested_op_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_return col_ref497 =null;

        QueryParser.nested_proj_return nested_proj498 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:628:17: ( col_ref | nested_proj )
            int alt129=2;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA129_1 = input.LA(2);

                if ( (LA129_1==EOF||(LA129_1 >= ALL && LA129_1 <= BAG)||(LA129_1 >= BY && LA129_1 <= COGROUP)||(LA129_1 >= COMMA && LA129_1 <= CROSS)||(LA129_1 >= DEFINE && LA129_1 <= DESC)||LA129_1==DISTINCT||(LA129_1 >= DOLLARVAR && LA129_1 <= DOUBLENUMBER)||(LA129_1 >= FALSE && LA129_1 <= FLOAT)||(LA129_1 >= FLOATNUMBER && LA129_1 <= GROUP)||(LA129_1 >= IDENTIFIER_L && LA129_1 <= LEFT_PAREN)||(LA129_1 >= LIMIT && LA129_1 <= MINUS)||LA129_1==NOT||(LA129_1 >= OR && LA129_1 <= ORDER)||(LA129_1 >= OUTER && LA129_1 <= PARTITION)||(LA129_1 >= QUOTEDSTRING && LA129_1 <= RIGHT)||(LA129_1 >= SAMPLE && LA129_1 <= SHIP)||LA129_1==SPLIT||(LA129_1 >= STDERROR && LA129_1 <= USING)||LA129_1==BOOL||LA129_1==REALIAS) ) {
                    alt129=1;
                }
                else if ( (LA129_1==PERIOD) ) {
                    alt129=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 129, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA129_2 = input.LA(2);

                if ( (LA129_2==EOF||(LA129_2 >= ALL && LA129_2 <= BAG)||(LA129_2 >= BY && LA129_2 <= COGROUP)||(LA129_2 >= COMMA && LA129_2 <= CROSS)||(LA129_2 >= DEFINE && LA129_2 <= DESC)||LA129_2==DISTINCT||(LA129_2 >= DOLLARVAR && LA129_2 <= DOUBLENUMBER)||(LA129_2 >= FALSE && LA129_2 <= FLOAT)||(LA129_2 >= FLOATNUMBER && LA129_2 <= GROUP)||(LA129_2 >= IDENTIFIER_L && LA129_2 <= LEFT_PAREN)||(LA129_2 >= LIMIT && LA129_2 <= MINUS)||LA129_2==NOT||(LA129_2 >= OR && LA129_2 <= ORDER)||(LA129_2 >= OUTER && LA129_2 <= PARTITION)||(LA129_2 >= QUOTEDSTRING && LA129_2 <= RIGHT)||(LA129_2 >= SAMPLE && LA129_2 <= SHIP)||LA129_2==SPLIT||(LA129_2 >= STDERROR && LA129_2 <= USING)||LA129_2==BOOL||LA129_2==REALIAS) ) {
                    alt129=1;
                }
                else if ( (LA129_2==PERIOD) ) {
                    alt129=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 129, 2, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA129_3 = input.LA(2);

                if ( (LA129_3==EOF||(LA129_3 >= ALL && LA129_3 <= BAG)||(LA129_3 >= BY && LA129_3 <= COGROUP)||(LA129_3 >= COMMA && LA129_3 <= CROSS)||(LA129_3 >= DEFINE && LA129_3 <= DESC)||LA129_3==DISTINCT||(LA129_3 >= DOLLARVAR && LA129_3 <= DOUBLENUMBER)||(LA129_3 >= FALSE && LA129_3 <= FLOAT)||(LA129_3 >= FLOATNUMBER && LA129_3 <= GROUP)||(LA129_3 >= IDENTIFIER_L && LA129_3 <= LEFT_PAREN)||(LA129_3 >= LIMIT && LA129_3 <= MINUS)||LA129_3==NOT||(LA129_3 >= OR && LA129_3 <= ORDER)||(LA129_3 >= OUTER && LA129_3 <= PARTITION)||(LA129_3 >= QUOTEDSTRING && LA129_3 <= RIGHT)||(LA129_3 >= SAMPLE && LA129_3 <= SHIP)||LA129_3==SPLIT||(LA129_3 >= STDERROR && LA129_3 <= USING)||LA129_3==BOOL||LA129_3==REALIAS) ) {
                    alt129=1;
                }
                else if ( (LA129_3==PERIOD) ) {
                    alt129=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 129, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }

            switch (alt129) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:628:19: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_nested_op_input4949);
                    col_ref497=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref497.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:628:29: nested_proj
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_proj_in_nested_op_input4953);
                    nested_proj498=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_proj498.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:631:1: nested_op_input_list : nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ ;
    public final QueryParser.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        QueryParser.nested_op_input_list_return retval = new QueryParser.nested_op_input_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA500=null;
        QueryParser.nested_op_input_return nested_op_input499 =null;

        QueryParser.nested_op_input_return nested_op_input501 =null;


        Object COMMA500_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:631:22: ( nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:631:24: nested_op_input ( COMMA nested_op_input )*
            {
            pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list4962);
            nested_op_input499=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input499.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:631:40: ( COMMA nested_op_input )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==COMMA) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:631:42: COMMA nested_op_input
            	    {
            	    COMMA500=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_op_input_list4966); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA500);


            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list4968);
            	    nested_op_input501=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input501.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            // AST REWRITE
            // elements: nested_op_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 632:9: -> ( nested_op_input )+
            {
                if ( !(stream_nested_op_input.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nested_op_input.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_op_input.nextTree());

                }
                stream_nested_op_input.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class stream_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:1: stream_clause : STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )? ;
    public final QueryParser.stream_clause_return stream_clause() throws RecognitionException {
        QueryParser.stream_clause_return retval = new QueryParser.stream_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STREAM502=null;
        Token THROUGH504=null;
        Token EXECCOMMAND505=null;
        QueryParser.rel_return rel503 =null;

        QueryParser.alias_return alias506 =null;

        QueryParser.as_clause_return as_clause507 =null;


        Object STREAM502_tree=null;
        Object THROUGH504_tree=null;
        Object EXECCOMMAND505_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:15: ( STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:17: STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STREAM502=(Token)match(input,STREAM,FOLLOW_STREAM_in_stream_clause4993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM502_tree = 
            (Object)adaptor.create(STREAM502)
            ;
            root_0 = (Object)adaptor.becomeRoot(STREAM502_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_stream_clause4996);
            rel503=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel503.getTree());

            THROUGH504=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_stream_clause4998); if (state.failed) return retval;

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:38: ( EXECCOMMAND | alias )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==EXECCOMMAND) ) {
                alt131=1;
            }
            else if ( (LA131_0==IDENTIFIER_L) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:40: EXECCOMMAND
                    {
                    EXECCOMMAND505=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause5003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND505_tree = 
                    (Object)adaptor.create(EXECCOMMAND505)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND505_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:54: alias
                    {
                    pushFollow(FOLLOW_alias_in_stream_clause5007);
                    alias506=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias506.getTree());

                    }
                    break;

            }


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:62: ( as_clause )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==AS) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:635:62: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_stream_clause5011);
                    as_clause507=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause507.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:638:1: mr_clause : MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? ;
    public final QueryParser.mr_clause_return mr_clause() throws RecognitionException {
        QueryParser.mr_clause_return retval = new QueryParser.mr_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAPREDUCE508=null;
        Token QUOTEDSTRING509=null;
        Token LEFT_PAREN510=null;
        Token RIGHT_PAREN512=null;
        Token EXECCOMMAND515=null;
        QueryParser.path_list_return path_list511 =null;

        QueryParser.store_clause_return store_clause513 =null;

        QueryParser.load_clause_return load_clause514 =null;


        Object MAPREDUCE508_tree=null;
        Object QUOTEDSTRING509_tree=null;
        Object LEFT_PAREN510_tree=null;
        Object RIGHT_PAREN512_tree=null;
        Object EXECCOMMAND515_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:638:11: ( MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:638:13: MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )?
            {
            root_0 = (Object)adaptor.nil();


            MAPREDUCE508=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause5021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE508_tree = 
            (Object)adaptor.create(MAPREDUCE508)
            ;
            root_0 = (Object)adaptor.becomeRoot(MAPREDUCE508_tree, root_0);
            }

            QUOTEDSTRING509=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause5024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING509_tree = 
            (Object)adaptor.create(QUOTEDSTRING509)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING509_tree);
            }

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:638:37: ( LEFT_PAREN ! path_list RIGHT_PAREN !)?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==LEFT_PAREN) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:638:39: LEFT_PAREN ! path_list RIGHT_PAREN !
                    {
                    LEFT_PAREN510=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_mr_clause5028); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_list_in_mr_clause5031);
                    path_list511=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list511.getTree());

                    RIGHT_PAREN512=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_mr_clause5033); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_store_clause_in_mr_clause5039);
            store_clause513=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause513.getTree());

            pushFollow(FOLLOW_load_clause_in_mr_clause5041);
            load_clause514=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause514.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:638:102: ( EXECCOMMAND )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==EXECCOMMAND) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:638:102: EXECCOMMAND
                    {
                    EXECCOMMAND515=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause5043); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND515_tree = 
                    (Object)adaptor.create(EXECCOMMAND515)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND515_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:1: split_clause : SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) ) -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) ;
    public final QueryParser.split_clause_return split_clause() throws RecognitionException {
        QueryParser.split_clause_return retval = new QueryParser.split_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SPLIT516=null;
        Token INTO518=null;
        Token COMMA520=null;
        Token COMMA522=null;
        Token COMMA524=null;
        QueryParser.rel_return rel517 =null;

        QueryParser.split_branch_return split_branch519 =null;

        QueryParser.split_branch_return split_branch521 =null;

        QueryParser.split_branch_return split_branch523 =null;

        QueryParser.split_otherwise_return split_otherwise525 =null;


        Object SPLIT516_tree=null;
        Object INTO518_tree=null;
        Object COMMA520_tree=null;
        Object COMMA522_tree=null;
        Object COMMA524_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_SPLIT=new RewriteRuleTokenStream(adaptor,"token SPLIT");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_split_otherwise=new RewriteRuleSubtreeStream(adaptor,"rule split_otherwise");
        RewriteRuleSubtreeStream stream_split_branch=new RewriteRuleSubtreeStream(adaptor,"rule split_branch");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:14: ( SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) ) -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:16: SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) )
            {
            SPLIT516=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause5053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SPLIT.add(SPLIT516);


            pushFollow(FOLLOW_rel_in_split_clause5055);
            rel517=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel517.getTree());

            INTO518=(Token)match(input,INTO,FOLLOW_INTO_in_split_clause5057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO518);


            pushFollow(FOLLOW_split_branch_in_split_clause5059);
            split_branch519=split_branch();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_split_branch.add(split_branch519.getTree());

            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:44: ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==COMMA) ) {
                int LA137_1 = input.LA(2);

                if ( (synpred210_QueryParser()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:46: ( COMMA split_branch )+
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:46: ( COMMA split_branch )+
                    int cnt135=0;
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==COMMA) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:48: COMMA split_branch
                    	    {
                    	    COMMA520=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5065); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA520);


                    	    pushFollow(FOLLOW_split_branch_in_split_clause5067);
                    	    split_branch521=split_branch();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_split_branch.add(split_branch521.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt135 >= 1 ) break loop135;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(135, input);
                                throw eee;
                        }
                        cnt135++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:72: ( ( COMMA split_branch )* COMMA split_otherwise )
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:72: ( ( COMMA split_branch )* COMMA split_otherwise )
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:74: ( COMMA split_branch )* COMMA split_otherwise
                    {
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:74: ( COMMA split_branch )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==COMMA) ) {
                            int LA136_1 = input.LA(2);

                            if ( (LA136_1==IDENTIFIER_L) ) {
                                int LA136_2 = input.LA(3);

                                if ( (LA136_2==IF) ) {
                                    alt136=1;
                                }


                            }


                        }


                        switch (alt136) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:76: COMMA split_branch
                    	    {
                    	    COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5078); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA522);


                    	    pushFollow(FOLLOW_split_branch_in_split_clause5080);
                    	    split_branch523=split_branch();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_split_branch.add(split_branch523.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);


                    COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA524);


                    pushFollow(FOLLOW_split_otherwise_in_split_clause5087);
                    split_otherwise525=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_split_otherwise.add(split_otherwise525.getTree());

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: rel, split_otherwise, SPLIT, split_branch
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:13: -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:642:16: ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_SPLIT.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                if ( !(stream_split_branch.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_split_branch.hasNext() ) {
                    adaptor.addChild(root_1, stream_split_branch.nextTree());

                }
                stream_split_branch.reset();

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:642:43: ( split_otherwise )?
                if ( stream_split_otherwise.hasNext() ) {
                    adaptor.addChild(root_1, stream_split_otherwise.nextTree());

                }
                stream_split_otherwise.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:645:1: split_branch : alias IF cond -> ^( SPLIT_BRANCH alias cond ) ;
    public final QueryParser.split_branch_return split_branch() throws RecognitionException {
        QueryParser.split_branch_return retval = new QueryParser.split_branch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IF527=null;
        QueryParser.alias_return alias526 =null;

        QueryParser.cond_return cond528 =null;


        Object IF527_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:645:14: ( alias IF cond -> ^( SPLIT_BRANCH alias cond ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:645:16: alias IF cond
            {
            pushFollow(FOLLOW_alias_in_split_branch5127);
            alias526=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias526.getTree());

            IF527=(Token)match(input,IF,FOLLOW_IF_in_split_branch5129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF527);


            pushFollow(FOLLOW_cond_in_split_branch5131);
            cond528=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond528.getTree());

            // AST REWRITE
            // elements: alias, cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 646:13: -> ^( SPLIT_BRANCH alias cond )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:646:16: ^( SPLIT_BRANCH alias cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SPLIT_BRANCH, "SPLIT_BRANCH")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:649:1: split_otherwise : alias OTHERWISE -> ^( OTHERWISE alias ) ;
    public final QueryParser.split_otherwise_return split_otherwise() throws RecognitionException {
        QueryParser.split_otherwise_return retval = new QueryParser.split_otherwise_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OTHERWISE530=null;
        QueryParser.alias_return alias529 =null;


        Object OTHERWISE530_tree=null;
        RewriteRuleTokenStream stream_OTHERWISE=new RewriteRuleTokenStream(adaptor,"token OTHERWISE");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:649:17: ( alias OTHERWISE -> ^( OTHERWISE alias ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:649:19: alias OTHERWISE
            {
            pushFollow(FOLLOW_alias_in_split_otherwise5164);
            alias529=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias529.getTree());

            OTHERWISE530=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise5166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OTHERWISE.add(OTHERWISE530);


            // AST REWRITE
            // elements: OTHERWISE, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:13: -> ^( OTHERWISE alias )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:650:16: ^( OTHERWISE alias )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_OTHERWISE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:653:1: col_ref : ( alias_col_ref | dollar_col_ref );
    public final QueryParser.col_ref_return col_ref() throws RecognitionException {
        QueryParser.col_ref_return retval = new QueryParser.col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.alias_col_ref_return alias_col_ref531 =null;

        QueryParser.dollar_col_ref_return dollar_col_ref532 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:653:9: ( alias_col_ref | dollar_col_ref )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==GROUP||LA138_0==IDENTIFIER_L) ) {
                alt138=1;
            }
            else if ( (LA138_0==DOLLARVAR) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:653:11: alias_col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alias_col_ref_in_col_ref5197);
                    alias_col_ref531=alias_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias_col_ref531.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:653:27: dollar_col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_dollar_col_ref_in_col_ref5201);
                    dollar_col_ref532=dollar_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dollar_col_ref532.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class alias_col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_col_ref"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:656:1: alias_col_ref : ( GROUP | identifier );
    public final QueryParser.alias_col_ref_return alias_col_ref() throws RecognitionException {
        QueryParser.alias_col_ref_return retval = new QueryParser.alias_col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GROUP533=null;
        QueryParser.identifier_return identifier534 =null;


        Object GROUP533_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:656:15: ( GROUP | identifier )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==GROUP) ) {
                alt139=1;
            }
            else if ( (LA139_0==IDENTIFIER_L) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }
            switch (alt139) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:656:17: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP533=(Token)match(input,GROUP,FOLLOW_GROUP_in_alias_col_ref5210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP533_tree = 
                    (Object)adaptor.create(GROUP533)
                    ;
                    adaptor.addChild(root_0, GROUP533_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:656:25: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_alias_col_ref5214);
                    identifier534=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier534.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_col_ref"


    public static class dollar_col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dollar_col_ref"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:659:1: dollar_col_ref : DOLLARVAR ;
    public final QueryParser.dollar_col_ref_return dollar_col_ref() throws RecognitionException {
        QueryParser.dollar_col_ref_return retval = new QueryParser.dollar_col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOLLARVAR535=null;

        Object DOLLARVAR535_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:659:16: ( DOLLARVAR )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:659:18: DOLLARVAR
            {
            root_0 = (Object)adaptor.nil();


            DOLLARVAR535=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_dollar_col_ref5223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR535_tree = 
            (Object)adaptor.create(DOLLARVAR535)
            ;
            adaptor.addChild(root_0, DOLLARVAR535_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dollar_col_ref"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:662:1: const_expr : literal ;
    public final QueryParser.const_expr_return const_expr() throws RecognitionException {
        QueryParser.const_expr_return retval = new QueryParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.literal_return literal536 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:662:12: ( literal )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:662:14: literal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_literal_in_const_expr5232);
            literal536=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal536.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:665:1: literal : ( scalar | map | bag | tuple );
    public final QueryParser.literal_return literal() throws RecognitionException {
        QueryParser.literal_return retval = new QueryParser.literal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.scalar_return scalar537 =null;

        QueryParser.map_return map538 =null;

        QueryParser.bag_return bag539 =null;

        QueryParser.tuple_return tuple540 =null;



        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:665:9: ( scalar | map | bag | tuple )
            int alt140=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case IDENTIFIER_L:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case QUOTEDSTRING:
            case TRUE:
                {
                alt140=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt140=2;
                }
                break;
            case LEFT_CURLY:
                {
                alt140=3;
                }
                break;
            case LEFT_PAREN:
                {
                alt140=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }

            switch (alt140) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:665:11: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_literal5241);
                    scalar537=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar537.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:665:20: map
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_in_literal5245);
                    map538=map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map538.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:665:26: bag
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_in_literal5249);
                    bag539=bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag539.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:665:32: tuple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_in_literal5253);
                    tuple540=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple540.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:669:1: scalar : ( num_scalar | QUOTEDSTRING | null_keyword | TRUE | FALSE );
    public final QueryParser.scalar_return scalar() throws RecognitionException {
        QueryParser.scalar_return retval = new QueryParser.scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING542=null;
        Token TRUE544=null;
        Token FALSE545=null;
        QueryParser.num_scalar_return num_scalar541 =null;

        QueryParser.null_keyword_return null_keyword543 =null;


        Object QUOTEDSTRING542_tree=null;
        Object TRUE544_tree=null;
        Object FALSE545_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:669:8: ( num_scalar | QUOTEDSTRING | null_keyword | TRUE | FALSE )
            int alt141=5;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
                {
                alt141=1;
                }
                break;
            case QUOTEDSTRING:
                {
                alt141=2;
                }
                break;
            case IDENTIFIER_L:
                {
                alt141=3;
                }
                break;
            case TRUE:
                {
                alt141=4;
                }
                break;
            case FALSE:
                {
                alt141=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }

            switch (alt141) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:669:10: num_scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_num_scalar_in_scalar5263);
                    num_scalar541=num_scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, num_scalar541.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:669:23: QUOTEDSTRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTEDSTRING542=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_scalar5267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING542_tree = 
                    (Object)adaptor.create(QUOTEDSTRING542)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING542_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:669:38: null_keyword
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_keyword_in_scalar5271);
                    null_keyword543=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword543.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:669:53: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE544=(Token)match(input,TRUE,FOLLOW_TRUE_in_scalar5275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE544_tree = 
                    (Object)adaptor.create(TRUE544)
                    ;
                    adaptor.addChild(root_0, TRUE544_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:669:60: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE545=(Token)match(input,FALSE,FOLLOW_FALSE_in_scalar5279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE545_tree = 
                    (Object)adaptor.create(FALSE545)
                    ;
                    adaptor.addChild(root_0, FALSE545_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class num_scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "num_scalar"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:672:1: num_scalar : ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) ;
    public final QueryParser.num_scalar_return num_scalar() throws RecognitionException {
        QueryParser.num_scalar_return retval = new QueryParser.num_scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS546=null;
        Token set547=null;

        Object MINUS546_tree=null;
        Object set547_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:672:12: ( ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:672:14: ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:672:14: ( MINUS )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==MINUS) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:672:14: MINUS
                    {
                    MINUS546=(Token)match(input,MINUS,FOLLOW_MINUS_in_num_scalar5288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS546_tree = 
                    (Object)adaptor.create(MINUS546)
                    ;
                    adaptor.addChild(root_0, MINUS546_tree);
                    }

                    }
                    break;

            }


            set547=(Token)input.LT(1);

            if ( input.LA(1)==DOUBLENUMBER||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set547)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "num_scalar"


    public static class map_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:675:1: map : ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) );
    public final QueryParser.map_return map() throws RecognitionException {
        QueryParser.map_return retval = new QueryParser.map_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET548=null;
        Token COMMA550=null;
        Token RIGHT_BRACKET552=null;
        Token LEFT_BRACKET553=null;
        Token RIGHT_BRACKET554=null;
        QueryParser.keyvalue_return keyvalue549 =null;

        QueryParser.keyvalue_return keyvalue551 =null;


        Object LEFT_BRACKET548_tree=null;
        Object COMMA550_tree=null;
        Object RIGHT_BRACKET552_tree=null;
        Object LEFT_BRACKET553_tree=null;
        Object RIGHT_BRACKET554_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:675:5: ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LEFT_BRACKET) ) {
                int LA144_1 = input.LA(2);

                if ( (LA144_1==RIGHT_BRACKET) ) {
                    alt144=2;
                }
                else if ( (LA144_1==QUOTEDSTRING) ) {
                    alt144=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:675:7: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET
                    {
                    LEFT_BRACKET548=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map5316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET548);


                    pushFollow(FOLLOW_keyvalue_in_map5318);
                    keyvalue549=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue549.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:675:29: ( COMMA keyvalue )*
                    loop143:
                    do {
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==COMMA) ) {
                            alt143=1;
                        }


                        switch (alt143) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:675:31: COMMA keyvalue
                    	    {
                    	    COMMA550=(Token)match(input,COMMA,FOLLOW_COMMA_in_map5322); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA550);


                    	    pushFollow(FOLLOW_keyvalue_in_map5324);
                    	    keyvalue551=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue551.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop143;
                        }
                    } while (true);


                    RIGHT_BRACKET552=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map5329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET552);


                    // AST REWRITE
                    // elements: keyvalue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 676:4: -> ^( MAP_VAL ( keyvalue )+ )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:676:7: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:677:7: LEFT_BRACKET RIGHT_BRACKET
                    {
                    LEFT_BRACKET553=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map5351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET553);


                    RIGHT_BRACKET554=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map5353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET554);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 678:4: -> ^( MAP_VAL )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:678:7: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map"


    public static class keyvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:681:1: keyvalue : map_key POUND const_expr -> ^( KEY_VAL_PAIR map_key const_expr ) ;
    public final QueryParser.keyvalue_return keyvalue() throws RecognitionException {
        QueryParser.keyvalue_return retval = new QueryParser.keyvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token POUND556=null;
        QueryParser.map_key_return map_key555 =null;

        QueryParser.const_expr_return const_expr557 =null;


        Object POUND556_tree=null;
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        RewriteRuleSubtreeStream stream_map_key=new RewriteRuleSubtreeStream(adaptor,"rule map_key");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:681:10: ( map_key POUND const_expr -> ^( KEY_VAL_PAIR map_key const_expr ) )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:681:12: map_key POUND const_expr
            {
            pushFollow(FOLLOW_map_key_in_keyvalue5373);
            map_key555=map_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_map_key.add(map_key555.getTree());

            POUND556=(Token)match(input,POUND,FOLLOW_POUND_in_keyvalue5375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_POUND.add(POUND556);


            pushFollow(FOLLOW_const_expr_in_keyvalue5377);
            const_expr557=const_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_const_expr.add(const_expr557.getTree());

            // AST REWRITE
            // elements: map_key, const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 682:9: -> ^( KEY_VAL_PAIR map_key const_expr )
            {
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:682:12: ^( KEY_VAL_PAIR map_key const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(KEY_VAL_PAIR, "KEY_VAL_PAIR")
                , root_1);

                adaptor.addChild(root_1, stream_map_key.nextTree());

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class map_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:685:1: map_key : QUOTEDSTRING ;
    public final QueryParser.map_key_return map_key() throws RecognitionException {
        QueryParser.map_key_return retval = new QueryParser.map_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING558=null;

        Object QUOTEDSTRING558_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:685:9: ( QUOTEDSTRING )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:685:11: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING558=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_map_key5406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING558_tree = 
            (Object)adaptor.create(QUOTEDSTRING558)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING558_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class bag_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:688:1: bag : ( LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY -> ^( BAG_VAL ( tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) );
    public final QueryParser.bag_return bag() throws RecognitionException {
        QueryParser.bag_return retval = new QueryParser.bag_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY559=null;
        Token COMMA561=null;
        Token RIGHT_CURLY563=null;
        Token LEFT_CURLY564=null;
        Token RIGHT_CURLY565=null;
        QueryParser.tuple_return tuple560 =null;

        QueryParser.tuple_return tuple562 =null;


        Object LEFT_CURLY559_tree=null;
        Object COMMA561_tree=null;
        Object RIGHT_CURLY563_tree=null;
        Object LEFT_CURLY564_tree=null;
        Object RIGHT_CURLY565_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple=new RewriteRuleSubtreeStream(adaptor,"rule tuple");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:688:5: ( LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY -> ^( BAG_VAL ( tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==LEFT_CURLY) ) {
                int LA146_1 = input.LA(2);

                if ( (LA146_1==RIGHT_CURLY) ) {
                    alt146=2;
                }
                else if ( (LA146_1==LEFT_PAREN) ) {
                    alt146=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;

            }
            switch (alt146) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:688:7: LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY
                    {
                    LEFT_CURLY559=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag5415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY559);


                    pushFollow(FOLLOW_tuple_in_bag5417);
                    tuple560=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tuple.add(tuple560.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:688:24: ( COMMA tuple )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==COMMA) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:688:26: COMMA tuple
                    	    {
                    	    COMMA561=(Token)match(input,COMMA,FOLLOW_COMMA_in_bag5421); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA561);


                    	    pushFollow(FOLLOW_tuple_in_bag5423);
                    	    tuple562=tuple();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_tuple.add(tuple562.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    RIGHT_CURLY563=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag5428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY563);


                    // AST REWRITE
                    // elements: tuple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 689:4: -> ^( BAG_VAL ( tuple )+ )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:689:7: ^( BAG_VAL ( tuple )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        if ( !(stream_tuple.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_tuple.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple.nextTree());

                        }
                        stream_tuple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:690:7: LEFT_CURLY RIGHT_CURLY
                    {
                    LEFT_CURLY564=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag5450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY564);


                    RIGHT_CURLY565=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag5452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY565);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 691:4: -> ^( BAG_VAL )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:691:7: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag"


    public static class tuple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:694:1: tuple : ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) );
    public final QueryParser.tuple_return tuple() throws RecognitionException {
        QueryParser.tuple_return retval = new QueryParser.tuple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN566=null;
        Token COMMA568=null;
        Token RIGHT_PAREN570=null;
        Token LEFT_PAREN571=null;
        Token RIGHT_PAREN572=null;
        QueryParser.literal_return literal567 =null;

        QueryParser.literal_return literal569 =null;


        Object LEFT_PAREN566_tree=null;
        Object COMMA568_tree=null;
        Object RIGHT_PAREN570_tree=null;
        Object LEFT_PAREN571_tree=null;
        Object RIGHT_PAREN572_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:694:7: ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==LEFT_PAREN) ) {
                int LA148_1 = input.LA(2);

                if ( (LA148_1==RIGHT_PAREN) ) {
                    alt148=2;
                }
                else if ( (LA148_1==DOUBLENUMBER||LA148_1==FALSE||LA148_1==FLOATNUMBER||LA148_1==IDENTIFIER_L||LA148_1==INTEGER||(LA148_1 >= LEFT_BRACKET && LA148_1 <= LEFT_PAREN)||LA148_1==LONGINTEGER||LA148_1==MINUS||LA148_1==QUOTEDSTRING||LA148_1==TRUE) ) {
                    alt148=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 148, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }
            switch (alt148) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:694:9: LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN
                    {
                    LEFT_PAREN566=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple5472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN566);


                    pushFollow(FOLLOW_literal_in_tuple5474);
                    literal567=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal567.getTree());

                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:694:28: ( COMMA literal )*
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==COMMA) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:694:30: COMMA literal
                    	    {
                    	    COMMA568=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuple5478); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA568);


                    	    pushFollow(FOLLOW_literal_in_tuple5480);
                    	    literal569=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal.add(literal569.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop147;
                        }
                    } while (true);


                    RIGHT_PAREN570=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple5485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN570);


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 695:6: -> ^( TUPLE_VAL ( literal )+ )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:695:9: ^( TUPLE_VAL ( literal )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        if ( !(stream_literal.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal.nextTree());

                        }
                        stream_literal.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:696:9: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN571=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple5511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN571);


                    RIGHT_PAREN572=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple5513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN572);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 697:6: -> ^( TUPLE_VAL )
                    {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:697:9: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple"


    public static class eid_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:701:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE | REALIAS );
    public final QueryParser.eid_return eid() throws RecognitionException {
        QueryParser.eid_return retval = new QueryParser.eid_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT574=null;
        Token RETURNS575=null;
        Token DEFINE576=null;
        Token LOAD577=null;
        Token FILTER578=null;
        Token FOREACH579=null;
        Token ORDER580=null;
        Token DISTINCT581=null;
        Token COGROUP582=null;
        Token JOIN583=null;
        Token CROSS584=null;
        Token UNION585=null;
        Token SPLIT586=null;
        Token INTO587=null;
        Token IF588=null;
        Token ALL589=null;
        Token AS590=null;
        Token BY591=null;
        Token USING592=null;
        Token INNER593=null;
        Token OUTER594=null;
        Token PARALLEL595=null;
        Token PARTITION596=null;
        Token GROUP597=null;
        Token AND598=null;
        Token OR599=null;
        Token NOT600=null;
        Token GENERATE601=null;
        Token FLATTEN602=null;
        Token ASC603=null;
        Token DESC604=null;
        Token BOOL605=null;
        Token INT606=null;
        Token LONG607=null;
        Token FLOAT608=null;
        Token DOUBLE609=null;
        Token CHARARRAY610=null;
        Token BYTEARRAY611=null;
        Token BAG612=null;
        Token TUPLE613=null;
        Token MAP614=null;
        Token IS615=null;
        Token STREAM616=null;
        Token THROUGH617=null;
        Token STORE618=null;
        Token MAPREDUCE619=null;
        Token SHIP620=null;
        Token CACHE621=null;
        Token INPUT622=null;
        Token OUTPUT623=null;
        Token STDERROR624=null;
        Token STDIN625=null;
        Token STDOUT626=null;
        Token LIMIT627=null;
        Token SAMPLE628=null;
        Token LEFT629=null;
        Token RIGHT630=null;
        Token FULL631=null;
        Token TRUE634=null;
        Token FALSE635=null;
        Token REALIAS636=null;
        QueryParser.rel_str_op_return rel_str_op573 =null;

        QueryParser.identifier_return identifier632 =null;

        QueryParser.null_keyword_return null_keyword633 =null;


        Object IMPORT574_tree=null;
        Object RETURNS575_tree=null;
        Object DEFINE576_tree=null;
        Object LOAD577_tree=null;
        Object FILTER578_tree=null;
        Object FOREACH579_tree=null;
        Object ORDER580_tree=null;
        Object DISTINCT581_tree=null;
        Object COGROUP582_tree=null;
        Object JOIN583_tree=null;
        Object CROSS584_tree=null;
        Object UNION585_tree=null;
        Object SPLIT586_tree=null;
        Object INTO587_tree=null;
        Object IF588_tree=null;
        Object ALL589_tree=null;
        Object AS590_tree=null;
        Object BY591_tree=null;
        Object USING592_tree=null;
        Object INNER593_tree=null;
        Object OUTER594_tree=null;
        Object PARALLEL595_tree=null;
        Object PARTITION596_tree=null;
        Object GROUP597_tree=null;
        Object AND598_tree=null;
        Object OR599_tree=null;
        Object NOT600_tree=null;
        Object GENERATE601_tree=null;
        Object FLATTEN602_tree=null;
        Object ASC603_tree=null;
        Object DESC604_tree=null;
        Object BOOL605_tree=null;
        Object INT606_tree=null;
        Object LONG607_tree=null;
        Object FLOAT608_tree=null;
        Object DOUBLE609_tree=null;
        Object CHARARRAY610_tree=null;
        Object BYTEARRAY611_tree=null;
        Object BAG612_tree=null;
        Object TUPLE613_tree=null;
        Object MAP614_tree=null;
        Object IS615_tree=null;
        Object STREAM616_tree=null;
        Object THROUGH617_tree=null;
        Object STORE618_tree=null;
        Object MAPREDUCE619_tree=null;
        Object SHIP620_tree=null;
        Object CACHE621_tree=null;
        Object INPUT622_tree=null;
        Object OUTPUT623_tree=null;
        Object STDERROR624_tree=null;
        Object STDIN625_tree=null;
        Object STDOUT626_tree=null;
        Object LIMIT627_tree=null;
        Object SAMPLE628_tree=null;
        Object LEFT629_tree=null;
        Object RIGHT630_tree=null;
        Object FULL631_tree=null;
        Object TRUE634_tree=null;
        Object FALSE635_tree=null;
        Object REALIAS636_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:701:5: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE | REALIAS )
            int alt149=64;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:701:7: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_eid5536);
                    rel_str_op573=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op573.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:702:7: IMPORT
                    {
                    root_0 = (Object)adaptor.nil();


                    IMPORT574=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_eid5544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT574_tree = 
                    (Object)adaptor.create(IMPORT574)
                    ;
                    adaptor.addChild(root_0, IMPORT574_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:703:7: RETURNS
                    {
                    root_0 = (Object)adaptor.nil();


                    RETURNS575=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_eid5552); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS575_tree = 
                    (Object)adaptor.create(RETURNS575)
                    ;
                    adaptor.addChild(root_0, RETURNS575_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:704:7: DEFINE
                    {
                    root_0 = (Object)adaptor.nil();


                    DEFINE576=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_eid5560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE576_tree = 
                    (Object)adaptor.create(DEFINE576)
                    ;
                    adaptor.addChild(root_0, DEFINE576_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:705:7: LOAD
                    {
                    root_0 = (Object)adaptor.nil();


                    LOAD577=(Token)match(input,LOAD,FOLLOW_LOAD_in_eid5568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD577_tree = 
                    (Object)adaptor.create(LOAD577)
                    ;
                    adaptor.addChild(root_0, LOAD577_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:706:7: FILTER
                    {
                    root_0 = (Object)adaptor.nil();


                    FILTER578=(Token)match(input,FILTER,FOLLOW_FILTER_in_eid5576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER578_tree = 
                    (Object)adaptor.create(FILTER578)
                    ;
                    adaptor.addChild(root_0, FILTER578_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:707:7: FOREACH
                    {
                    root_0 = (Object)adaptor.nil();


                    FOREACH579=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_eid5584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH579_tree = 
                    (Object)adaptor.create(FOREACH579)
                    ;
                    adaptor.addChild(root_0, FOREACH579_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:708:7: ORDER
                    {
                    root_0 = (Object)adaptor.nil();


                    ORDER580=(Token)match(input,ORDER,FOLLOW_ORDER_in_eid5592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER580_tree = 
                    (Object)adaptor.create(ORDER580)
                    ;
                    adaptor.addChild(root_0, ORDER580_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:709:7: DISTINCT
                    {
                    root_0 = (Object)adaptor.nil();


                    DISTINCT581=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid5600); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT581_tree = 
                    (Object)adaptor.create(DISTINCT581)
                    ;
                    adaptor.addChild(root_0, DISTINCT581_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:710:7: COGROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    COGROUP582=(Token)match(input,COGROUP,FOLLOW_COGROUP_in_eid5608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP582_tree = 
                    (Object)adaptor.create(COGROUP582)
                    ;
                    adaptor.addChild(root_0, COGROUP582_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:711:7: JOIN
                    {
                    root_0 = (Object)adaptor.nil();


                    JOIN583=(Token)match(input,JOIN,FOLLOW_JOIN_in_eid5616); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN583_tree = 
                    (Object)adaptor.create(JOIN583)
                    ;
                    adaptor.addChild(root_0, JOIN583_tree);
                    }

                    }
                    break;
                case 12 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:712:7: CROSS
                    {
                    root_0 = (Object)adaptor.nil();


                    CROSS584=(Token)match(input,CROSS,FOLLOW_CROSS_in_eid5624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS584_tree = 
                    (Object)adaptor.create(CROSS584)
                    ;
                    adaptor.addChild(root_0, CROSS584_tree);
                    }

                    }
                    break;
                case 13 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:713:7: UNION
                    {
                    root_0 = (Object)adaptor.nil();


                    UNION585=(Token)match(input,UNION,FOLLOW_UNION_in_eid5632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION585_tree = 
                    (Object)adaptor.create(UNION585)
                    ;
                    adaptor.addChild(root_0, UNION585_tree);
                    }

                    }
                    break;
                case 14 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:714:7: SPLIT
                    {
                    root_0 = (Object)adaptor.nil();


                    SPLIT586=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_eid5640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT586_tree = 
                    (Object)adaptor.create(SPLIT586)
                    ;
                    adaptor.addChild(root_0, SPLIT586_tree);
                    }

                    }
                    break;
                case 15 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:715:7: INTO
                    {
                    root_0 = (Object)adaptor.nil();


                    INTO587=(Token)match(input,INTO,FOLLOW_INTO_in_eid5648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO587_tree = 
                    (Object)adaptor.create(INTO587)
                    ;
                    adaptor.addChild(root_0, INTO587_tree);
                    }

                    }
                    break;
                case 16 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:716:7: IF
                    {
                    root_0 = (Object)adaptor.nil();


                    IF588=(Token)match(input,IF,FOLLOW_IF_in_eid5656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF588_tree = 
                    (Object)adaptor.create(IF588)
                    ;
                    adaptor.addChild(root_0, IF588_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:717:7: ALL
                    {
                    root_0 = (Object)adaptor.nil();


                    ALL589=(Token)match(input,ALL,FOLLOW_ALL_in_eid5664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL589_tree = 
                    (Object)adaptor.create(ALL589)
                    ;
                    adaptor.addChild(root_0, ALL589_tree);
                    }

                    }
                    break;
                case 18 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:718:7: AS
                    {
                    root_0 = (Object)adaptor.nil();


                    AS590=(Token)match(input,AS,FOLLOW_AS_in_eid5672); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS590_tree = 
                    (Object)adaptor.create(AS590)
                    ;
                    adaptor.addChild(root_0, AS590_tree);
                    }

                    }
                    break;
                case 19 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:719:7: BY
                    {
                    root_0 = (Object)adaptor.nil();


                    BY591=(Token)match(input,BY,FOLLOW_BY_in_eid5680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY591_tree = 
                    (Object)adaptor.create(BY591)
                    ;
                    adaptor.addChild(root_0, BY591_tree);
                    }

                    }
                    break;
                case 20 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:720:7: USING
                    {
                    root_0 = (Object)adaptor.nil();


                    USING592=(Token)match(input,USING,FOLLOW_USING_in_eid5688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING592_tree = 
                    (Object)adaptor.create(USING592)
                    ;
                    adaptor.addChild(root_0, USING592_tree);
                    }

                    }
                    break;
                case 21 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:721:7: INNER
                    {
                    root_0 = (Object)adaptor.nil();


                    INNER593=(Token)match(input,INNER,FOLLOW_INNER_in_eid5696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER593_tree = 
                    (Object)adaptor.create(INNER593)
                    ;
                    adaptor.addChild(root_0, INNER593_tree);
                    }

                    }
                    break;
                case 22 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:722:7: OUTER
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTER594=(Token)match(input,OUTER,FOLLOW_OUTER_in_eid5704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER594_tree = 
                    (Object)adaptor.create(OUTER594)
                    ;
                    adaptor.addChild(root_0, OUTER594_tree);
                    }

                    }
                    break;
                case 23 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:723:7: PARALLEL
                    {
                    root_0 = (Object)adaptor.nil();


                    PARALLEL595=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid5712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL595_tree = 
                    (Object)adaptor.create(PARALLEL595)
                    ;
                    adaptor.addChild(root_0, PARALLEL595_tree);
                    }

                    }
                    break;
                case 24 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:724:7: PARTITION
                    {
                    root_0 = (Object)adaptor.nil();


                    PARTITION596=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_eid5720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION596_tree = 
                    (Object)adaptor.create(PARTITION596)
                    ;
                    adaptor.addChild(root_0, PARTITION596_tree);
                    }

                    }
                    break;
                case 25 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:725:7: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP597=(Token)match(input,GROUP,FOLLOW_GROUP_in_eid5728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP597_tree = 
                    (Object)adaptor.create(GROUP597)
                    ;
                    adaptor.addChild(root_0, GROUP597_tree);
                    }

                    }
                    break;
                case 26 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:726:7: AND
                    {
                    root_0 = (Object)adaptor.nil();


                    AND598=(Token)match(input,AND,FOLLOW_AND_in_eid5736); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND598_tree = 
                    (Object)adaptor.create(AND598)
                    ;
                    adaptor.addChild(root_0, AND598_tree);
                    }

                    }
                    break;
                case 27 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:727:7: OR
                    {
                    root_0 = (Object)adaptor.nil();


                    OR599=(Token)match(input,OR,FOLLOW_OR_in_eid5744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR599_tree = 
                    (Object)adaptor.create(OR599)
                    ;
                    adaptor.addChild(root_0, OR599_tree);
                    }

                    }
                    break;
                case 28 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:728:7: NOT
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT600=(Token)match(input,NOT,FOLLOW_NOT_in_eid5752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT600_tree = 
                    (Object)adaptor.create(NOT600)
                    ;
                    adaptor.addChild(root_0, NOT600_tree);
                    }

                    }
                    break;
                case 29 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:729:7: GENERATE
                    {
                    root_0 = (Object)adaptor.nil();


                    GENERATE601=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_eid5760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE601_tree = 
                    (Object)adaptor.create(GENERATE601)
                    ;
                    adaptor.addChild(root_0, GENERATE601_tree);
                    }

                    }
                    break;
                case 30 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:730:7: FLATTEN
                    {
                    root_0 = (Object)adaptor.nil();


                    FLATTEN602=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid5768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN602_tree = 
                    (Object)adaptor.create(FLATTEN602)
                    ;
                    adaptor.addChild(root_0, FLATTEN602_tree);
                    }

                    }
                    break;
                case 31 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:731:7: ASC
                    {
                    root_0 = (Object)adaptor.nil();


                    ASC603=(Token)match(input,ASC,FOLLOW_ASC_in_eid5776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC603_tree = 
                    (Object)adaptor.create(ASC603)
                    ;
                    adaptor.addChild(root_0, ASC603_tree);
                    }

                    }
                    break;
                case 32 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:732:7: DESC
                    {
                    root_0 = (Object)adaptor.nil();


                    DESC604=(Token)match(input,DESC,FOLLOW_DESC_in_eid5784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC604_tree = 
                    (Object)adaptor.create(DESC604)
                    ;
                    adaptor.addChild(root_0, DESC604_tree);
                    }

                    }
                    break;
                case 33 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:733:7: BOOL
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL605=(Token)match(input,BOOL,FOLLOW_BOOL_in_eid5792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL605_tree = 
                    (Object)adaptor.create(BOOL605)
                    ;
                    adaptor.addChild(root_0, BOOL605_tree);
                    }

                    }
                    break;
                case 34 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:734:7: INT
                    {
                    root_0 = (Object)adaptor.nil();


                    INT606=(Token)match(input,INT,FOLLOW_INT_in_eid5800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT606_tree = 
                    (Object)adaptor.create(INT606)
                    ;
                    adaptor.addChild(root_0, INT606_tree);
                    }

                    }
                    break;
                case 35 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:735:7: LONG
                    {
                    root_0 = (Object)adaptor.nil();


                    LONG607=(Token)match(input,LONG,FOLLOW_LONG_in_eid5808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG607_tree = 
                    (Object)adaptor.create(LONG607)
                    ;
                    adaptor.addChild(root_0, LONG607_tree);
                    }

                    }
                    break;
                case 36 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:736:7: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();


                    FLOAT608=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_eid5816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT608_tree = 
                    (Object)adaptor.create(FLOAT608)
                    ;
                    adaptor.addChild(root_0, FLOAT608_tree);
                    }

                    }
                    break;
                case 37 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:737:7: DOUBLE
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLE609=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid5824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE609_tree = 
                    (Object)adaptor.create(DOUBLE609)
                    ;
                    adaptor.addChild(root_0, DOUBLE609_tree);
                    }

                    }
                    break;
                case 38 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:738:7: CHARARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    CHARARRAY610=(Token)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid5832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY610_tree = 
                    (Object)adaptor.create(CHARARRAY610)
                    ;
                    adaptor.addChild(root_0, CHARARRAY610_tree);
                    }

                    }
                    break;
                case 39 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:739:7: BYTEARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    BYTEARRAY611=(Token)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid5840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY611_tree = 
                    (Object)adaptor.create(BYTEARRAY611)
                    ;
                    adaptor.addChild(root_0, BYTEARRAY611_tree);
                    }

                    }
                    break;
                case 40 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:740:7: BAG
                    {
                    root_0 = (Object)adaptor.nil();


                    BAG612=(Token)match(input,BAG,FOLLOW_BAG_in_eid5848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG612_tree = 
                    (Object)adaptor.create(BAG612)
                    ;
                    adaptor.addChild(root_0, BAG612_tree);
                    }

                    }
                    break;
                case 41 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:741:7: TUPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    TUPLE613=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_eid5856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE613_tree = 
                    (Object)adaptor.create(TUPLE613)
                    ;
                    adaptor.addChild(root_0, TUPLE613_tree);
                    }

                    }
                    break;
                case 42 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:742:7: MAP
                    {
                    root_0 = (Object)adaptor.nil();


                    MAP614=(Token)match(input,MAP,FOLLOW_MAP_in_eid5864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP614_tree = 
                    (Object)adaptor.create(MAP614)
                    ;
                    adaptor.addChild(root_0, MAP614_tree);
                    }

                    }
                    break;
                case 43 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:743:7: IS
                    {
                    root_0 = (Object)adaptor.nil();


                    IS615=(Token)match(input,IS,FOLLOW_IS_in_eid5872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS615_tree = 
                    (Object)adaptor.create(IS615)
                    ;
                    adaptor.addChild(root_0, IS615_tree);
                    }

                    }
                    break;
                case 44 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:744:7: STREAM
                    {
                    root_0 = (Object)adaptor.nil();


                    STREAM616=(Token)match(input,STREAM,FOLLOW_STREAM_in_eid5880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM616_tree = 
                    (Object)adaptor.create(STREAM616)
                    ;
                    adaptor.addChild(root_0, STREAM616_tree);
                    }

                    }
                    break;
                case 45 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:745:7: THROUGH
                    {
                    root_0 = (Object)adaptor.nil();


                    THROUGH617=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_eid5888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH617_tree = 
                    (Object)adaptor.create(THROUGH617)
                    ;
                    adaptor.addChild(root_0, THROUGH617_tree);
                    }

                    }
                    break;
                case 46 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:746:7: STORE
                    {
                    root_0 = (Object)adaptor.nil();


                    STORE618=(Token)match(input,STORE,FOLLOW_STORE_in_eid5896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE618_tree = 
                    (Object)adaptor.create(STORE618)
                    ;
                    adaptor.addChild(root_0, STORE618_tree);
                    }

                    }
                    break;
                case 47 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:747:7: MAPREDUCE
                    {
                    root_0 = (Object)adaptor.nil();


                    MAPREDUCE619=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid5904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE619_tree = 
                    (Object)adaptor.create(MAPREDUCE619)
                    ;
                    adaptor.addChild(root_0, MAPREDUCE619_tree);
                    }

                    }
                    break;
                case 48 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:748:7: SHIP
                    {
                    root_0 = (Object)adaptor.nil();


                    SHIP620=(Token)match(input,SHIP,FOLLOW_SHIP_in_eid5912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP620_tree = 
                    (Object)adaptor.create(SHIP620)
                    ;
                    adaptor.addChild(root_0, SHIP620_tree);
                    }

                    }
                    break;
                case 49 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:749:7: CACHE
                    {
                    root_0 = (Object)adaptor.nil();


                    CACHE621=(Token)match(input,CACHE,FOLLOW_CACHE_in_eid5920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE621_tree = 
                    (Object)adaptor.create(CACHE621)
                    ;
                    adaptor.addChild(root_0, CACHE621_tree);
                    }

                    }
                    break;
                case 50 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:750:7: INPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    INPUT622=(Token)match(input,INPUT,FOLLOW_INPUT_in_eid5928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT622_tree = 
                    (Object)adaptor.create(INPUT622)
                    ;
                    adaptor.addChild(root_0, INPUT622_tree);
                    }

                    }
                    break;
                case 51 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:751:7: OUTPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTPUT623=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid5936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT623_tree = 
                    (Object)adaptor.create(OUTPUT623)
                    ;
                    adaptor.addChild(root_0, OUTPUT623_tree);
                    }

                    }
                    break;
                case 52 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:752:7: STDERROR
                    {
                    root_0 = (Object)adaptor.nil();


                    STDERROR624=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_eid5944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR624_tree = 
                    (Object)adaptor.create(STDERROR624)
                    ;
                    adaptor.addChild(root_0, STDERROR624_tree);
                    }

                    }
                    break;
                case 53 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:753:7: STDIN
                    {
                    root_0 = (Object)adaptor.nil();


                    STDIN625=(Token)match(input,STDIN,FOLLOW_STDIN_in_eid5952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN625_tree = 
                    (Object)adaptor.create(STDIN625)
                    ;
                    adaptor.addChild(root_0, STDIN625_tree);
                    }

                    }
                    break;
                case 54 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:754:7: STDOUT
                    {
                    root_0 = (Object)adaptor.nil();


                    STDOUT626=(Token)match(input,STDOUT,FOLLOW_STDOUT_in_eid5960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT626_tree = 
                    (Object)adaptor.create(STDOUT626)
                    ;
                    adaptor.addChild(root_0, STDOUT626_tree);
                    }

                    }
                    break;
                case 55 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:755:7: LIMIT
                    {
                    root_0 = (Object)adaptor.nil();


                    LIMIT627=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_eid5968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT627_tree = 
                    (Object)adaptor.create(LIMIT627)
                    ;
                    adaptor.addChild(root_0, LIMIT627_tree);
                    }

                    }
                    break;
                case 56 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:756:7: SAMPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    SAMPLE628=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid5976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE628_tree = 
                    (Object)adaptor.create(SAMPLE628)
                    ;
                    adaptor.addChild(root_0, SAMPLE628_tree);
                    }

                    }
                    break;
                case 57 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:757:7: LEFT
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT629=(Token)match(input,LEFT,FOLLOW_LEFT_in_eid5984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT629_tree = 
                    (Object)adaptor.create(LEFT629)
                    ;
                    adaptor.addChild(root_0, LEFT629_tree);
                    }

                    }
                    break;
                case 58 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:758:7: RIGHT
                    {
                    root_0 = (Object)adaptor.nil();


                    RIGHT630=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_eid5992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT630_tree = 
                    (Object)adaptor.create(RIGHT630)
                    ;
                    adaptor.addChild(root_0, RIGHT630_tree);
                    }

                    }
                    break;
                case 59 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:759:7: FULL
                    {
                    root_0 = (Object)adaptor.nil();


                    FULL631=(Token)match(input,FULL,FOLLOW_FULL_in_eid6000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL631_tree = 
                    (Object)adaptor.create(FULL631)
                    ;
                    adaptor.addChild(root_0, FULL631_tree);
                    }

                    }
                    break;
                case 60 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:760:7: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_eid6008);
                    identifier632=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier632.getTree());

                    }
                    break;
                case 61 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:761:7: null_keyword
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_keyword_in_eid6016);
                    null_keyword633=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword633.getTree());

                    }
                    break;
                case 62 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:762:7: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE634=(Token)match(input,TRUE,FOLLOW_TRUE_in_eid6024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE634_tree = 
                    (Object)adaptor.create(TRUE634)
                    ;
                    adaptor.addChild(root_0, TRUE634_tree);
                    }

                    }
                    break;
                case 63 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:763:7: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE635=(Token)match(input,FALSE,FOLLOW_FALSE_in_eid6032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE635_tree = 
                    (Object)adaptor.create(FALSE635)
                    ;
                    adaptor.addChild(root_0, FALSE635_tree);
                    }

                    }
                    break;
                case 64 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:764:7: REALIAS
                    {
                    root_0 = (Object)adaptor.nil();


                    REALIAS636=(Token)match(input,REALIAS,FOLLOW_REALIAS_in_eid6040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIAS636_tree = 
                    (Object)adaptor.create(REALIAS636)
                    ;
                    adaptor.addChild(root_0, REALIAS636_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:768:1: rel_op : ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES );
    public final QueryParser.rel_op_return rel_op() throws RecognitionException {
        QueryParser.rel_op_return retval = new QueryParser.rel_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STR_OP_MATCHES643=null;
        QueryParser.rel_op_eq_return rel_op_eq637 =null;

        QueryParser.rel_op_ne_return rel_op_ne638 =null;

        QueryParser.rel_op_gt_return rel_op_gt639 =null;

        QueryParser.rel_op_gte_return rel_op_gte640 =null;

        QueryParser.rel_op_lt_return rel_op_lt641 =null;

        QueryParser.rel_op_lte_return rel_op_lte642 =null;


        Object STR_OP_MATCHES643_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:768:8: ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES )
            int alt150=7;
            switch ( input.LA(1) ) {
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt150=1;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt150=2;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt150=3;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt150=4;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt150=5;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt150=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt150=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;

            }

            switch (alt150) {
                case 1 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:768:10: rel_op_eq
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_eq_in_rel_op6050);
                    rel_op_eq637=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_eq637.getTree());

                    }
                    break;
                case 2 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:769:10: rel_op_ne
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_ne_in_rel_op6061);
                    rel_op_ne638=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_ne638.getTree());

                    }
                    break;
                case 3 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:770:10: rel_op_gt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_gt_in_rel_op6072);
                    rel_op_gt639=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_gt639.getTree());

                    }
                    break;
                case 4 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:771:10: rel_op_gte
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_gte_in_rel_op6083);
                    rel_op_gte640=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_gte640.getTree());

                    }
                    break;
                case 5 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:772:10: rel_op_lt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_lt_in_rel_op6094);
                    rel_op_lt641=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_lt641.getTree());

                    }
                    break;
                case 6 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:773:10: rel_op_lte
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_lte_in_rel_op6105);
                    rel_op_lte642=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_lte642.getTree());

                    }
                    break;
                case 7 :
                    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:774:10: STR_OP_MATCHES
                    {
                    root_0 = (Object)adaptor.nil();


                    STR_OP_MATCHES643=(Token)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_op6116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES643_tree = 
                    (Object)adaptor.create(STR_OP_MATCHES643)
                    ;
                    adaptor.addChild(root_0, STR_OP_MATCHES643_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_op_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_eq"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:777:1: rel_op_eq : ( STR_OP_EQ | NUM_OP_EQ );
    public final QueryParser.rel_op_eq_return rel_op_eq() throws RecognitionException {
        QueryParser.rel_op_eq_return retval = new QueryParser.rel_op_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set644=null;

        Object set644_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:777:11: ( STR_OP_EQ | NUM_OP_EQ )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set644=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_EQ||input.LA(1)==STR_OP_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set644)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_eq"


    public static class rel_op_ne_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_ne"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:780:1: rel_op_ne : ( STR_OP_NE | NUM_OP_NE );
    public final QueryParser.rel_op_ne_return rel_op_ne() throws RecognitionException {
        QueryParser.rel_op_ne_return retval = new QueryParser.rel_op_ne_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set645=null;

        Object set645_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:780:11: ( STR_OP_NE | NUM_OP_NE )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set645=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_NE||input.LA(1)==STR_OP_NE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set645)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_ne"


    public static class rel_op_gt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gt"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:783:1: rel_op_gt : ( STR_OP_GT | NUM_OP_GT );
    public final QueryParser.rel_op_gt_return rel_op_gt() throws RecognitionException {
        QueryParser.rel_op_gt_return retval = new QueryParser.rel_op_gt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set646=null;

        Object set646_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:783:11: ( STR_OP_GT | NUM_OP_GT )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set646=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_GT||input.LA(1)==STR_OP_GT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set646)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gt"


    public static class rel_op_gte_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gte"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:786:1: rel_op_gte : ( STR_OP_GTE | NUM_OP_GTE );
    public final QueryParser.rel_op_gte_return rel_op_gte() throws RecognitionException {
        QueryParser.rel_op_gte_return retval = new QueryParser.rel_op_gte_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set647=null;

        Object set647_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:786:12: ( STR_OP_GTE | NUM_OP_GTE )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set647=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_GTE||input.LA(1)==STR_OP_GTE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set647)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gte"


    public static class rel_op_lt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lt"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:789:1: rel_op_lt : ( STR_OP_LT | NUM_OP_LT );
    public final QueryParser.rel_op_lt_return rel_op_lt() throws RecognitionException {
        QueryParser.rel_op_lt_return retval = new QueryParser.rel_op_lt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set648=null;

        Object set648_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:789:11: ( STR_OP_LT | NUM_OP_LT )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set648=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_LT||input.LA(1)==STR_OP_LT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set648)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lt"


    public static class rel_op_lte_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lte"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:792:1: rel_op_lte : ( STR_OP_LTE | NUM_OP_LTE );
    public final QueryParser.rel_op_lte_return rel_op_lte() throws RecognitionException {
        QueryParser.rel_op_lte_return retval = new QueryParser.rel_op_lte_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set649=null;

        Object set649_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:792:12: ( STR_OP_LTE | NUM_OP_LTE )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set649=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_LTE||input.LA(1)==STR_OP_LTE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set649)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lte"


    public static class rel_str_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:795:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final QueryParser.rel_str_op_return rel_str_op() throws RecognitionException {
        QueryParser.rel_str_op_return retval = new QueryParser.rel_str_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set650=null;

        Object set650_tree=null;

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:795:12: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set650=(Token)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set650)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"


    public static class null_keyword_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_keyword"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:804:1: null_keyword :{...}? IDENTIFIER_L -> NULL[$IDENTIFIER_L] ;
    public final QueryParser.null_keyword_return null_keyword() throws RecognitionException {
        QueryParser.null_keyword_return retval = new QueryParser.null_keyword_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER_L651=null;

        Object IDENTIFIER_L651_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER_L=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER_L");

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:804:14: ({...}? IDENTIFIER_L -> NULL[$IDENTIFIER_L] )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:804:16: {...}? IDENTIFIER_L
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "null_keyword", "input.LT(1).getText().equalsIgnoreCase(\"NULL\")");
            }

            IDENTIFIER_L651=(Token)match(input,IDENTIFIER_L,FOLLOW_IDENTIFIER_L_in_null_keyword6304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER_L.add(IDENTIFIER_L651);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:6: -> NULL[$IDENTIFIER_L]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NULL, IDENTIFIER_L651)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_keyword"


    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier"
    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:808:1: identifier :{...}? IDENTIFIER_L -> IDENTIFIER[$IDENTIFIER_L] ;
    public final QueryParser.identifier_return identifier() throws RecognitionException {
        QueryParser.identifier_return retval = new QueryParser.identifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER_L652=null;

        Object IDENTIFIER_L652_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER_L=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER_L");

        try {
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:808:12: ({...}? IDENTIFIER_L -> IDENTIFIER[$IDENTIFIER_L] )
            // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:808:14: {...}? IDENTIFIER_L
            {
            if ( !((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "identifier", "!input.LT(1).getText().equalsIgnoreCase(\"NULL\")");
            }

            IDENTIFIER_L652=(Token)match(input,IDENTIFIER_L,FOLLOW_IDENTIFIER_L_in_identifier6325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER_L.add(IDENTIFIER_L652);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:5: -> IDENTIFIER[$IDENTIFIER_L]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(IDENTIFIER, IDENTIFIER_L652)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identifier"

    // $ANTLR start synpred13_QueryParser
    public final void synpred13_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:187:21: ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:187:23: ( alias EQUAL )? FOREACH rel LEFT_CURLY
        {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:187:23: ( alias EQUAL )?
        int alt152=2;
        int LA152_0 = input.LA(1);

        if ( (LA152_0==IDENTIFIER_L) ) {
            alt152=1;
        }
        switch (alt152) {
            case 1 :
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:187:25: alias EQUAL
                {
                pushFollow(FOLLOW_alias_in_synpred13_QueryParser654);
                alias();

                state._fsp--;
                if (state.failed) return ;

                match(input,EQUAL,FOLLOW_EQUAL_in_synpred13_QueryParser656); if (state.failed) return ;

                }
                break;

        }


        match(input,FOREACH,FOLLOW_FOREACH_in_synpred13_QueryParser662); if (state.failed) return ;

        pushFollow(FOLLOW_rel_in_synpred13_QueryParser664);
        rel();

        state._fsp--;
        if (state.failed) return ;

        match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_synpred13_QueryParser666); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_QueryParser

    // $ANTLR start synpred15_QueryParser
    public final void synpred15_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:69: ( SEMI_COLON )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:191:69: SEMI_COLON
        {
        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred15_QueryParser714); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_QueryParser

    // $ANTLR start synpred82_QueryParser
    public final void synpred82_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:12: ( ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:12: ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY
        {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:12: ( BAG )?
        int alt159=2;
        int LA159_0 = input.LA(1);

        if ( (LA159_0==BAG) ) {
            alt159=1;
        }
        switch (alt159) {
            case 1 :
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:12: BAG
                {
                match(input,BAG,FOLLOW_BAG_in_synpred82_QueryParser1942); if (state.failed) return ;

                }
                break;

        }


        match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_synpred82_QueryParser1945); if (state.failed) return ;

        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:28: ( null_keyword COLON ( tuple_type )? )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:30: null_keyword COLON ( tuple_type )?
        {
        pushFollow(FOLLOW_null_keyword_in_synpred82_QueryParser1949);
        null_keyword();

        state._fsp--;
        if (state.failed) return ;

        match(input,COLON,FOLLOW_COLON_in_synpred82_QueryParser1951); if (state.failed) return ;

        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:49: ( tuple_type )?
        int alt160=2;
        int LA160_0 = input.LA(1);

        if ( (LA160_0==LEFT_PAREN||LA160_0==TUPLE) ) {
            alt160=1;
        }
        switch (alt160) {
            case 1 :
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:323:49: tuple_type
                {
                pushFollow(FOLLOW_tuple_type_in_synpred82_QueryParser1953);
                tuple_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_synpred82_QueryParser1958); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred82_QueryParser

    // $ANTLR start synpred103_QueryParser
    public final void synpred103_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:21: ( foreach_clause_complex )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:363:21: foreach_clause_complex
        {
        pushFollow(FOLLOW_foreach_clause_complex_in_synpred103_QueryParser2354);
        foreach_clause_complex();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred103_QueryParser

    // $ANTLR start synpred108_QueryParser
    public final void synpred108_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:26: ( flatten_clause ( AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) ) )? )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:26: flatten_clause ( AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) ) )?
        {
        pushFollow(FOLLOW_flatten_clause_in_synpred108_QueryParser2387);
        flatten_clause();

        state._fsp--;
        if (state.failed) return ;

        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:41: ( AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) ) )?
        int alt164=2;
        int LA164_0 = input.LA(1);

        if ( (LA164_0==AS) ) {
            alt164=1;
        }
        switch (alt164) {
            case 1 :
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:43: AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
                {
                match(input,AS,FOLLOW_AS_in_synpred108_QueryParser2391); if (state.failed) return ;

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:47: ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==IDENTIFIER_L) ) {
                    alt163=1;
                }
                else if ( (LA163_0==LEFT_PAREN) ) {
                    alt163=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 163, 0, input);

                    throw nvae;

                }
                switch (alt163) {
                    case 1 :
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:49: field_def
                        {
                        pushFollow(FOLLOW_field_def_in_synpred108_QueryParser2396);
                        field_def();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:61: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:61: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:366:63: LEFT_PAREN field_def_list RIGHT_PAREN
                        {
                        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred108_QueryParser2402); if (state.failed) return ;

                        pushFollow(FOLLOW_field_def_list_in_synpred108_QueryParser2405);
                        field_def_list();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred108_QueryParser2407); if (state.failed) return ;

                        }


                        }
                        break;

                }


                }
                break;

        }


        }

    }
    // $ANTLR end synpred108_QueryParser

    // $ANTLR start synpred111_QueryParser
    public final void synpred111_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:26: ( col_range ( AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) ) )? )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:26: col_range ( AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) ) )?
        {
        pushFollow(FOLLOW_col_range_in_synpred111_QueryParser2442);
        col_range();

        state._fsp--;
        if (state.failed) return ;

        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:36: ( AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) ) )?
        int alt167=2;
        int LA167_0 = input.LA(1);

        if ( (LA167_0==AS) ) {
            alt167=1;
        }
        switch (alt167) {
            case 1 :
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:38: AS ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
                {
                match(input,AS,FOLLOW_AS_in_synpred111_QueryParser2446); if (state.failed) return ;

                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:42: ( field_def | ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==IDENTIFIER_L) ) {
                    alt166=1;
                }
                else if ( (LA166_0==LEFT_PAREN) ) {
                    alt166=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 166, 0, input);

                    throw nvae;

                }
                switch (alt166) {
                    case 1 :
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:44: field_def
                        {
                        pushFollow(FOLLOW_field_def_in_synpred111_QueryParser2451);
                        field_def();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:56: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        {
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:56: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:367:58: LEFT_PAREN field_def_list RIGHT_PAREN
                        {
                        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred111_QueryParser2457); if (state.failed) return ;

                        pushFollow(FOLLOW_field_def_list_in_synpred111_QueryParser2460);
                        field_def_list();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred111_QueryParser2462); if (state.failed) return ;

                        }


                        }
                        break;

                }


                }
                break;

        }


        }

    }
    // $ANTLR end synpred111_QueryParser

    // $ANTLR start synpred113_QueryParser
    public final void synpred113_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:368:26: ( expr ( AS field_def )? )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:368:26: expr ( AS field_def )?
        {
        pushFollow(FOLLOW_expr_in_synpred113_QueryParser2497);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:368:31: ( AS field_def )?
        int alt168=2;
        int LA168_0 = input.LA(1);

        if ( (LA168_0==AS) ) {
            alt168=1;
        }
        switch (alt168) {
            case 1 :
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:368:33: AS field_def
                {
                match(input,AS,FOLLOW_AS_in_synpred113_QueryParser2501); if (state.failed) return ;

                pushFollow(FOLLOW_field_def_in_synpred113_QueryParser2504);
                field_def();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred113_QueryParser

    // $ANTLR start synpred119_QueryParser
    public final void synpred119_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:390:14: ( LEFT_PAREN cond RIGHT_PAREN )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:390:14: LEFT_PAREN cond RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred119_QueryParser2682); if (state.failed) return ;

        pushFollow(FOLLOW_cond_in_synpred119_QueryParser2685);
        cond();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred119_QueryParser2687); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred119_QueryParser

    // $ANTLR start synpred120_QueryParser
    public final void synpred120_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:391:14: ( not_cond )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:391:14: not_cond
        {
        pushFollow(FOLLOW_not_cond_in_synpred120_QueryParser2703);
        not_cond();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred120_QueryParser

    // $ANTLR start synpred121_QueryParser
    public final void synpred121_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:392:14: ( expr rel_op expr )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:392:14: expr rel_op expr
        {
        pushFollow(FOLLOW_expr_in_synpred121_QueryParser2718);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_rel_op_in_synpred121_QueryParser2720);
        rel_op();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred121_QueryParser2723);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred121_QueryParser

    // $ANTLR start synpred122_QueryParser
    public final void synpred122_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:393:14: ( func_eval )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:393:14: func_eval
        {
        pushFollow(FOLLOW_func_eval_in_synpred122_QueryParser2738);
        func_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred122_QueryParser

    // $ANTLR start synpred133_QueryParser
    public final void synpred133_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:423:13: ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:423:13: LEFT_PAREN type_cast RIGHT_PAREN unary_expr
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred133_QueryParser2951); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_in_synpred133_QueryParser2953);
        type_cast();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred133_QueryParser2955); if (state.failed) return ;

        pushFollow(FOLLOW_unary_expr_in_synpred133_QueryParser2957);
        unary_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred133_QueryParser

    // $ANTLR start synpred140_QueryParser
    public final void synpred140_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:439:14: ( expr_eval )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:439:14: expr_eval
        {
        pushFollow(FOLLOW_expr_eval_in_synpred140_QueryParser3117);
        expr_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred140_QueryParser

    // $ANTLR start synpred141_QueryParser
    public final void synpred141_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:440:14: ( LEFT_PAREN expr RIGHT_PAREN )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:440:14: LEFT_PAREN expr RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred141_QueryParser3133); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred141_QueryParser3135);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred141_QueryParser3137); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred141_QueryParser

    // $ANTLR start synpred142_QueryParser
    public final void synpred142_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:445:13: ( const_expr )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:445:13: const_expr
        {
        pushFollow(FOLLOW_const_expr_in_synpred142_QueryParser3181);
        const_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred142_QueryParser

    // $ANTLR start synpred145_QueryParser
    public final void synpred145_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:19: ( func_eval )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:19: func_eval
        {
        pushFollow(FOLLOW_func_eval_in_synpred145_QueryParser3213);
        func_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred145_QueryParser

    // $ANTLR start synpred146_QueryParser
    public final void synpred146_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:31: ( col_ref )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:31: col_ref
        {
        pushFollow(FOLLOW_col_ref_in_synpred146_QueryParser3217);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred146_QueryParser

    // $ANTLR start synpred147_QueryParser
    public final void synpred147_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:41: ( bin_expr )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:451:41: bin_expr
        {
        pushFollow(FOLLOW_bin_expr_in_synpred147_QueryParser3221);
        bin_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred147_QueryParser

    // $ANTLR start synpred158_QueryParser
    public final void synpred158_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:29: ( INTEGER SEMI_COLON )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:30: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred158_QueryParser3692); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred158_QueryParser3694); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred158_QueryParser

    // $ANTLR start synpred159_QueryParser
    public final void synpred159_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:63: ( LONGINTEGER SEMI_COLON )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:494:64: LONGINTEGER SEMI_COLON
        {
        match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_synpred159_QueryParser3704); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred159_QueryParser3706); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred159_QueryParser

    // $ANTLR start synpred160_QueryParser
    public final void synpred160_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:31: ( DOUBLENUMBER SEMI_COLON )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:497:32: DOUBLENUMBER SEMI_COLON
        {
        match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_synpred160_QueryParser3734); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred160_QueryParser3736); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred160_QueryParser

    // $ANTLR start synpred182_QueryParser
    public final void synpred182_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:19: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA join_item )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:19: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA join_item
        {
        pushFollow(FOLLOW_join_item_in_synpred182_QueryParser4046);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:53: ( OUTER )?
        int alt175=2;
        int LA175_0 = input.LA(1);

        if ( (LA175_0==OUTER) ) {
            alt175=1;
        }
        switch (alt175) {
            case 1 :
                // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:535:53: OUTER
                {
                match(input,OUTER,FOLLOW_OUTER_in_synpred182_QueryParser4062); if (state.failed) return ;

                }
                break;

        }


        match(input,COMMA,FOLLOW_COMMA_in_synpred182_QueryParser4065); if (state.failed) return ;

        pushFollow(FOLLOW_join_item_in_synpred182_QueryParser4068);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred182_QueryParser

    // $ANTLR start synpred185_QueryParser
    public final void synpred185_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:27: ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:27: LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred185_QueryParser4161); if (state.failed) return ;

        pushFollow(FOLLOW_join_group_by_expr_in_synpred185_QueryParser4163);
        join_group_by_expr();

        state._fsp--;
        if (state.failed) return ;

        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:57: ( COMMA join_group_by_expr )*
        loop176:
        do {
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==COMMA) ) {
                alt176=1;
            }


            switch (alt176) {
        	case 1 :
        	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:549:59: COMMA join_group_by_expr
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred185_QueryParser4167); if (state.failed) return ;

        	    pushFollow(FOLLOW_join_group_by_expr_in_synpred185_QueryParser4169);
        	    join_group_by_expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop176;
            }
        } while (true);


        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred185_QueryParser4174); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred185_QueryParser

    // $ANTLR start synpred191_QueryParser
    public final void synpred191_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:23: ( ( nested_command SEMI_COLON )* )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:23: ( nested_command SEMI_COLON )*
        {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:23: ( nested_command SEMI_COLON )*
        loop177:
        do {
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==IDENTIFIER_L) ) {
                alt177=1;
            }


            switch (alt177) {
        	case 1 :
        	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:581:25: nested_command SEMI_COLON
        	    {
        	    pushFollow(FOLLOW_nested_command_in_synpred191_QueryParser4452);
        	    nested_command();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred191_QueryParser4454); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop177;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred191_QueryParser

    // $ANTLR start synpred192_QueryParser
    public final void synpred192_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:586:18: ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:586:20: identifier EQUAL col_ref PERIOD col_ref_list {...}?
        {
        pushFollow(FOLLOW_identifier_in_synpred192_QueryParser4514);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred192_QueryParser4516); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_in_synpred192_QueryParser4518);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        match(input,PERIOD,FOLLOW_PERIOD_in_synpred192_QueryParser4520); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_list_in_synpred192_QueryParser4522);
        col_ref_list();

        state._fsp--;
        if (state.failed) return ;

        if ( !(( input.LA( 1 ) == SEMI_COLON )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred192_QueryParser", " input.LA( 1 ) == SEMI_COLON ");
        }

        }

    }
    // $ANTLR end synpred192_QueryParser

    // $ANTLR start synpred193_QueryParser
    public final void synpred193_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:588:18: ( identifier EQUAL expr )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:588:18: identifier EQUAL expr
        {
        pushFollow(FOLLOW_identifier_in_synpred193_QueryParser4583);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred193_QueryParser4585); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred193_QueryParser4587);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred193_QueryParser

    // $ANTLR start synpred202_QueryParser
    public final void synpred202_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:41: ( INTEGER SEMI_COLON )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:619:42: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred202_QueryParser4902); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred202_QueryParser4904); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred202_QueryParser

    // $ANTLR start synpred210_QueryParser
    public final void synpred210_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:46: ( ( COMMA split_branch )+ )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:46: ( COMMA split_branch )+
        {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:46: ( COMMA split_branch )+
        int cnt178=0;
        loop178:
        do {
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==COMMA) ) {
                alt178=1;
            }


            switch (alt178) {
        	case 1 :
        	    // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:641:48: COMMA split_branch
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred210_QueryParser5065); if (state.failed) return ;

        	    pushFollow(FOLLOW_split_branch_in_synpred210_QueryParser5067);
        	    split_branch();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt178 >= 1 ) break loop178;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(178, input);
                    throw eee;
            }
            cnt178++;
        } while (true);


        }

    }
    // $ANTLR end synpred210_QueryParser

    // $ANTLR start synpred290_QueryParser
    public final void synpred290_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:760:7: ( identifier )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:760:7: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred290_QueryParser6008);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred290_QueryParser

    // $ANTLR start synpred291_QueryParser
    public final void synpred291_QueryParser_fragment() throws RecognitionException {
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:761:7: ( null_keyword )
        // /Users/wrvhage/Dropbox/teaching/Information_Retrieval_2012_2013/Distributed/pig-0.10.0-lucene/src//org/apache/pig/parser/QueryParser.g:761:7: null_keyword
        {
        pushFollow(FOLLOW_null_keyword_in_synpred291_QueryParser6016);
        null_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred291_QueryParser

    // Delegated rules

    public final boolean synpred158_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA50 dfa50 = new DFA50(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA149 dfa149 = new DFA149(this);
    static final String DFA50_eotS =
        "\u00c2\uffff";
    static final String DFA50_eofS =
        "\1\uffff\77\101\4\uffff\176\101";
    static final String DFA50_minS =
        "\1\4\77\6\1\4\2\uffff\1\4\176\6";
    static final String DFA50_maxS =
        "\1\u0094\77\135\1\u0094\2\uffff\1\u0094\176\135";
    static final String DFA50_acceptS =
        "\101\uffff\1\1\1\2\177\uffff";
    static final String DFA50_specialS =
        "\u00c2\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\21\1\32\1\22\1\37\1\50\1\uffff\1\23\1\47\1\61\1\46\1\12\2"+
            "\uffff\1\14\1\uffff\1\4\1\40\1\uffff\1\11\3\uffff\1\45\4\uffff"+
            "\1\76\1\6\1\36\1\44\2\uffff\1\7\1\73\1\35\1\31\1\uffff\1\74"+
            "\1\20\1\2\1\25\1\62\1\42\1\uffff\1\17\1\53\1\13\1\71\4\uffff"+
            "\1\67\1\5\1\43\1\uffff\1\52\1\57\3\uffff\1\34\7\uffff\1\33\1"+
            "\10\1\uffff\1\26\1\63\1\27\1\30\6\uffff\1\3\1\72\3\uffff\1\70"+
            "\1\uffff\1\60\2\uffff\1\16\1\uffff\1\64\1\65\1\66\1\56\1\54"+
            "\7\1\1\55\1\75\1\51\1\15\1\24\7\uffff\1\41\30\uffff\1\77",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\124\1\135\1\125\1\142\1\153\1\uffff\1\126\1\152\1\164\1"+
            "\151\1\115\2\uffff\1\117\1\uffff\1\107\1\143\1\uffff\1\114\3"+
            "\uffff\1\150\4\uffff\1\u0081\1\111\1\141\1\147\2\uffff\1\112"+
            "\1\176\1\140\1\134\1\uffff\1\177\1\123\1\105\1\130\1\165\1\145"+
            "\1\uffff\1\122\1\156\1\116\1\174\4\uffff\1\172\1\110\1\146\1"+
            "\uffff\1\155\1\162\3\uffff\1\137\7\uffff\1\136\1\113\1\uffff"+
            "\1\131\1\166\1\132\1\133\6\uffff\1\106\1\175\3\uffff\1\173\1"+
            "\uffff\1\163\2\uffff\1\121\1\uffff\1\167\1\170\1\171\1\161\1"+
            "\157\7\104\1\160\1\u0080\1\154\1\120\1\127\7\uffff\1\144\30"+
            "\uffff\1\u0082",
            "",
            "",
            "\1\u0093\1\u009c\1\u0094\1\u00a1\1\u00aa\1\uffff\1\u0095\1"+
            "\u00a9\1\u00b3\1\u00a8\1\u008c\2\uffff\1\u008e\1\uffff\1\u0086"+
            "\1\u00a2\1\uffff\1\u008b\3\uffff\1\u00a7\4\uffff\1\u00c0\1\u0088"+
            "\1\u00a0\1\u00a6\2\uffff\1\u0089\1\u00bd\1\u009f\1\u009b\1\uffff"+
            "\1\u00be\1\u0092\1\u0084\1\u0097\1\u00b4\1\u00a4\1\uffff\1\u0091"+
            "\1\u00ad\1\u008d\1\u00bb\4\uffff\1\u00b9\1\u0087\1\u00a5\1\uffff"+
            "\1\u00ac\1\u00b1\3\uffff\1\u009e\7\uffff\1\u009d\1\u008a\1\uffff"+
            "\1\u0098\1\u00b5\1\u0099\1\u009a\6\uffff\1\u0085\1\u00bc\3\uffff"+
            "\1\u00ba\1\uffff\1\u00b2\2\uffff\1\u0090\1\uffff\1\u00b6\1\u00b7"+
            "\1\u00b8\1\u00b0\1\u00ae\7\u0083\1\u00af\1\u00bf\1\u00ab\1\u008f"+
            "\1\u0096\7\uffff\1\u00a3\30\uffff\1\u00c1",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\100\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\100\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101",
            "\1\101\11\uffff\1\101\7\uffff\1\103\5\uffff\1\101\30\uffff"+
            "\1\102\2\uffff\1\101\24\uffff\1\101\2\uffff\1\103\10\uffff\1"+
            "\101\1\uffff\1\101"
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "333:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );";
        }
    }
    static final String DFA69_eotS =
        "\112\uffff";
    static final String DFA69_eofS =
        "\112\uffff";
    static final String DFA69_minS =
        "\1\4\4\0\105\uffff";
    static final String DFA69_maxS =
        "\1\u0094\4\0\105\uffff";
    static final String DFA69_acceptS =
        "\5\uffff\1\2\1\3\101\uffff\1\4\1\1";
    static final String DFA69_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\105\uffff}>";
    static final String[] DFA69_transitionS = {
            "\5\6\1\uffff\5\6\2\uffff\1\6\1\uffff\2\6\1\uffff\1\6\2\uffff"+
            "\1\4\2\6\1\5\2\uffff\2\6\1\1\1\6\1\uffff\4\6\1\2\1\uffff\1\3"+
            "\15\6\1\uffff\7\6\2\uffff\1\6\7\uffff\2\6\1\uffff\4\6\5\uffff"+
            "\3\6\3\uffff\1\6\1\uffff\1\6\2\uffff\1\6\1\110\21\6\7\uffff"+
            "\1\6\30\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "366:1: flatten_generated_item : ( flatten_clause ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? | col_range ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( field_def | ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_1 = input.LA(1);

                         
                        int index69_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred108_QueryParser()) ) {s = 73;}

                        else if ( (synpred113_QueryParser()) ) {s = 6;}

                         
                        input.seek(index69_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA69_2 = input.LA(1);

                         
                        int index69_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred111_QueryParser()) ) {s = 5;}

                        else if ( (synpred113_QueryParser()) ) {s = 6;}

                         
                        input.seek(index69_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA69_3 = input.LA(1);

                         
                        int index69_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred111_QueryParser()&&synpred111_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 5;}

                        else if ( (((synpred113_QueryParser()&&synpred113_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 6;}

                         
                        input.seek(index69_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA69_4 = input.LA(1);

                         
                        int index69_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred111_QueryParser()) ) {s = 5;}

                        else if ( (synpred113_QueryParser()) ) {s = 6;}

                         
                        input.seek(index69_4);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA73_eotS =
        "\114\uffff";
    static final String DFA73_eofS =
        "\114\uffff";
    static final String DFA73_minS =
        "\1\4\106\0\5\uffff";
    static final String DFA73_maxS =
        "\1\u0094\106\0\5\uffff";
    static final String DFA73_acceptS =
        "\107\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String DFA73_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\5\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\33\1\44\1\34\1\50\1\61\1\uffff\1\35\1\60\1\72\1\57\1\24\2"+
            "\uffff\1\26\1\uffff\1\16\1\51\1\uffff\1\23\2\uffff\1\106\1\56"+
            "\1\4\3\uffff\1\10\1\20\1\47\1\55\1\uffff\1\4\1\21\1\104\1\46"+
            "\1\43\1\uffff\1\6\1\32\1\14\1\37\1\73\1\53\1\4\1\31\1\64\1\25"+
            "\1\102\1\11\1\12\1\1\1\uffff\1\100\1\17\1\54\1\4\1\63\1\70\1"+
            "\3\2\uffff\1\2\7\uffff\1\45\1\22\1\uffff\1\40\1\74\1\41\1\42"+
            "\5\uffff\1\5\1\15\1\103\3\uffff\1\101\1\uffff\1\71\2\uffff\1"+
            "\30\1\uffff\1\75\1\76\1\77\1\67\1\65\7\13\1\66\1\7\1\62\1\27"+
            "\1\36\7\uffff\1\52\30\uffff\1\105",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "390:1: unary_cond : ( LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | expr rel_op ^ expr | func_eval | null_check_cond );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred119_QueryParser()) ) {s = 71;}

                        else if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_2 = input.LA(1);

                         
                        int index73_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred120_QueryParser()) ) {s = 74;}

                        else if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_3 = input.LA(1);

                         
                        int index73_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_4 = input.LA(1);

                         
                        int index73_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_4);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA73_5 = input.LA(1);

                         
                        int index73_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_5);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA73_6 = input.LA(1);

                         
                        int index73_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred121_QueryParser()&&synpred121_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 72;}

                        else if ( (((synpred122_QueryParser()&&synpred122_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 75;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 73;}

                         
                        input.seek(index73_6);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA73_7 = input.LA(1);

                         
                        int index73_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_7);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA73_8 = input.LA(1);

                         
                        int index73_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_8);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA73_9 = input.LA(1);

                         
                        int index73_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_9);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA73_10 = input.LA(1);

                         
                        int index73_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_10);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA73_11 = input.LA(1);

                         
                        int index73_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_11);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA73_12 = input.LA(1);

                         
                        int index73_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_12);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA73_13 = input.LA(1);

                         
                        int index73_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_13);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA73_14 = input.LA(1);

                         
                        int index73_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_14);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA73_15 = input.LA(1);

                         
                        int index73_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_15);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA73_16 = input.LA(1);

                         
                        int index73_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_16);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA73_17 = input.LA(1);

                         
                        int index73_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_17);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA73_18 = input.LA(1);

                         
                        int index73_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_18);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA73_19 = input.LA(1);

                         
                        int index73_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_19);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA73_20 = input.LA(1);

                         
                        int index73_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_20);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA73_21 = input.LA(1);

                         
                        int index73_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_21);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA73_22 = input.LA(1);

                         
                        int index73_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_22);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA73_23 = input.LA(1);

                         
                        int index73_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_23);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA73_24 = input.LA(1);

                         
                        int index73_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_24);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA73_25 = input.LA(1);

                         
                        int index73_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_25);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA73_26 = input.LA(1);

                         
                        int index73_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_26);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA73_27 = input.LA(1);

                         
                        int index73_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_27);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA73_28 = input.LA(1);

                         
                        int index73_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_28);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA73_29 = input.LA(1);

                         
                        int index73_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_29);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA73_30 = input.LA(1);

                         
                        int index73_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_30);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA73_31 = input.LA(1);

                         
                        int index73_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_31);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA73_32 = input.LA(1);

                         
                        int index73_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_32);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA73_33 = input.LA(1);

                         
                        int index73_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_33);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA73_34 = input.LA(1);

                         
                        int index73_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_34);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA73_35 = input.LA(1);

                         
                        int index73_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_35);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA73_36 = input.LA(1);

                         
                        int index73_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_36);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA73_37 = input.LA(1);

                         
                        int index73_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_37);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA73_38 = input.LA(1);

                         
                        int index73_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_38);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA73_39 = input.LA(1);

                         
                        int index73_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_39);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA73_40 = input.LA(1);

                         
                        int index73_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_40);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA73_41 = input.LA(1);

                         
                        int index73_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_41);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA73_42 = input.LA(1);

                         
                        int index73_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_42);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA73_43 = input.LA(1);

                         
                        int index73_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_43);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA73_44 = input.LA(1);

                         
                        int index73_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_44);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA73_45 = input.LA(1);

                         
                        int index73_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_45);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA73_46 = input.LA(1);

                         
                        int index73_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_46);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA73_47 = input.LA(1);

                         
                        int index73_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_47);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA73_48 = input.LA(1);

                         
                        int index73_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_48);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA73_49 = input.LA(1);

                         
                        int index73_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_49);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA73_50 = input.LA(1);

                         
                        int index73_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_50);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA73_51 = input.LA(1);

                         
                        int index73_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_51);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA73_52 = input.LA(1);

                         
                        int index73_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_52);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA73_53 = input.LA(1);

                         
                        int index73_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_53);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA73_54 = input.LA(1);

                         
                        int index73_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_54);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA73_55 = input.LA(1);

                         
                        int index73_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_55);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA73_56 = input.LA(1);

                         
                        int index73_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_56);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA73_57 = input.LA(1);

                         
                        int index73_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_57);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA73_58 = input.LA(1);

                         
                        int index73_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_58);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA73_59 = input.LA(1);

                         
                        int index73_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_59);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA73_60 = input.LA(1);

                         
                        int index73_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_60);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA73_61 = input.LA(1);

                         
                        int index73_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_61);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA73_62 = input.LA(1);

                         
                        int index73_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_62);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA73_63 = input.LA(1);

                         
                        int index73_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_63);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA73_64 = input.LA(1);

                         
                        int index73_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_64);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA73_65 = input.LA(1);

                         
                        int index73_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_65);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA73_66 = input.LA(1);

                         
                        int index73_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_66);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA73_67 = input.LA(1);

                         
                        int index73_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_67);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA73_68 = input.LA(1);

                         
                        int index73_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_68);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA73_69 = input.LA(1);

                         
                        int index73_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (synpred122_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_69);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA73_70 = input.LA(1);

                         
                        int index73_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred121_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index73_70);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA80_eotS =
        "\110\uffff";
    static final String DFA80_eofS =
        "\110\uffff";
    static final String DFA80_minS =
        "\1\4\1\0\106\uffff";
    static final String DFA80_maxS =
        "\1\u0094\1\0\106\uffff";
    static final String DFA80_acceptS =
        "\2\uffff\1\2\104\uffff\1\1";
    static final String DFA80_specialS =
        "\1\uffff\1\0\106\uffff}>";
    static final String[] DFA80_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff"+
            "\3\2\3\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\1\1\uffff\7\2\2"+
            "\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\21\2\7\uffff\1\2\30\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "423:1: cast_expr : ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_1 = input.LA(1);

                         
                        int index80_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred133_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index80_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA85_eotS =
        "\111\uffff";
    static final String DFA85_eofS =
        "\111\uffff";
    static final String DFA85_minS =
        "\1\4\1\0\7\uffff\1\0\77\uffff";
    static final String DFA85_maxS =
        "\1\u0094\1\0\7\uffff\1\0\77\uffff";
    static final String DFA85_acceptS =
        "\2\uffff\1\1\104\uffff\1\3\1\2";
    static final String DFA85_specialS =
        "\1\uffff\1\0\7\uffff\1\1\77\uffff}>";
    static final String[] DFA85_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff"+
            "\3\2\3\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\11\1\uffff\6\2\1"+
            "\1\2\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\3\2\3\uffff\1"+
            "\2\1\uffff\1\2\2\uffff\1\2\1\uffff\21\2\7\uffff\1\2\30\uffff"+
            "\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "439:1: unary_expr : ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_1 = input.LA(1);

                         
                        int index85_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_QueryParser()) ) {s = 2;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index85_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA85_9 = input.LA(1);

                         
                        int index85_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_QueryParser()) ) {s = 2;}

                        else if ( (synpred141_QueryParser()) ) {s = 72;}

                         
                        input.seek(index85_9);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA86_eotS =
        "\107\uffff";
    static final String DFA86_eofS =
        "\107\uffff";
    static final String DFA86_minS =
        "\1\4\3\uffff\6\0\75\uffff";
    static final String DFA86_maxS =
        "\1\u0094\3\uffff\6\0\75\uffff";
    static final String DFA86_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\74\uffff";
    static final String DFA86_specialS =
        "\4\uffff\1\0\1\1\1\2\1\3\1\4\1\5\75\uffff}>";
    static final String[] DFA86_transitionS = {
            "\5\12\1\uffff\5\12\2\uffff\1\12\1\uffff\2\12\1\uffff\1\12\2"+
            "\uffff\2\12\1\1\3\uffff\1\6\3\12\1\uffff\1\1\4\12\1\uffff\1"+
            "\4\5\12\1\1\4\12\1\7\1\10\1\11\1\uffff\3\12\1\1\2\12\1\1\2\uffff"+
            "\1\12\7\uffff\2\12\1\uffff\4\12\5\uffff\1\1\2\12\3\uffff\1\12"+
            "\1\uffff\1\12\2\uffff\1\12\1\uffff\15\12\1\5\3\12\7\uffff\1"+
            "\12\30\uffff\1\12",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "445:1: expr_eval : ( const_expr | var_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_4 = input.LA(1);

                         
                        int index86_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((input.LT(1).getText().equalsIgnoreCase("NULL"))&&(input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred142_QueryParser())) ) {s = 1;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 10;}

                         
                        input.seek(index86_4);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA86_5 = input.LA(1);

                         
                        int index86_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred142_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index86_5);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA86_6 = input.LA(1);

                         
                        int index86_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred142_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index86_6);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA86_7 = input.LA(1);

                         
                        int index86_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred142_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index86_7);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA86_8 = input.LA(1);

                         
                        int index86_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred142_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index86_8);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA86_9 = input.LA(1);

                         
                        int index86_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred142_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index86_9);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA88_eotS =
        "\105\uffff";
    static final String DFA88_eofS =
        "\105\uffff";
    static final String DFA88_minS =
        "\1\4\30\uffff\1\0\42\uffff\1\0\4\uffff\1\0\3\uffff";
    static final String DFA88_maxS =
        "\1\u0094\30\uffff\1\0\42\uffff\1\0\4\uffff\1\0\3\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\1\76\uffff\1\2\1\uffff\1\4\1\uffff\1\3";
    static final String DFA88_specialS =
        "\31\uffff\1\0\42\uffff\1\1\4\uffff\1\2\3\uffff}>";
    static final String[] DFA88_transitionS = {
            "\5\1\1\uffff\5\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff"+
            "\1\100\1\1\4\uffff\4\1\2\uffff\3\1\1\31\1\uffff\1\74\5\1\1\uffff"+
            "\4\1\2\102\1\101\1\uffff\3\1\1\uffff\2\1\3\uffff\1\1\7\uffff"+
            "\2\1\1\uffff\4\1\6\uffff\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\21\1\7\uffff\1\1\30\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "451:1: projectable_expr : ( func_eval | col_ref | bin_expr | type_conversion );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_25 = input.LA(1);

                         
                        int index88_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred145_QueryParser()) ) {s = 1;}

                        else if ( (synpred146_QueryParser()) ) {s = 64;}

                         
                        input.seek(index88_25);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA88_60 = input.LA(1);

                         
                        int index88_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred145_QueryParser()&&synpred145_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 1;}

                        else if ( (((synpred146_QueryParser()&&synpred146_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 64;}

                         
                        input.seek(index88_60);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA88_65 = input.LA(1);

                         
                        int index88_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred147_QueryParser()) ) {s = 68;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index88_65);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA117_eotS =
        "\112\uffff";
    static final String DFA117_eofS =
        "\112\uffff";
    static final String DFA117_minS =
        "\1\4\1\0\110\uffff";
    static final String DFA117_maxS =
        "\1\u0094\1\0\110\uffff";
    static final String DFA117_acceptS =
        "\2\uffff\1\2\106\uffff\1\1";
    static final String DFA117_specialS =
        "\1\uffff\1\0\110\uffff}>";
    static final String[] DFA117_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff"+
            "\4\2\2\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\1\1\uffff\7\2\2"+
            "\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\1\2\2\uffff\23\2\7\uffff\1\2\30\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "549:1: join_group_by_expr_list : ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred185_QueryParser()) ) {s = 73;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index117_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA123_eotS =
        "\37\uffff";
    static final String DFA123_eofS =
        "\37\uffff";
    static final String DFA123_minS =
        "\1\52\1\35\1\4\3\27\1\uffff\6\30\1\4\1\31\1\uffff\3\0\1\31\2\0\1"+
        "\uffff\3\20\1\31\1\0\3\20";
    static final String DFA123_maxS =
        "\1\52\1\35\1\u0094\3\142\1\uffff\6\122\1\u0094\1\67\1\uffff\3\0"+
        "\1\52\2\0\1\uffff\3\133\1\52\1\0\3\133";
    static final String DFA123_acceptS =
        "\6\uffff\1\2\10\uffff\1\3\6\uffff\1\1\10\uffff";
    static final String DFA123_specialS =
        "\20\uffff\1\0\1\5\1\4\1\uffff\1\2\1\3\5\uffff\1\1\3\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\1",
            "\1\2",
            "\5\6\1\uffff\5\6\2\uffff\1\13\1\uffff\2\6\1\uffff\1\12\2\uffff"+
            "\1\5\2\6\3\uffff\1\6\1\7\2\6\1\uffff\1\6\1\10\2\6\1\3\1\uffff"+
            "\1\4\15\6\1\uffff\1\14\6\6\2\uffff\1\6\7\uffff\1\6\1\11\1\uffff"+
            "\4\6\5\uffff\3\6\3\uffff\1\6\1\uffff\1\6\2\uffff\1\6\1\uffff"+
            "\21\6\7\uffff\1\6\30\uffff\1\6",
            "\2\6\36\uffff\1\6\7\uffff\1\6\21\uffff\1\6\1\15\2\6\10\uffff"+
            "\1\6\4\uffff\1\6",
            "\2\6\36\uffff\1\6\7\uffff\1\6\21\uffff\1\6\1\15\2\6\10\uffff"+
            "\1\6\4\uffff\1\6",
            "\1\6\47\uffff\1\6\21\uffff\1\6\1\16\2\6\10\uffff\1\6\4\uffff"+
            "\1\6",
            "",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\5\6\1\uffff\5\6\2\uffff\1\6\1\uffff\2\6\1\uffff\1\6\2\uffff"+
            "\1\22\1\6\4\uffff\4\6\2\uffff\3\6\1\20\1\uffff\1\21\5\6\1\uffff"+
            "\4\6\2\uffff\1\23\1\uffff\3\6\1\uffff\2\6\3\uffff\1\6\7\uffff"+
            "\2\6\1\uffff\4\6\6\uffff\2\6\3\uffff\1\6\1\uffff\1\6\2\uffff"+
            "\1\6\1\uffff\21\6\7\uffff\1\6\30\uffff\1\6",
            "\1\22\16\uffff\1\24\1\uffff\1\25\14\uffff\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\31\16\uffff\1\27\1\uffff\1\30",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33",
            "\1\36\16\uffff\1\34\1\uffff\1\35",
            "\1\uffff",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33"
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "586:1: nested_command : ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_16 = input.LA(1);

                         
                        int index123_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred192_QueryParser()&&synpred192_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred193_QueryParser())) ) {s = 6;}

                         
                        input.seek(index123_16);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_27 = input.LA(1);

                         
                        int index123_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred192_QueryParser()&&synpred192_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred193_QueryParser())) ) {s = 6;}

                         
                        input.seek(index123_27);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA123_20 = input.LA(1);

                         
                        int index123_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred192_QueryParser()&&synpred192_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred193_QueryParser())) ) {s = 6;}

                         
                        input.seek(index123_20);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA123_21 = input.LA(1);

                         
                        int index123_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred192_QueryParser()&&synpred192_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred193_QueryParser())) ) {s = 6;}

                         
                        input.seek(index123_21);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA123_18 = input.LA(1);

                         
                        int index123_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred192_QueryParser()&&synpred192_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred193_QueryParser())) ) {s = 6;}

                         
                        input.seek(index123_18);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA123_17 = input.LA(1);

                         
                        int index123_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred192_QueryParser()&&synpred192_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred193_QueryParser())) ) {s = 6;}

                         
                        input.seek(index123_17);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA149_eotS =
        "\102\uffff";
    static final String DFA149_eofS =
        "\102\uffff";
    static final String DFA149_minS =
        "\1\4\73\uffff\1\0\5\uffff";
    static final String DFA149_maxS =
        "\1\u0094\73\uffff\1\0\5\uffff";
    static final String DFA149_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\uffff\1\76\1\77\1\100"+
        "\1\74\1\75";
    static final String DFA149_specialS =
        "\74\uffff\1\0\5\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\21\1\32\1\22\1\37\1\50\1\uffff\1\23\1\47\1\61\1\46\1\12\2"+
            "\uffff\1\14\1\uffff\1\4\1\40\1\uffff\1\11\3\uffff\1\45\4\uffff"+
            "\1\76\1\6\1\36\1\44\2\uffff\1\7\1\73\1\35\1\31\1\uffff\1\74"+
            "\1\20\1\2\1\25\1\62\1\42\1\uffff\1\17\1\53\1\13\1\71\4\uffff"+
            "\1\67\1\5\1\43\1\uffff\1\52\1\57\3\uffff\1\34\7\uffff\1\33\1"+
            "\10\1\uffff\1\26\1\63\1\27\1\30\6\uffff\1\3\1\72\3\uffff\1\70"+
            "\1\uffff\1\60\2\uffff\1\16\1\uffff\1\64\1\65\1\66\1\56\1\54"+
            "\7\1\1\55\1\75\1\51\1\15\1\24\7\uffff\1\41\30\uffff\1\77",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "701:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE | REALIAS );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_60 = input.LA(1);

                         
                        int index149_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred290_QueryParser()&&synpred290_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 64;}

                        else if ( (((synpred291_QueryParser()&&synpred291_QueryParser())&&(input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 65;}

                         
                        input.seek(index149_60);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_statement_in_query356 = new BitSet(new long[]{0x46881521004A4000L,0x000400C230000800L});
    public static final BitSet FOLLOW_EOF_in_query359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_statement_in_statement399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_statement413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_statement_in_statement427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_statement_in_statement443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realias_statement_in_statement479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_clause_in_import_statement488 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_import_statement490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_clause_in_inline_statement500 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_inline_statement502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_split_statement512 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_split_statement514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_general_statement526 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_general_statement528 = new BitSet(new long[]{0x46880101004A4000L,0x000400C010000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement534 = new BitSet(new long[]{0x0000000000000000L,0x0000000020008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement536 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_general_statement541 = new BitSet(new long[]{0x46080101004A4000L,0x000400C010000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement543 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement545 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_general_statement548 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_general_statement551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realias_clause_in_realias_statement594 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_realias_statement596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_realias_clause606 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_realias_clause608 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_identifier_in_realias_clause610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause634 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_complex_statement_in_foreach_statement672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_simple_statement_in_foreach_statement694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_foreach_complex_statement705 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_complex_statement707 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_foreach_complex_statement712 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_complex_statement714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_foreach_simple_statement764 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_simple_statement766 = new BitSet(new long[]{0x0080002000000000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_foreach_simple_statement772 = new BitSet(new long[]{0x0000000000000000L,0x0000000020008000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_simple_statement774 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_foreach_simple_statement828 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_foreach_simple_statement830 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_simple_statement832 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_foreach_simple_statement835 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_simple_statement838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alias887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_parameter901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_parameter910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_parameter919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_parameter927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_parameter935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_content944 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000003FFFFFFFL});
    public static final BitSet FOLLOW_content_in_content948 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000003FFFFFFFL});
    public static final BitSet FOLLOW_set_in_content952 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000003FFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_content964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause1002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause1030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause1044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause1100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause1114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause1128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause1142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause1156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_macro_param_clause1165 = new BitSet(new long[]{0x0000040000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_alias_in_macro_param_clause1169 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_macro_param_clause1172 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_macro_param_clause1174 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_macro_param_clause1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_macro_return_clause1208 = new BitSet(new long[]{0x0000040000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_alias_in_macro_return_clause1212 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_macro_return_clause1215 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_macro_return_clause1217 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_VOID_in_macro_return_clause1224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_content_in_macro_body_clause1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_param_clause_in_macro_clause1273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_macro_return_clause_in_macro_clause1275 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_macro_body_clause_in_macro_clause1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1307 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1322 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_inline_return_clause1325 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1327 = new BitSet(new long[]{0x0000000020010000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_inline_param_clause1360 = new BitSet(new long[]{0x000104000A000000L,0x0000000008400000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1364 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_param_clause1367 = new BitSet(new long[]{0x000104000A000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1369 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_inline_param_clause1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_return_clause_in_inline_clause1398 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_inline_clause1400 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_inline_param_clause_in_inline_clause1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_import_clause1427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_import_clause1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause1439 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_define_clause1442 = new BitSet(new long[]{0x6E9EFDE7C45A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cmd_in_define_clause1446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_clause_in_define_clause1450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_clause_in_define_clause1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd1464 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_ship_clause_in_cmd1469 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd1473 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_input_clause_in_cmd1477 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_output_clause_in_cmd1481 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_error_clause_in_cmd1485 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause1497 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_ship_clause1500 = new BitSet(new long[]{0x0000000000000000L,0x0000000008400000L});
    public static final BitSet FOLLOW_path_list_in_ship_clause1503 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_ship_clause1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list1516 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_path_list1520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list1522 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause1549 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cache_clause1552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_path_list_in_cache_clause1555 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cache_clause1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_input_clause1567 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_input_clause1570 = new BitSet(new long[]{0x0000000000000000L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_input_clause1573 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_input_clause1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list1585 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_stream_cmd_list1589 = new BitSet(new long[]{0x0000000000000000L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list1591 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_set_in_stream_cmd1623 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_stream_cmd1640 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause1659 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_output_clause1662 = new BitSet(new long[]{0x0000000000000000L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_output_clause1665 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_output_clause1667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause1677 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_error_clause1680 = new BitSet(new long[]{0x0000000000000000L,0x0000000008400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause1685 = new BitSet(new long[]{0x0200000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LIMIT_in_error_clause1689 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause1692 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_error_clause1700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load_clause1710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_load_clause1713 = new BitSet(new long[]{0x0000000000000042L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_load_clause1717 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_func_clause_in_load_clause1720 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_as_clause_in_load_clause1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_filename1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_as_clause1743 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_field_def_in_as_clause1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_as_clause1754 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause1757 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_as_clause1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_field_def1773 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COLON_in_field_def1777 = new BitSet(new long[]{0x28E0800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_in_field_def1779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_field_def_list1813 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_field_def_list1817 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_in_field_def_list1819 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_simple_type_in_type1850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_in_type1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_type1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_type1904 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple_type1907 = new BitSet(new long[]{0x0000040000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_field_def_list_in_tuple_type1909 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple_type1912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type1942 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type1945 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_null_keyword_in_bag_type1949 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bag_type1951 = new BitSet(new long[]{0x0080000000000000L,0x0002000004000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type1953 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type1990 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type1993 = new BitSet(new long[]{0x0080040000000000L,0x0002000004000000L});
    public static final BitSet FOLLOW_identifier_in_bag_type1999 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bag_type2001 = new BitSet(new long[]{0x0080000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type2006 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_map_type2042 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map_type2045 = new BitSet(new long[]{0x28E0800404002B00L,0x0002000002000000L});
    public static final BitSet FOLLOW_type_in_map_type2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map_type2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2115 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_clause2117 = new BitSet(new long[]{0x0000000000000000L,0x0000000008400002L});
    public static final BitSet FOLLOW_func_args_in_func_clause2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_clause2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_in_func_name2155 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_set_in_func_name2159 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_eid_in_func_name2169 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2194 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_func_args2198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400002L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2200 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_set_in_group_clause2226 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_group_item_list_in_group_clause2237 = new BitSet(new long[]{0x0000000000000002L,0x0008000000010000L});
    public static final BitSet FOLLOW_USING_in_group_clause2241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_group_type_in_group_clause2244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause2249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_type2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2268 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_group_item_list2272 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2274 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_rel_in_group_item2306 = new BitSet(new long[]{0x0000000000000410L,0x0040000000000000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item2310 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_group_item2314 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ANY_in_group_item2318 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_alias_in_rel2340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_rel2349 = new BitSet(new long[]{0x46080121004A4000L,0x000400C010000800L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_rel2354 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_op_clause_in_rel2362 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_rel2366 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_parallel_clause_in_rel2370 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_rel2377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item2387 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2391 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2402 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2405 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_flatten_generated_item2442 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2446 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2457 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_flatten_generated_item2497 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2501 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_flatten_generated_item2534 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2538 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2549 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2552 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause2572 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_clause2575 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_flatten_clause2578 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_clause2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_store_clause2590 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_store_clause2593 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_INTO_in_store_clause2595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_store_clause2598 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_store_clause2602 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_func_clause_in_store_clause2605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause2617 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_filter_clause2620 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_filter_clause2622 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cond_in_filter_clause2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_cond_in_cond2634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_cond_in_or_cond2643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_OR_in_or_cond2648 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_and_cond_in_or_cond2651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_unary_cond_in_and_cond2663 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AND_in_and_cond2667 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_unary_cond_in_and_cond2670 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_cond2682 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cond_in_unary_cond2685 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_cond2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_cond_in_unary_cond2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_unary_cond2718 = new BitSet(new long[]{0x0000000000000000L,0x00007F00000001F8L});
    public static final BitSet FOLLOW_rel_op_in_unary_cond2720 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_unary_cond2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_unary_cond2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_check_cond_in_unary_cond2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_not_cond2762 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_unary_cond_in_not_cond2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_eval2774 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_eval2776 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE59C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_real_arg_list_in_func_eval2778 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_eval2781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_real_arg_in_real_arg_list2813 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_real_arg_list2817 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_real_arg_in_real_arg_list2819 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_expr_in_real_arg2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg2853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_null_check_cond2866 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_IS_in_null_check_cond2868 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_in_null_check_cond2871 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_null_keyword_in_null_check_cond2874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_expr_in_expr2884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_expr_in_add_expr2893 = new BitSet(new long[]{0x8000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_set_in_add_expr2897 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_multi_expr_in_add_expr2908 = new BitSet(new long[]{0x8000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr2920 = new BitSet(new long[]{0x0000000000800002L,0x0000000400020000L});
    public static final BitSet FOLLOW_set_in_multi_expr2924 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr2939 = new BitSet(new long[]{0x0000000000800002L,0x0000000400020000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr2951 = new BitSet(new long[]{0x2820800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_cast_in_cast_expr2953 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr2955 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_unary_expr_in_cast_expr2957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expr_in_cast_expr2992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_type_cast3001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type_cast3005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_cast_in_type_cast3009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_cast_in_type_cast3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_type_cast3022 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple_type_cast3024 = new BitSet(new long[]{0x2820800404002B00L,0x0002000008000000L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast3028 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_tuple_type_cast3032 = new BitSet(new long[]{0x2820800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast3034 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple_type_cast3042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type_cast3077 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type_cast3079 = new BitSet(new long[]{0x0000000000000000L,0x0002000004000000L});
    public static final BitSet FOLLOW_tuple_type_cast_in_bag_type_cast3081 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type_cast3084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eval_in_unary_expr3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_expr3133 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_unary_expr3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_expr3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_expr_in_unary_expr3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_expr_eval3181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_expr_in_expr_eval3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_projectable_expr_in_var_expr3194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_dot_proj_in_var_expr3198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_pound_proj_in_var_expr3202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_func_eval_in_projectable_expr3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_projectable_expr3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_projectable_expr3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_conversion_in_projectable_expr3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_type_conversion3234 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_real_arg_list_in_type_conversion3236 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_type_conversion3238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_type_conversion3285 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_real_arg_list_in_type_conversion3287 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_type_conversion3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_type_conversion3336 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_real_arg_in_type_conversion3338 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_type_conversion3342 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_real_arg_in_type_conversion3344 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_type_conversion3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_dot_proj3387 = new BitSet(new long[]{0x0080050002000000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_dot_proj3416 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3418 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_dot_proj3422 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3424 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_dot_proj3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_alias_in_col_alias_or_index3461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_index_in_col_alias_or_index3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_col_alias3474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_col_alias3478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_col_index3487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range3500 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range3502 = new BitSet(new long[]{0x0000050002000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range3508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range3549 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_col_range3551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_pound_proj3582 = new BitSet(new long[]{0x0000040000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_pound_proj3587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_pound_proj3591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_bin_expr3602 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cond_in_bin_expr3604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_QMARK_in_bin_expr3606 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_bin_expr3612 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bin_expr3614 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_bin_expr3620 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_bin_expr3622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_neg_expr3655 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cast_expr_in_neg_expr3657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause3684 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_limit_clause3687 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTEGER_in_limit_clause3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_limit_clause3711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_limit_clause3715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause3726 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_sample_clause3729 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_sample_clause3741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_sample_clause3745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_order_clause3756 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_order_clause3759 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_order_clause3761 = new BitSet(new long[]{0x0080050012000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause3764 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_order_clause3768 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_func_clause_in_order_clause3771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause3783 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_order_col_list_in_order_by_clause3814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3823 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_order_col_list3827 = new BitSet(new long[]{0x0080050012000000L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3829 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_col_range_in_order_col3860 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_col_ref_in_order_col3883 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_order_col3910 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_order_col3913 = new BitSet(new long[]{0x0000000000100080L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_order_col3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause3936 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_distinct_clause3939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause3941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause3951 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_partition_clause3954 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_func_name_in_partition_clause3957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause3966 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause3969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause3971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_rel_list3981 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_rel_list3985 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_rel_list3987 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_JOIN_in_join_clause4012 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause4015 = new BitSet(new long[]{0x0000000000000002L,0x0008000000010000L});
    public static final BitSet FOLLOW_USING_in_join_clause4019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_join_type_in_join_clause4022 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause4027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type4037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause4046 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_join_sub_clause4048 = new BitSet(new long[]{0x0000000000010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause4062 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause4065 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause4068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_list_in_join_sub_clause4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_item_list4097 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_join_item_list4101 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_item_in_join_item_list4104 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_rel_in_join_item4116 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item4118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause4149 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_join_group_by_expr_list_in_join_group_by_clause4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_join_group_by_expr_list4161 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4163 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_join_group_by_expr_list4167 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4169 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_join_group_by_expr_list4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_join_group_by_expr4239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_join_group_by_expr4244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_join_group_by_expr4248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause4257 = new BitSet(new long[]{0x0080040000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause4260 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_list_in_union_clause4263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause_simple4272 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_foreach_clause_simple4275 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_clause_simple4277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generate_clause_in_foreach_plan_simple4286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause_complex4324 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_foreach_clause_complex4327 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_clause_complex4329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan_complex4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_nested_blk4377 = new BitSet(new long[]{0x0000048000000000L});
    public static final BitSet FOLLOW_nested_command_list_in_nested_blk4380 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_blk4384 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk4386 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_nested_blk4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_generate_clause4401 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause4403 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_generate_clause4407 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause4409 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_nested_command_in_nested_command_list4452 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_command_list4454 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4532 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command4534 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_proj_in_nested_command4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4583 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command4585 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_nested_command4587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4632 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command4634 = new BitSet(new long[]{0x0200002100420000L,0x0000000000000800L});
    public static final BitSet FOLLOW_nested_op_in_nested_command4636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op4671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op4685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op4699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op4713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op4741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj4750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_PERIOD_in_nested_proj4752 = new BitSet(new long[]{0x0080050002000000L});
    public static final BitSet FOLLOW_col_ref_list_in_nested_proj4754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list4788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_col_ref_list4794 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list4796 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_col_ref_list4800 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list4802 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_col_ref_list4807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter4837 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter4840 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_nested_filter4842 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cond_in_nested_filter4845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort4854 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort4857 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_nested_sort4859 = new BitSet(new long[]{0x0080050012000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort4863 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_nested_sort4867 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct4882 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct4885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit4894 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit4897 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit4909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_nested_limit4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross4924 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross4927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach4935 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach4938 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_foreach4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input4953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list4962 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_nested_op_input_list4966 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list4968 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause4993 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_stream_clause4996 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_THROUGH_in_stream_clause4998 = new BitSet(new long[]{0x0000040040000000L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause5003 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_alias_in_stream_clause5007 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause5021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause5024 = new BitSet(new long[]{0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_mr_clause5028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause5031 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_mr_clause5033 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause5039 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause5041 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause5053 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_split_clause5055 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_INTO_in_split_clause5057 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5059 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5065 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5067 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5078 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5080 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5085 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_otherwise_in_split_clause5087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_split_branch5127 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_IF_in_split_branch5129 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cond_in_split_branch5131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_split_otherwise5164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise5166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_col_ref_in_col_ref5197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dollar_col_ref_in_col_ref5201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_alias_col_ref5210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alias_col_ref5214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_dollar_col_ref5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_const_expr5232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal5241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_in_literal5245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_in_literal5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_literal5253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_scalar_in_scalar5263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_scalar5267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_scalar5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_scalar5275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_scalar5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_num_scalar5288 = new BitSet(new long[]{0x1001001008000000L});
    public static final BitSet FOLLOW_set_in_num_scalar5291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map5316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keyvalue_in_map5318 = new BitSet(new long[]{0x0000000000010000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_map5322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keyvalue_in_map5324 = new BitSet(new long[]{0x0000000000010000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map5329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map5351 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_key_in_keyvalue5373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_POUND_in_keyvalue5375 = new BitSet(new long[]{0x90E1041088000000L,0x0001000000400000L});
    public static final BitSet FOLLOW_const_expr_in_keyvalue5377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_map_key5406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag5415 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_tuple_in_bag5417 = new BitSet(new long[]{0x0000000000010000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_bag5421 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_tuple_in_bag5423 = new BitSet(new long[]{0x0000000000010000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag5428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag5450 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag5452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple5472 = new BitSet(new long[]{0x90E1041088000000L,0x0001000000400000L});
    public static final BitSet FOLLOW_literal_in_tuple5474 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_tuple5478 = new BitSet(new long[]{0x90E1041088000000L,0x0001000000400000L});
    public static final BitSet FOLLOW_literal_in_tuple5480 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple5485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple5511 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple5513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_str_op_in_eid5536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid5544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid5576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid5584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid5592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid5600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid5608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid5624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid5632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid5640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid5656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid5664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid5672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid5680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid5688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid5704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid5720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid5728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid5736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid5744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid5760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid5768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid5776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid5784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_eid5792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid5800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid5808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid5816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid5824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid5832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid5840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid5848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid5856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid5864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid5872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid5888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid5896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid5912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid5928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid5936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid5944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid5960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid5968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid5976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid5984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid5992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid6000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_eid6008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_eid6016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid6024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid6032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIAS_in_eid6040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_eq_in_rel_op6050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_ne_in_rel_op6061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gt_in_rel_op6072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gte_in_rel_op6083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lt_in_rel_op6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lte_in_rel_op6105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_op6116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_L_in_null_keyword6304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_L_in_identifier6325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_synpred13_QueryParser654 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred13_QueryParser656 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_FOREACH_in_synpred13_QueryParser662 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_synpred13_QueryParser664 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_synpred13_QueryParser666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred15_QueryParser714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_synpred82_QueryParser1942 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_synpred82_QueryParser1945 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_null_keyword_in_synpred82_QueryParser1949 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_synpred82_QueryParser1951 = new BitSet(new long[]{0x0080000000000000L,0x0002000004000000L});
    public static final BitSet FOLLOW_tuple_type_in_synpred82_QueryParser1953 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_synpred82_QueryParser1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_synpred103_QueryParser2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_synpred108_QueryParser2387 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred108_QueryParser2391 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_field_def_in_synpred108_QueryParser2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred108_QueryParser2402 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred108_QueryParser2405 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred108_QueryParser2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_synpred111_QueryParser2442 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred111_QueryParser2446 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_field_def_in_synpred111_QueryParser2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred111_QueryParser2457 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred111_QueryParser2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred111_QueryParser2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred113_QueryParser2497 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred113_QueryParser2501 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_field_def_in_synpred113_QueryParser2504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred119_QueryParser2682 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_cond_in_synpred119_QueryParser2685 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred119_QueryParser2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_cond_in_synpred120_QueryParser2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred121_QueryParser2718 = new BitSet(new long[]{0x0000000000000000L,0x00007F00000001F8L});
    public static final BitSet FOLLOW_rel_op_in_synpred121_QueryParser2720 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_synpred121_QueryParser2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_synpred122_QueryParser2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred133_QueryParser2951 = new BitSet(new long[]{0x2820800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_cast_in_synpred133_QueryParser2953 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred133_QueryParser2955 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_unary_expr_in_synpred133_QueryParser2957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eval_in_synpred140_QueryParser3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred141_QueryParser3133 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_synpred141_QueryParser3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred141_QueryParser3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_synpred142_QueryParser3181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_synpred145_QueryParser3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_synpred146_QueryParser3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_synpred147_QueryParser3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred158_QueryParser3692 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred158_QueryParser3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_synpred159_QueryParser3704 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred159_QueryParser3706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_synpred160_QueryParser3734 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred160_QueryParser3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_synpred182_QueryParser4046 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_synpred182_QueryParser4048 = new BitSet(new long[]{0x0000000000010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_OUTER_in_synpred182_QueryParser4062 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_synpred182_QueryParser4065 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_item_in_synpred182_QueryParser4068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred185_QueryParser4161 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_join_group_by_expr_in_synpred185_QueryParser4163 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred185_QueryParser4167 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_join_group_by_expr_in_synpred185_QueryParser4169 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred185_QueryParser4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_command_in_synpred191_QueryParser4452 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred191_QueryParser4454 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred192_QueryParser4514 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred192_QueryParser4516 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_synpred192_QueryParser4518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred192_QueryParser4520 = new BitSet(new long[]{0x0080050002000000L});
    public static final BitSet FOLLOW_col_ref_list_in_synpred192_QueryParser4522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred193_QueryParser4583 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred193_QueryParser4585 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_in_synpred193_QueryParser4587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred202_QueryParser4902 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred202_QueryParser4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred210_QueryParser5065 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_synpred210_QueryParser5067 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_identifier_in_synpred290_QueryParser6008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_synpred291_QueryParser6016 = new BitSet(new long[]{0x0000000000000002L});

}