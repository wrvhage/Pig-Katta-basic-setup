#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Launch an EC2 Katta nodes.

if [ -z $1 ]; then
  echo "Cluster name required!"
  exit -1
fi

if [ -z $2 ]; then
  echo "Must specify the number of nodes to start."
  exit -1
fi

CLUSTER=$1
NO_INSTANCES=$2

# Import variables
bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
. "$bin"/katta-ec2-env.sh

if [ ! -f $MASTER_IP_PATH ]; then
  echo "Must start Cluster Master first!"
  exit -1
fi

# Finding Katta image
AMI_IMAGE=`ec2-describe-images -a | grep $S3_BUCKET | grep $KATTA_VERSION | grep $ARCH |grep available | awk '{print $2}'`
MASTER_HOST=`cat $MASTER_PRIVATE_IP_PATH`
MASTER_ZONE=`cat $MASTER_ZONE_PATH`

# Substituting master hostname
sed -e "s|%MASTER_HOST%|$MASTER_HOST|" "$bin"/$USER_DATA_FILE > "$bin"/$USER_DATA_FILE.slave

# Start slaves
echo "Adding $1 node(s) to cluster group $CLUSTER with AMI $AMI_IMAGE"
INSTANCES=`ec2-run-instances $AMI_IMAGE -n "$NO_INSTANCES" -g "$CLUSTER" -k "$KEY_NAME" -f "$bin"/$USER_DATA_FILE.slave -t "$INSTANCE_TYPE" -z "$MASTER_ZONE" $KERNEL_ARG | grep INSTANCE | awk '{print $2}'`
rm "$bin"/$USER_DATA_FILE.slave

#upgrading masters nodes file
echo "Instances are:"
echo $INSTANCES


## wait until all instances are up

echo "Waiting until all new instances are started."
EXPECTED_NODES=`echo $INSTANCES| wc -w`
while true; do
  printf "."
  STARTED_NODES=`ec2-describe-instances $INSTANCES | grep running | awk '{print $5}' | wc -l`
  if [ $STARTED_NODES == $EXPECTED_NODES ]; then
   break;
  fi
  sleep 1
done
echo "" 

## get host names of all nodes in the cluster to upgrade the nodes files
echo "Updating KATTA_HOME/conf/nodes with all nodes in $CLUSTER."
KATTA_INSTANCES=`ec2-describe-instances | awk '"RESERVATION" == $1 && ("'$CLUSTER'" == $4 || "'$CLUSTER_MASTER'" == $4), "RESERVATION" == $1 && ("'$CLUSTER'" != $4 && "'$CLUSTER_MASTER'" != $4)'`
KATTA_INSTANCES=`echo "$KATTA_INSTANCES" | grep INSTANCE | grep running`
[ -z "$KATTA_INSTANCES" ] && echo "No running instances in cluster $CLUSTER." && exit 0
KATTA_INSTANCES=`echo "$KATTA_INSTANCES" | awk '{print $5}'`

# for some reason the path we get back contains a  \r  \n, so we filter the string with sed.
KATTA_HOME=`. "$bin"/katta-ec2 "ls -d /usr/local/katta-*" $CLUSTER | tail -n 1 | sed -e s/$'\r'//g`
. "$bin"/katta-ec2 "echo '$KATTA_INSTANCES' > $KATTA_HOME/conf/nodes" $CLUSTER 

